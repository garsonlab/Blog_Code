{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/material/source/css/disqus-proxy.css","path":"css/disqus-proxy.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/duoshuo.css","path":"css/duoshuo.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/duoshuo.min.css","path":"css/duoshuo.min.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/fontawesome.min.css","path":"css/fontawesome.min.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/gallery.min.css","path":"css/gallery.min.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/ie-blocker.css","path":"css/ie-blocker.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/prettify.css","path":"css/prettify.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/prettify.min.css","path":"css/prettify.min.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/disqus-proxy.min.css","path":"css/disqus-proxy.min.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/uc.css","path":"css/uc.css","modified":0,"renderable":1},{"_id":"themes/material/source/img/bg.png","path":"img/bg.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/sidebar_header.png","path":"img/sidebar_header.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/upyun_logo.svg","path":"img/upyun_logo.svg","modified":0,"renderable":1},{"_id":"themes/material/source/fonts/MaterialIcons-Regular.woff","path":"fonts/MaterialIcons-Regular.woff","modified":0,"renderable":1},{"_id":"themes/material/source/fonts/MaterialIcons-Regular.woff2","path":"fonts/MaterialIcons-Regular.woff2","modified":0,"renderable":1},{"_id":"themes/material/source/js/MathJax.js","path":"js/MathJax.js","modified":0,"renderable":1},{"_id":"themes/material/source/js/Valine.min.js","path":"js/Valine.min.js","modified":0,"renderable":1},{"_id":"themes/material/source/js/hanabi-browser-bundle.js","path":"js/hanabi-browser-bundle.js","modified":0,"renderable":1},{"_id":"themes/material/source/js/ie-blocker.en.js","path":"js/ie-blocker.en.js","modified":0,"renderable":1},{"_id":"themes/material/source/js/ie-blocker.zhCN.js","path":"js/ie-blocker.zhCN.js","modified":0,"renderable":1},{"_id":"themes/material/source/js/lazyload.min.js","path":"js/lazyload.min.js","modified":0,"renderable":1},{"_id":"themes/material/source/js/lsloader.js","path":"js/lsloader.js","modified":0,"renderable":1},{"_id":"themes/material/source/js/lsloader.min.js","path":"js/lsloader.min.js","modified":0,"renderable":1},{"_id":"themes/material/source/js/nprogress.js","path":"js/nprogress.js","modified":0,"renderable":1},{"_id":"themes/material/source/js/prettify.min.js","path":"js/prettify.min.js","modified":0,"renderable":1},{"_id":"themes/material/source/js/queue.js","path":"js/queue.js","modified":0,"renderable":1},{"_id":"themes/material/source/js/queue.min.js","path":"js/queue.min.js","modified":0,"renderable":1},{"_id":"themes/material/source/js/smoothscroll.js","path":"js/smoothscroll.js","modified":0,"renderable":1},{"_id":"themes/material/source/css/material.css","path":"css/material.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/material.min.css","path":"css/material.min.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/style.css","path":"css/style.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/style.min.css","path":"css/style.min.css","modified":0,"renderable":1},{"_id":"themes/material/source/img/avatar.png","path":"img/avatar.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/daily_pic.png","path":"img/daily_pic.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/favicon.png","path":"img/favicon.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/logo.png","path":"img/logo.png","modified":0,"renderable":1},{"_id":"themes/material/source/fonts/MaterialIcons-Regular.ttf","path":"fonts/MaterialIcons-Regular.ttf","modified":0,"renderable":1},{"_id":"themes/material/source/fonts/fontawesome-webfont.woff","path":"fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/material/source/fonts/fontawesome-webfont.woff2","path":"fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/material/source/js/jquery.min.js","path":"js/jquery.min.js","modified":0,"renderable":1},{"_id":"themes/material/source/js/js.js","path":"js/js.js","modified":0,"renderable":1},{"_id":"themes/material/source/js/js.min.js","path":"js/js.min.js","modified":0,"renderable":1},{"_id":"themes/material/source/css/prettify/atelier-cave-dark.min.css","path":"css/prettify/atelier-cave-dark.min.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/prettify/atelier-cave-light.min.css","path":"css/prettify/atelier-cave-light.min.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/prettify/atelier-dune-dark.min.css","path":"css/prettify/atelier-dune-dark.min.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/prettify/atelier-dune-light.min.css","path":"css/prettify/atelier-dune-light.min.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/prettify/atelier-estuary-dark.min.css","path":"css/prettify/atelier-estuary-dark.min.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/prettify/atelier-estuary-light.min.css","path":"css/prettify/atelier-estuary-light.min.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/prettify/atelier-forest-dark.min.css","path":"css/prettify/atelier-forest-dark.min.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/prettify/atelier-forest-light.min.css","path":"css/prettify/atelier-forest-light.min.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/prettify/atelier-heath-dark.min.css","path":"css/prettify/atelier-heath-dark.min.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/prettify/atelier-heath-light.min.css","path":"css/prettify/atelier-heath-light.min.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/prettify/atelier-lakeside-dark.min.css","path":"css/prettify/atelier-lakeside-dark.min.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/prettify/atelier-lakeside-light.min.css","path":"css/prettify/atelier-lakeside-light.min.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/prettify/atelier-plateau-dark.min.css","path":"css/prettify/atelier-plateau-dark.min.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/prettify/atelier-plateau-light.min.css","path":"css/prettify/atelier-plateau-light.min.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/prettify/atelier-savanna-dark.min.css","path":"css/prettify/atelier-savanna-dark.min.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/prettify/atelier-savanna-light.min.css","path":"css/prettify/atelier-savanna-light.min.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/prettify/atelier-seaside-dark.min.css","path":"css/prettify/atelier-seaside-dark.min.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/prettify/atelier-seaside-light.min.css","path":"css/prettify/atelier-seaside-light.min.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/prettify/atelier-sulphurpool-dark.min.css","path":"css/prettify/atelier-sulphurpool-dark.min.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/prettify/atelier-sulphurpool-light.min.css","path":"css/prettify/atelier-sulphurpool-light.min.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/prettify/github-v2.min.css","path":"css/prettify/github-v2.min.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/prettify/hemisu-dark.min.css","path":"css/prettify/hemisu-dark.min.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/prettify/hemisu-light.min.css","path":"css/prettify/hemisu-light.min.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/prettify/tomorrow-night-blue.min.css","path":"css/prettify/tomorrow-night-blue.min.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/prettify/tomorrow-night-bright.min.css","path":"css/prettify/tomorrow-night-bright.min.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/prettify/github.min.css","path":"css/prettify/github.min.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/prettify/tomorrow-night-eighties.min.css","path":"css/prettify/tomorrow-night-eighties.min.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/prettify/tomorrow-night.min.css","path":"css/prettify/tomorrow-night.min.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/prettify/tomorrow.min.css","path":"css/prettify/tomorrow.min.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/prettify/tranquil-heart.min.css","path":"css/prettify/tranquil-heart.min.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/prettify/vibrant-ink.min.css","path":"css/prettify/vibrant-ink.min.css","modified":0,"renderable":1},{"_id":"themes/material/source/img/footer/footer_ico-bilibili.svg","path":"img/footer/footer_ico-bilibili.svg","modified":0,"renderable":1},{"_id":"themes/material/source/img/footer/footer_ico-facebook.svg","path":"img/footer/footer_ico-facebook.svg","modified":0,"renderable":1},{"_id":"themes/material/source/img/footer/footer_ico-github.svg","path":"img/footer/footer_ico-github.svg","modified":0,"renderable":1},{"_id":"themes/material/source/img/footer/footer_ico-gplus.svg","path":"img/footer/footer_ico-gplus.svg","modified":0,"renderable":1},{"_id":"themes/material/source/img/footer/footer_ico-instagram.svg","path":"img/footer/footer_ico-instagram.svg","modified":0,"renderable":1},{"_id":"themes/material/source/img/footer/footer_ico-linkedin.svg","path":"img/footer/footer_ico-linkedin.svg","modified":0,"renderable":1},{"_id":"themes/material/source/img/footer/footer_ico-telegram.svg","path":"img/footer/footer_ico-telegram.svg","modified":0,"renderable":1},{"_id":"themes/material/source/img/footer/footer_ico-tumblr.svg","path":"img/footer/footer_ico-tumblr.svg","modified":0,"renderable":1},{"_id":"themes/material/source/img/footer/footer_ico-twitter.svg","path":"img/footer/footer_ico-twitter.svg","modified":0,"renderable":1},{"_id":"themes/material/source/img/footer/footer_ico-v2ex.svg","path":"img/footer/footer_ico-v2ex.svg","modified":0,"renderable":1},{"_id":"themes/material/source/img/footer/footer_ico-weibo.svg","path":"img/footer/footer_ico-weibo.svg","modified":0,"renderable":1},{"_id":"themes/material/source/img/footer/footer_ico-zhihu.svg","path":"img/footer/footer_ico-zhihu.svg","modified":0,"renderable":1},{"_id":"themes/material/source/img/gallery/arrow.svg","path":"img/gallery/arrow.svg","modified":0,"renderable":1},{"_id":"themes/material/source/img/gallery/close.svg","path":"img/gallery/close.svg","modified":0,"renderable":1},{"_id":"themes/material/source/img/gallery/spinner.svg","path":"img/gallery/spinner.svg","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/material-10.png","path":"img/random/material-10.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/material-12.png","path":"img/random/material-12.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/material-17.png","path":"img/random/material-17.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/material-19.png","path":"img/random/material-19.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/material-4.png","path":"img/random/material-4.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/material-3.png","path":"img/random/material-3.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/material-6.png","path":"img/random/material-6.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/material-8.png","path":"img/random/material-8.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/material-9.png","path":"img/random/material-9.png","modified":0,"renderable":1},{"_id":"themes/material/source/fonts/FontAwesome.otf","path":"fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/material/source/fonts/MaterialIcons-Regular.eot","path":"fonts/MaterialIcons-Regular.eot","modified":0,"renderable":1},{"_id":"themes/material/source/fonts/fontawesome-webfont.eot","path":"fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/material/source/fonts/fontawesome-webfont.ttf","path":"fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/material/source/js/gallery/gallery.js","path":"js/gallery/gallery.js","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/material-1.png","path":"img/random/material-1.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/material-11.png","path":"img/random/material-11.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/material-13.png","path":"img/random/material-13.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/material-15.png","path":"img/random/material-15.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/material-14.png","path":"img/random/material-14.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/material-16.png","path":"img/random/material-16.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/material-18.png","path":"img/random/material-18.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/material-2.png","path":"img/random/material-2.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/material-5.png","path":"img/random/material-5.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/material-7.png","path":"img/random/material-7.png","modified":0,"renderable":1},{"_id":"themes/material/source/fonts/fontawesome-webfont.svg","path":"fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/material/source/fonts/Roboto-Black.ttf","path":"fonts/Roboto-Black.ttf","modified":0,"renderable":1},{"_id":"themes/material/source/fonts/Roboto-Bold.ttf","path":"fonts/Roboto-Bold.ttf","modified":0,"renderable":1},{"_id":"themes/material/source/fonts/Roboto-Light.ttf","path":"fonts/Roboto-Light.ttf","modified":0,"renderable":1},{"_id":"themes/material/source/fonts/Roboto-Medium.ttf","path":"fonts/Roboto-Medium.ttf","modified":0,"renderable":1},{"_id":"themes/material/source/fonts/Roboto-Regular.ttf","path":"fonts/Roboto-Regular.ttf","modified":0,"renderable":1},{"_id":"themes/material/source/fonts/Roboto-Thin.ttf","path":"fonts/Roboto-Thin.ttf","modified":0,"renderable":1}],"Cache":[{"_id":"themes/material/.eslintrc.json","hash":"83ddc0cdc18f28b967795b8dac0421a52cdf7ece","modified":1507305059000},{"_id":"themes/material/.travis.yml","hash":"10a09fe2b341ccad5b97d4bd9cc2c1c03e1863a3","modified":1507305059000},{"_id":"themes/material/.gitignore","hash":"dd9e9495fc7ce09c026f7fdcef45cf8ddfde40d8","modified":1507305059000},{"_id":"themes/material/CONTRIBUTING.zh-cn.md","hash":"ef3ccef0451d6ac616b3a35fbfedb6abd35e6b41","modified":1507305059000},{"_id":"themes/material/CONTRIBUTING.md","hash":"148f555e47d4725fe1faac775107a4d7b03f7136","modified":1507305059000},{"_id":"themes/material/README.md","hash":"635bc9f9111abc8377240ef1bb7a9052606daca0","modified":1507305059000},{"_id":"themes/material/LICENSE","hash":"12d81f50767d4e09aa7877da077ad9d1b915d75b","modified":1507305059000},{"_id":"themes/material/_config.template.yml","hash":"4d27886927d734da2c0d7767dbc6050f520e7389","modified":1507305059000},{"_id":"themes/material/_config.yml","hash":"7ecdbb0c340a35111ed5fef3456373cb60074b1c","modified":1509764027795},{"_id":"themes/material/contributing.json","hash":"1bc0871b1c7822b82533b614090ac0ab7c55282c","modified":1507305059000},{"_id":"themes/material/lint.sh","hash":"49c3a65f8ca65754ec7fefcd2dcb6adc187f3856","modified":1507305059000},{"_id":"themes/material/package.json","hash":"082ad8265b9f8764f9e3e1656a4ad6e1de00d6a5","modified":1507305059000},{"_id":"source/_data/gallery.yaml","hash":"52729c133d48a58fa758de2ee92176b35cb75e8a","modified":1508902179889},{"_id":"source/_data/links.yaml","hash":"e8b383fcaf0bc9b18cf8df2615ebcb0496320ab7","modified":1508999124339},{"_id":"source/_data/linktypes.yaml","hash":"deda2ce8167ea61cd7246fbc94abb18e2e078fc1","modified":1508984826562},{"_id":"source/_posts/Android连接初体验.md","hash":"05885c296d3861e8c422770f27f858d0dcc060a5","modified":1509016472410},{"_id":"source/_posts/Hexo搭建博客.md","hash":"431da5a4ea4012daf2edd8b13a235653ab84d78b","modified":1509078221705},{"_id":"source/_posts/SVN下载github上的文件.md","hash":"969dc1c6e343819fc3611aaba7df18fbfc8cd63a","modified":1509010753667},{"_id":"source/_posts/Unity Scene场景自定义坐标轴.md","hash":"5bdb2c4098130fa5962d7412409b8ab5676e455d","modified":1509015436009},{"_id":"source/_posts/Unity中画实线与虚线.md","hash":"3140066093fdbc4f5929309104eda42f100a841b","modified":1509011226492},{"_id":"source/_posts/Unity中使用c++.md","hash":"24ea904880b939391739b851c2e9e4075744845f","modified":1509013694102},{"_id":"source/_posts/XML 解析生成工具.md","hash":"2d9ead62932da0dc6589e3bb0328969cc328738b","modified":1509012836821},{"_id":"source/_posts/a-simple-shader.md","hash":"7a81a73ebf1d231768334bc784ec626e564f6ad6","modified":1509010030588},{"_id":"source/_posts/dirty-world-by-lua.md","hash":"b1ea8e8c07cdf6122452272a0c2f9a5e548bc58d","modified":1509009703708},{"_id":"source/_posts/hello-world-hexo.md","hash":"566ce9e8fcbed8a99a9c8a1c5d5c7c54e63f8dd4","modified":1509007794242},{"_id":"source/_posts/hello-world.md","hash":"244309896e6c0fd9cd1af14855d6ba44dd0d4487","modified":1509007892266},{"_id":"source/_posts/unity-built-mesh-by-click.md","hash":"616eed1765e88f0123172194ee7f3c724ef10c42","modified":1509008774204},{"_id":"source/_posts/unity-shader-light.md","hash":"2896280777018bc0d248ad594fe9ac605f7bb640","modified":1509010463907},{"_id":"source/_posts/一键对齐父节点.md","hash":"0401206f242cad6853d1c14c41ef490ff77823c1","modified":1509016878224},{"_id":"source/_posts/一键排版对齐.md","hash":"fe53aa88997f45045036163bd3050fd068ac8a9b","modified":1509016945437},{"_id":"source/_posts/屏幕区域点击检测.md","hash":"dfb1613466a5954c788f57dc9eeff02c8488c124","modified":1509015289795},{"_id":"source/_posts/关于A的构想.md","hash":"811644ab971aa04b06ecbc017ca97ea964294303","modified":1509012121725},{"_id":"source/_posts/扫雷unity版.md","hash":"13e40993927d5c364bcb024b2460269605850780","modified":1509012338869},{"_id":"source/_posts/摇摆的小草——顶点动画.md","hash":"22935ec88bfee1d96ea241df3e48f5d1d39c1fa0","modified":1509014860677},{"_id":"source/_posts/无限列表 ScrollView List.md","hash":"80f8e46377aedf71e95ee6e9c40576b0e8a5aec0","modified":1509015655215},{"_id":"source/_posts/永远的主视图.md","hash":"e449b1417ea3152ae9d99024af47f581a4da4ebe","modified":1509015039209},{"_id":"source/_posts/简单Transparent shader的三种实现.md","hash":"b50e08c987728e256adf8e8c1785532cb82418de","modified":1509011513349},{"_id":"source/_posts/统一管理技能及物品cd.md","hash":"55715ded30118e9c823e27b6eb428b804dcfdfff","modified":1509014723415},{"_id":"source/_posts/踩坑填坑——DropDown.md","hash":"ef126536c70636b2679abf528480f3ec1d820199","modified":1509016383486},{"_id":"source/links/index.md","hash":"f3fe425603a04d3f2375a70cce9432986af05937","modified":1508901862642},{"_id":"source/about/index.md","hash":"b4edfa9f57edcd6a32a58b2d4c520436359b56fa","modified":1508936277522},{"_id":"source/gallery/index.md","hash":"80d7713de1406c78f6a94d81e0acb16cd9e8ba37","modified":1508902035653},{"_id":"source/tags/index.md","hash":"1be4afad4dc5457f14146240c5c133d0b50f7a29","modified":1508902236079},{"_id":"source/timeline/index.md","hash":"24d5e903cc698186f5f25244bbf187efc1ca39ac","modified":1508902264712},{"_id":"themes/material/.github/ISSUE_TEMPLATE.md","hash":"52a733a4d2e21a9c4d719495a0353c6719484f9f","modified":1507305059000},{"_id":"themes/material/.github/PULL_REQUEST_TEMPLATE.md","hash":"f2a3a0b929c0909ab99c96fb82853c2c2d67961a","modified":1507305059000},{"_id":"themes/material/languages/ar.yml","hash":"472d71f052e08f3c03b15dd67d11ad41f2eee7bf","modified":1507305059000},{"_id":"themes/material/languages/de.yml","hash":"bce37d066ffa82f3e249d41d0ee883c913cc2c5f","modified":1507305059000},{"_id":"themes/material/languages/en.yml","hash":"f32cddf8bbabd13594f4730bfa84edca243f6360","modified":1508903807873},{"_id":"themes/material/languages/es.yml","hash":"d35f5411bc87277cc2d3a58d9499ddb9cfd46f1b","modified":1507305059000},{"_id":"themes/material/languages/fr.yml","hash":"f456cf31a72d97f2f18e3bb6cf735285d2b9d2c5","modified":1507305059000},{"_id":"themes/material/languages/ja.yml","hash":"768b8330c9c73287efd475e68741ce4ebad29fd1","modified":1507305059000},{"_id":"themes/material/languages/ms.yml","hash":"237a39bbfcce33e7b918f6c5dc0f01bc79900262","modified":1507305059000},{"_id":"themes/material/languages/pt-BR.yml","hash":"a070c2c4d0d3d54f8ca70513cff73c3f7c306db1","modified":1507305059000},{"_id":"themes/material/languages/zh-TW.yml","hash":"19b0f5998b8c3584845325937c7834894a32876a","modified":1508903765388},{"_id":"themes/material/languages/zh-CN.yml","hash":"db2b95d02cd136c3ec0c9a37df9c6ee07505b572","modified":1509017372386},{"_id":"themes/material/layout/index.ejs","hash":"aca1abb741f891776913c8ea2e6ff626a0ea5736","modified":1507305059000},{"_id":"themes/material/layout/layout.ejs","hash":"94f66850b815a262c0f8ff112a32a0a6f43066e3","modified":1507305059000},{"_id":"themes/material/layout/post.ejs","hash":"4dd572a9e84f3a6baa5e3f16d270e58e3cd31a23","modified":1507305059000},{"_id":"themes/material/scripts/helper.js","hash":"e7111a8b1f0ab5bf3466378c48c260a4f6e527d6","modified":1507305059000},{"_id":"themes/material/layout/_partial/Isolation-post-info.ejs","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1507305059000},{"_id":"themes/material/scripts/lib/font_lsload.js","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1507305059000},{"_id":"themes/material/layout/_partial/Isolation-post_entry.ejs","hash":"134dc82320b7aed7d4d78960be63e16c5c4a30fb","modified":1507305059000},{"_id":"themes/material/layout/_partial/Paradox-post-info.ejs","hash":"125cfa5cd9e6e1ca5e958026fdd42f3c3141e34f","modified":1507305059000},{"_id":"themes/material/layout/_partial/Paradox-post-thumbnail.ejs","hash":"6f1e9a85c089ce98a36a2954839fb9ce3e53739e","modified":1507305059000},{"_id":"themes/material/layout/_partial/Paradox-post_entry-thumbnail.ejs","hash":"4d740eba338517d4e10d011a157cdefad45a8e1f","modified":1507305059000},{"_id":"themes/material/layout/_partial/Paradox-post_entry.ejs","hash":"5f4d67e5bd70f635203706cf344b036d891073e6","modified":1507305059000},{"_id":"themes/material/layout/_partial/Paradox-search.ejs","hash":"18a6971b04feccd124a096b8c7cecf1fd4bb914e","modified":1507305059000},{"_id":"themes/material/layout/_partial/blog_info.ejs","hash":"55aec0ca5215db8a20ee9ade6b604bb6a00f0147","modified":1508911984050},{"_id":"themes/material/layout/_partial/comment.ejs","hash":"c9fb1f98a18ca484cb52d60e2ad2bad25b56dfb2","modified":1509021462124},{"_id":"themes/material/layout/_partial/config_css.ejs","hash":"2b1e27faa0446a5e756e61ddf3e969e50948f1ce","modified":1507305059000},{"_id":"themes/material/layout/_partial/config_font.ejs","hash":"4dd5e0658a3e75d29c9abbde83a0ba075e53a322","modified":1507305059000},{"_id":"themes/material/layout/_partial/daily_pic.ejs","hash":"e780fbdb79b5e27091c408545cfd5b64892c9b01","modified":1507305059000},{"_id":"themes/material/layout/_partial/footer-left.ejs","hash":"372cdf718e01fea2736b8e427e57bfcfaa8a557f","modified":1507305059000},{"_id":"themes/material/layout/_partial/footer-option.ejs","hash":"be20394eaeaf2d20db28946b948962c839da6ea9","modified":1507305059000},{"_id":"themes/material/layout/_partial/footer_top.ejs","hash":"9eaace4feb951c96c0033e7271497f3f300d2476","modified":1507305059000},{"_id":"themes/material/layout/_partial/footer.ejs","hash":"530626c347882579d09d71df68993e25076ca8e2","modified":1507305059000},{"_id":"themes/material/layout/_partial/head.ejs","hash":"615805cc252a60b1b690e743ec206cb5f0466342","modified":1509022884133},{"_id":"themes/material/layout/_partial/import_js.ejs","hash":"21d81212fe0e5b82e737fdc1f47bf434b4cebb4b","modified":1507305059000},{"_id":"themes/material/layout/_partial/isolate-sns_list.ejs","hash":"fc5f03ebb847f85975676a9dfee8870e7c908008","modified":1507305059000},{"_id":"themes/material/layout/_partial/isolate_info.ejs","hash":"b8ec76716bfa2e6513b4df6814fe8676536a94c1","modified":1507305059000},{"_id":"themes/material/layout/_partial/post-content.ejs","hash":"ad626e3b60bc4a17bacff02cf9b0a8beaba2ad1e","modified":1507305059000},{"_id":"themes/material/layout/_partial/post-header.ejs","hash":"b0b8973c48db6376a24d4b4b1d2eb15d18d6508c","modified":1507305059000},{"_id":"themes/material/layout/_partial/post-info-share.ejs","hash":"9f28d62bf728c2bd89411688426a65d7ee55400c","modified":1507305059000},{"_id":"themes/material/layout/_partial/post-nav.ejs","hash":"3b6d4568cc46f60c697ad9ec85a4aa5971f3eecc","modified":1507305059000},{"_id":"themes/material/layout/_partial/sidebar-footer.ejs","hash":"6c3486b846473e0d58666f7a8720f5bf4a14e030","modified":1507305059000},{"_id":"themes/material/layout/_partial/sidebar-footer_image.ejs","hash":"b9157d2072028a1db3c3419f76bde6637e85cf0e","modified":1507305059000},{"_id":"themes/material/layout/_partial/sidebar-header.ejs","hash":"06295e01092f55504d30a343c3fdc5091280e495","modified":1507305059000},{"_id":"themes/material/layout/_partial/sidebar-navigation.ejs","hash":"569f5c70eb64c5a08d917d93d310927ed1a96c01","modified":1508903597247},{"_id":"themes/material/layout/_partial/sidebar.ejs","hash":"c5ce6136e82895cb80dab8a918a7cdf2fe820fea","modified":1507305059000},{"_id":"themes/material/layout/_partial/structured-data.ejs","hash":"e845df290185dc300cc4edcc08b50fddc5b6909b","modified":1507305059000},{"_id":"themes/material/layout/_partial/toc_button.ejs","hash":"688c3fc12e2548ff27fe60688f79dcce2881fd50","modified":1507305059000},{"_id":"themes/material/layout/_widget/dnsprefetch.ejs","hash":"5e4c5359d69a64042183db13f6dd771b1f7f6b31","modified":1507305059000},{"_id":"themes/material/layout/_widget/leancloud-like.ejs","hash":"e4780fe3bbb049db38d694fc18dee13d799bd51d","modified":1507305059000},{"_id":"themes/material/layout/_widget/leancloud-views.ejs","hash":"211dc183b8e84f71b2c25b3ac6659d162d81662b","modified":1507305059000},{"_id":"themes/material/layout/_widget/leancloud-views_num.ejs","hash":"e27baba6a2de406463735d276606b15fb40f5eba","modified":1507305059000},{"_id":"themes/material/layout/_widget/mathjax.ejs","hash":"b68befe1fea84739c8429c344e570a8bc0357401","modified":1507305059000},{"_id":"themes/material/layout/_widget/nprogress.ejs","hash":"901a64600854b312209287c702278183600e06b9","modified":1507305059000},{"_id":"themes/material/layout/_widget/page-gallery.ejs","hash":"4e8ac43adea1833407d06e1aa3ca340f91c065e0","modified":1507305059000},{"_id":"themes/material/layout/_widget/page-links.ejs","hash":"8d14255bddd49ec48af908effdeb870620cf7216","modified":1509172690700},{"_id":"themes/material/layout/_widget/page-tagcloud.ejs","hash":"e71de74e4067cc4e6aef1e09ac429c92bcd178b3","modified":1507305059000},{"_id":"themes/material/layout/_widget/page-timeline.ejs","hash":"9fa0195e08d9fd40aa0333e9279c98bc65acf604","modified":1507305059000},{"_id":"themes/material/layout/_widget/qrcode.ejs","hash":"3212e5d29fe8490c5d9a844ec9c2ce9925532de8","modified":1507305059000},{"_id":"themes/material/layout/_widget/search-local-js.ejs","hash":"146bfb6952f17c0afbd26ac16a15c4d0d73c83d9","modified":1507305059000},{"_id":"themes/material/layout/_widget/search-swiftype-js.ejs","hash":"7ad1e843e620ccd9b3c041dccfdcee97921247a1","modified":1507305059000},{"_id":"themes/material/scripts/lib/css_lsload.js","hash":"179f5f5e3297a7fb7d90545ddd94eb468a11046e","modified":1507305059000},{"_id":"themes/material/scripts/lib/get_file_hex.js","hash":"eb3b9a45f8ca45ef40d5421baef7d4484023982c","modified":1507305059000},{"_id":"themes/material/scripts/lib/js_hex.js","hash":"2704583aa036d538544ce31c2e924c0c125309dd","modified":1507305059000},{"_id":"themes/material/scripts/lib/js_lsload.js","hash":"72f885b13fe0028a0e2acb7168dcc66e39ea1592","modified":1507305059000},{"_id":"themes/material/scripts/lib/path_for.js","hash":"f944e3b53a468962121aa3357cc0bc18ac27a34c","modified":1507305059000},{"_id":"themes/material/source/css/disqus-proxy.css","hash":"770776d8cec27cd5661bdfd59eff9af263439989","modified":1507305059000},{"_id":"themes/material/source/css/duoshuo.css","hash":"32a02eaa01ff7b66fd9df307b0d33d52810096be","modified":1507305059000},{"_id":"themes/material/source/css/duoshuo.min.css","hash":"89a30544b8b01d061da51c40f2af702a7969de5e","modified":1507305059000},{"_id":"themes/material/source/css/fontawesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1507305059000},{"_id":"themes/material/source/css/gallery.min.css","hash":"c5333ca835aae49239d809130a7b281af745729e","modified":1507305059000},{"_id":"themes/material/source/css/ie-blocker.css","hash":"dddce7e6250a449291888ae7865697282a213b14","modified":1507305059000},{"_id":"themes/material/source/css/prettify.css","hash":"c395f20ee64e80c2b6b15c7dade02f9aaaeab2c8","modified":1507305059000},{"_id":"themes/material/source/css/prettify.min.css","hash":"62edd8f08656463b0e077dcf893faa3cc8eb5fe4","modified":1507305059000},{"_id":"themes/material/source/css/disqus-proxy.min.css","hash":"3f8f99f71d361302288b0ba11fd36072564b08c2","modified":1507305059000},{"_id":"themes/material/source/css/uc.css","hash":"1e0977a2c9bdf721cc05654dfc025dd250655852","modified":1507305059000},{"_id":"themes/material/source/img/bg.png","hash":"a32f9717e19e821a4030ade551dc2917c889fcd8","modified":1507305059000},{"_id":"themes/material/source/img/sidebar_header.png","hash":"c47f4d39f421c0a950279d050ae82f9ae6dd19ff","modified":1507305059000},{"_id":"themes/material/source/img/upyun_logo.svg","hash":"1f118b2b9c54f431d5e731ccf316ceefe605ba67","modified":1507305059000},{"_id":"themes/material/source/fonts/MaterialIcons-Regular.woff","hash":"c6c953c2ccb2ca9abb21db8dbf473b5a435f0082","modified":1507305059000},{"_id":"themes/material/source/fonts/MaterialIcons-Regular.woff2","hash":"09963592e8c953cc7e14e3fb0a5b05d5042e8435","modified":1507305059000},{"_id":"themes/material/source/js/MathJax.js","hash":"a21703b5848325a902c9b39bbf3ca6490d3e1b1b","modified":1507305059000},{"_id":"themes/material/source/js/Valine.min.js","hash":"6a287a99a772a0ea8f98b133523429c9250cc67f","modified":1507305059000},{"_id":"themes/material/source/js/hanabi-browser-bundle.js","hash":"d646647bda386140c8315d60e3ff4ddbdb15c1ea","modified":1507305059000},{"_id":"themes/material/source/js/ie-blocker.en.js","hash":"96ca8e677a12048d099319ebdf01983ddc6ca80c","modified":1507305059000},{"_id":"themes/material/source/js/ie-blocker.zhCN.js","hash":"0ed49b0ec1d1924b128fbd97fca2cf7af7856fdf","modified":1507305059000},{"_id":"themes/material/source/js/lazyload.min.js","hash":"5348fd7aa4dbefac9d21091c9fd5e263563b5540","modified":1507305059000},{"_id":"themes/material/source/js/lsloader.js","hash":"2b14e57784fb6b5f58d71584189c61af45f393e8","modified":1507305059000},{"_id":"themes/material/source/js/lsloader.min.js","hash":"1a68a8d267948ea8475245b7d365a1a1bd8f732e","modified":1507305059000},{"_id":"themes/material/source/js/nprogress.js","hash":"a3058d4b6afb5d7a14e5afcbb88f778de35864f0","modified":1507305059000},{"_id":"themes/material/source/js/prettify.min.js","hash":"69908fe0a09cee107c25cb5d769b861723e7b7bb","modified":1507305059000},{"_id":"themes/material/source/js/queue.js","hash":"dd252616b568b71c222d9cfc859bfe52738e576a","modified":1507305059000},{"_id":"themes/material/source/js/queue.min.js","hash":"21aab782ca33efbb1386cc960b6be0a02106760d","modified":1507305059000},{"_id":"themes/material/source/js/smoothscroll.js","hash":"df56a1c84191a62750ae820943377b6775fca0e2","modified":1507305059000},{"_id":"themes/material/source/css/material.css","hash":"068e2b00f686157b6e8b78b9b808112adbedf4de","modified":1507305059000},{"_id":"themes/material/source/css/material.min.css","hash":"1a19febb9214ab689b02f5bb8ccb23579e6c1181","modified":1507305059000},{"_id":"themes/material/source/css/style.css","hash":"a2f27c40f412dc24e1ed5f62a4117523a226eed0","modified":1507305059000},{"_id":"themes/material/source/css/style.min.css","hash":"a9e9b33e1fcf818f08a04b909c86f2460a05f060","modified":1507305059000},{"_id":"themes/material/source/img/avatar.png","hash":"686fb40ecde42e86c693b12af8848a573a76f587","modified":1509437649858},{"_id":"themes/material/source/img/daily_pic.png","hash":"5e9a5f6a134889d0242e69061837f2032416d7ce","modified":1507305059000},{"_id":"themes/material/source/img/favicon.png","hash":"686fb40ecde42e86c693b12af8848a573a76f587","modified":1509437649858},{"_id":"themes/material/source/img/logo.png","hash":"686fb40ecde42e86c693b12af8848a573a76f587","modified":1509437649858},{"_id":"themes/material/source/fonts/MaterialIcons-Regular.ttf","hash":"fc05de31234e0090f7ddc28ce1b23af4026cb1da","modified":1507305059000},{"_id":"themes/material/source/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1507305059000},{"_id":"themes/material/source/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1507305059000},{"_id":"themes/material/source/js/jquery.min.js","hash":"00073d6597d2760b81387274a9ec56b9d5cb1552","modified":1507305059000},{"_id":"themes/material/source/js/js.js","hash":"64b3f20e7138674ecf21e6e3982565ea63feae26","modified":1507305059000},{"_id":"themes/material/source/js/js.min.js","hash":"709d347d3be033b841de0493b7cf532b594bb1f6","modified":1507305059000},{"_id":"themes/material/layout/_widget/analytics/baidu-analytics.ejs","hash":"3866a7fead3c1f94a517f1f9d629f092670b1520","modified":1507305059000},{"_id":"themes/material/layout/_widget/analytics/cnzz-analytics.ejs","hash":"1765e3dcd92961292f40d1812e593186c77b17ef","modified":1507305059000},{"_id":"themes/material/layout/_widget/analytics/google-analytics.ejs","hash":"3b10ebf524baf0c24b22dcd110b39d15c5acb9b5","modified":1507305059000},{"_id":"themes/material/source/css/prettify/atelier-cave-dark.min.css","hash":"cb0156cdc36500a26b232ae1c81fdc880eba85e7","modified":1507305059000},{"_id":"themes/material/source/css/prettify/atelier-cave-light.min.css","hash":"4b62dc45aa351b071d6a434dc54fe8c2e15c85cc","modified":1507305059000},{"_id":"themes/material/source/css/prettify/atelier-dune-dark.min.css","hash":"c5094d99ca0e619d97860c88211bf908fdf830b1","modified":1507305059000},{"_id":"themes/material/source/css/prettify/atelier-dune-light.min.css","hash":"b3ad98483e4d5bde72d52a15423d98e0d086db09","modified":1507305059000},{"_id":"themes/material/source/css/prettify/atelier-estuary-dark.min.css","hash":"7e3a065cafeb3acc1d7178f64ef4265f5d5ad2b9","modified":1507305059000},{"_id":"themes/material/source/css/prettify/atelier-estuary-light.min.css","hash":"1d12d8f7fa9c122a186ee76fdf681c191a68f104","modified":1507305059000},{"_id":"themes/material/source/css/prettify/atelier-forest-dark.min.css","hash":"9296b851a5b66785a60afa5da5fe9080bda96bf5","modified":1507305059000},{"_id":"themes/material/source/css/prettify/atelier-forest-light.min.css","hash":"3532f6e86bf4afbba05f7a074b791b73174f9622","modified":1507305059000},{"_id":"themes/material/source/css/prettify/atelier-heath-dark.min.css","hash":"954309acd7918422382a3ff2f9c2988aec0ff956","modified":1507305059000},{"_id":"themes/material/source/css/prettify/atelier-heath-light.min.css","hash":"a67199fa580b3aa2df031e5d2028929d29ca3b45","modified":1507305059000},{"_id":"themes/material/source/css/prettify/atelier-lakeside-dark.min.css","hash":"18575fc6dff855e395a39d0383d2f18807091f0d","modified":1507305059000},{"_id":"themes/material/source/css/prettify/atelier-lakeside-light.min.css","hash":"e20e8ac64432fa1aa6f74792b58196af7cf79c12","modified":1507305059000},{"_id":"themes/material/source/css/prettify/atelier-plateau-dark.min.css","hash":"137e3c499a720da3c1d57b4dc53264b1d623e1c5","modified":1507305059000},{"_id":"themes/material/source/css/prettify/atelier-plateau-light.min.css","hash":"153801640fdcbb74c0de3f15345110f2210eb991","modified":1507305059000},{"_id":"themes/material/source/css/prettify/atelier-savanna-dark.min.css","hash":"fba92c652fd6704422b8f2bbc11706805a6faed0","modified":1507305059000},{"_id":"themes/material/source/css/prettify/atelier-savanna-light.min.css","hash":"d9425ffb7c60d646190c22b9a5f72091ee5f9ace","modified":1507305059000},{"_id":"themes/material/source/css/prettify/atelier-seaside-dark.min.css","hash":"e0e6bbacc75a349b1e49c236d374b0e42f1fd485","modified":1507305059000},{"_id":"themes/material/source/css/prettify/atelier-seaside-light.min.css","hash":"732750b75389c1c49204f37705e6abeee40ce64f","modified":1507305059000},{"_id":"themes/material/source/css/prettify/atelier-sulphurpool-dark.min.css","hash":"015a35dddaee153fa8bb71d7f3818a6ba4d120d8","modified":1507305059000},{"_id":"themes/material/source/css/prettify/atelier-sulphurpool-light.min.css","hash":"ab1a6200eab648cab443c3df77fde9b237ef27b6","modified":1507305059000},{"_id":"themes/material/source/css/prettify/github-v2.min.css","hash":"57630621d20842a529bdea7b17fc90f520e562ef","modified":1507305059000},{"_id":"themes/material/source/css/prettify/hemisu-dark.min.css","hash":"a671248cfd573292026d2174817e82e593691052","modified":1507305059000},{"_id":"themes/material/source/css/prettify/hemisu-light.min.css","hash":"b2556ff41e513fd13d032ec84a37ee260a905815","modified":1507305059000},{"_id":"themes/material/source/css/prettify/tomorrow-night-blue.min.css","hash":"c442728d96485bcf816151fe6bd96993aae09852","modified":1507305059000},{"_id":"themes/material/source/css/prettify/tomorrow-night-bright.min.css","hash":"cf251fd3edfd736695272a0f1b41d509b7bb1fb9","modified":1507305059000},{"_id":"themes/material/source/css/prettify/github.min.css","hash":"19cf828225288fa5c006f1d8f66c39d11f4ef7f2","modified":1507305059000},{"_id":"themes/material/source/css/prettify/tomorrow-night-eighties.min.css","hash":"6ce259d674bb4edda23eea32b2379be17d0e0e6e","modified":1507305059000},{"_id":"themes/material/source/css/prettify/tomorrow-night.min.css","hash":"d989206d124035494acb4b0cdc7fbc89f3b7d108","modified":1507305059000},{"_id":"themes/material/source/css/prettify/tomorrow.min.css","hash":"b2c6d610b77f0273fefab5aa4ad26a7f58956f87","modified":1507305059000},{"_id":"themes/material/source/css/prettify/tranquil-heart.min.css","hash":"0f6eefbdda8e410832e9c516a5dd19899217ef06","modified":1507305059000},{"_id":"themes/material/source/css/prettify/vibrant-ink.min.css","hash":"c265bac6c31cf622b536b29c8a6bc46955d6fe63","modified":1507305059000},{"_id":"themes/material/source/img/footer/footer_ico-bilibili.svg","hash":"1a007ae30d69aa597f589edb4ee0638a9814c988","modified":1507305059000},{"_id":"themes/material/source/img/footer/footer_ico-facebook.svg","hash":"74b3b3c6bd1d76b7eaaf75d36ac929b11a5a3e82","modified":1507305059000},{"_id":"themes/material/source/img/footer/footer_ico-github.svg","hash":"5f1f9f53e6a87ad674108c6bd16e424a1e888c61","modified":1507305059000},{"_id":"themes/material/source/img/footer/footer_ico-gplus.svg","hash":"b50274133ab263bcacdf729871d0446b615ac984","modified":1507305059000},{"_id":"themes/material/source/img/footer/footer_ico-instagram.svg","hash":"294c511e62063ea49f61e23958ab27d643ba0228","modified":1507305059000},{"_id":"themes/material/source/img/footer/footer_ico-linkedin.svg","hash":"9831c86352ec5ff283a3277d033120f86388c277","modified":1507305059000},{"_id":"themes/material/source/img/footer/footer_ico-telegram.svg","hash":"413d66e40ca476deeb49364935d49d2f7839cdfd","modified":1507305059000},{"_id":"themes/material/source/img/footer/footer_ico-tumblr.svg","hash":"11daf4fa4220787306fc21a879429e98b7db8d03","modified":1507305059000},{"_id":"themes/material/source/img/footer/footer_ico-twitter.svg","hash":"58df7777d6fcee8fa3c42453c091714bb3f97c95","modified":1507305059000},{"_id":"themes/material/source/img/footer/footer_ico-v2ex.svg","hash":"c5ffaf67a97e534c266d1585a9a3b56f1bfe3052","modified":1507305059000},{"_id":"themes/material/source/img/footer/footer_ico-weibo.svg","hash":"26d0cdb77f0c4afd60111176167eacfa222bc4c1","modified":1507305059000},{"_id":"themes/material/source/img/footer/footer_ico-zhihu.svg","hash":"d3f8da320fffefc5144822665dfe17d25af4061c","modified":1507305059000},{"_id":"themes/material/source/img/gallery/arrow.svg","hash":"144d73877e52acc5068bc0c9d1e69ef450e69f26","modified":1507305059000},{"_id":"themes/material/source/img/gallery/close.svg","hash":"2690088060811f01c9360df75be80070156ff176","modified":1507305059000},{"_id":"themes/material/source/img/gallery/spinner.svg","hash":"fc9d1cd1118ac896d4f5326e110a653f3ea32b11","modified":1507305059000},{"_id":"themes/material/source/img/random/material-10.png","hash":"363466a376e4df9e61acc904cd25f3c7ae1a7280","modified":1507305059000},{"_id":"themes/material/source/img/random/material-12.png","hash":"d020b3d42542715c7ae95b3d8603fe3180bfe8f3","modified":1507305059000},{"_id":"themes/material/source/img/random/material-17.png","hash":"ece82810e31f711576db598c845c3d97bd49fe67","modified":1507305059000},{"_id":"themes/material/source/img/random/material-19.png","hash":"768ed1a4966e2e418cb00f6b36d2fc9058328eb3","modified":1507305059000},{"_id":"themes/material/source/img/random/material-4.png","hash":"b475dfbf67a076a4e17a5527fd1973b1d4adac07","modified":1507305059000},{"_id":"themes/material/source/img/random/material-3.png","hash":"848eaa70b9b0cd7a2204c78e8aa324d8f96bb097","modified":1507305059000},{"_id":"themes/material/source/img/random/material-6.png","hash":"2f841e0c064fecb607ad1e149662a0c96d9e725d","modified":1507305059000},{"_id":"themes/material/source/img/random/material-8.png","hash":"57db542d526ef6866cb34e261096e93a0e6f3a82","modified":1507305059000},{"_id":"themes/material/source/img/random/material-9.png","hash":"840319c4d1f38fb8df79eb4669ed2e14d89fd680","modified":1507305059000},{"_id":"themes/material/source/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1507305059000},{"_id":"themes/material/source/fonts/MaterialIcons-Regular.eot","hash":"26fb8cecb5512223277b4d290a24492a0f09ede1","modified":1507305059000},{"_id":"themes/material/source/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1507305059000},{"_id":"themes/material/source/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1507305059000},{"_id":"themes/material/source/js/gallery/gallery.js","hash":"8ee48312a183b42a9886211a0ec825ea0d041301","modified":1507305059000},{"_id":"themes/material/layout/_widget/comment/livere/common.ejs","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1507305059000},{"_id":"themes/material/source/img/random/material-1.png","hash":"4839299eaa4db7272befa7b824e54b647fbbfc44","modified":1507305059000},{"_id":"themes/material/source/img/random/material-11.png","hash":"ce20b0ad08a248c036115374f2edb7301ff60b72","modified":1507305059000},{"_id":"themes/material/source/img/random/material-13.png","hash":"1a8378db3121b583485e2b939cb1aa0e0b14b0c8","modified":1507305059000},{"_id":"themes/material/source/img/random/material-15.png","hash":"36b9937cf3810e4970902b78797ad29b0831f065","modified":1507305059000},{"_id":"themes/material/source/img/random/material-14.png","hash":"b4f65b601960138c69f57171b0ddd55895483f45","modified":1507305059000},{"_id":"themes/material/source/img/random/material-16.png","hash":"ade7f75200d3fb38326e3cf1e9f1a812fb12a43b","modified":1507305059000},{"_id":"themes/material/source/img/random/material-18.png","hash":"4b98204abe36ecd3f30678d2c22059130e0db328","modified":1507305059000},{"_id":"themes/material/source/img/random/material-2.png","hash":"faba2ce69c19d6c1dac392dd10b054e0061f6fb7","modified":1507305059000},{"_id":"themes/material/source/img/random/material-5.png","hash":"5041ebd073a139c67f8ed271e74c967c7eb9c5be","modified":1507305059000},{"_id":"themes/material/source/img/random/material-7.png","hash":"5c49ff3c064aaeb21227c2bd98b5ae422ddca84c","modified":1507305059000},{"_id":"themes/material/layout/_widget/comment/disqus/common.ejs","hash":"c11cfceb0906a96399dede5da01ff7fe4787f8a5","modified":1507305059000},{"_id":"themes/material/layout/_widget/comment/disqus/main.ejs","hash":"21e0eeff664191b818d7a0071ae7edcdfc270442","modified":1507305059000},{"_id":"themes/material/layout/_widget/comment/disqus/enter.ejs","hash":"39192034766349e47967da63184f9104fdded2ab","modified":1507305059000},{"_id":"themes/material/layout/_widget/comment/changyan/common.ejs","hash":"40e1fc76d6b7f64e226693fb2fe1a6bb17bae245","modified":1507305059000},{"_id":"themes/material/layout/_widget/comment/changyan/enter.ejs","hash":"e3cfb4f37ea35457f112f3e822e130c930086497","modified":1507305059000},{"_id":"themes/material/layout/_widget/comment/changyan/main.ejs","hash":"77539ff32cc9d1204b848e01b5277fff5cbd61e0","modified":1507305059000},{"_id":"themes/material/layout/_widget/comment/disqus_click/common.ejs","hash":"d243f576b366a62191066459efcc6fd0ab79d00a","modified":1507305059000},{"_id":"themes/material/layout/_widget/comment/disqus_click/enter.ejs","hash":"d82f0296f8bae25223ec44e6e05b817d3a234884","modified":1507305059000},{"_id":"themes/material/layout/_widget/comment/disqus_click/main.ejs","hash":"083154d9c280898c00fe7521e9848018f86ec7c5","modified":1507305059000},{"_id":"themes/material/layout/_widget/comment/gitment/common.ejs","hash":"9c6c8d1b448c32afb01c2d0351e87f4d4a17ec3c","modified":1507305059000},{"_id":"themes/material/layout/_widget/comment/gitment/enter.ejs","hash":"46d904fde9233694b95c6a3d91b9a2b7a6805850","modified":1507305059000},{"_id":"themes/material/layout/_widget/comment/gitment/main.ejs","hash":"e622660eda38cda05847aadc2a3e31a228fc519b","modified":1507305059000},{"_id":"themes/material/layout/_widget/comment/livere/enter.ejs","hash":"194b7bb581a3b8608a7ab135b6953d7908f51cc8","modified":1507305059000},{"_id":"themes/material/layout/_widget/comment/livere/main.ejs","hash":"9faea95d6509415223d450032352d55d022733a1","modified":1507305059000},{"_id":"themes/material/layout/_widget/comment/valine/common.ejs","hash":"94e2e6062df9b74e9fcee816fa019776b06712c2","modified":1507305059000},{"_id":"themes/material/layout/_widget/comment/valine/enter.ejs","hash":"338b60e1f5542d2e8d7ba999c2fa58ab4bc066dd","modified":1507305059000},{"_id":"themes/material/layout/_widget/comment/valine/main.ejs","hash":"2ae3985f13173acccb4020d14bab0d70d6da12d5","modified":1509022036908},{"_id":"themes/material/source/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1507305059000},{"_id":"themes/material/source/fonts/Roboto-Black.ttf","hash":"0244e6497a51fb8a38ca7e6fe297b066e2e09af5","modified":1507305059000},{"_id":"themes/material/source/fonts/Roboto-Bold.ttf","hash":"d1864343b543978bd491d40c80010cea50c1b7bf","modified":1507305059000},{"_id":"themes/material/source/fonts/Roboto-Light.ttf","hash":"b9ea2eaf26ff8fdcb5aee3e0c2c7a6084ebb6aac","modified":1507305059000},{"_id":"themes/material/source/fonts/Roboto-Medium.ttf","hash":"3965419aab480c184f66bc5e39c1719a373a4ef6","modified":1507305059000},{"_id":"themes/material/source/fonts/Roboto-Regular.ttf","hash":"06691e103d4d3ce1f1108d9b7d21254b714a41f8","modified":1507305059000},{"_id":"themes/material/source/fonts/Roboto-Thin.ttf","hash":"ed5101c3a800f35e925603a406e0c2dc5278b96c","modified":1507305059000},{"_id":"public/search.xml","hash":"f2d66cb0b7b2a4e9726ccee88418038aff83984e","modified":1509764125503},{"_id":"public/links/index.html","hash":"5366eda67225d2c6a92d5e550ade10cac33bcce0","modified":1509763907497},{"_id":"public/about/index.html","hash":"20a3a48a46148ab677acbd464d7758d7efaf22b1","modified":1509763907118},{"_id":"public/gallery/index.html","hash":"1fbe881774144ee0b1ec4b195e86ae7417b1626c","modified":1509454525673},{"_id":"public/tags/index.html","hash":"d0815d567526cc5182af80dd4627187d307ceb99","modified":1509763907118},{"_id":"public/timeline/index.html","hash":"6e07de8a50334333b62abed52391e651a862af31","modified":1509763907497},{"_id":"public/2017/10/20/Hexo搭建博客/index.html","hash":"bf9f6d14a1d86f115bab82b44cebe9b16fb4d86f","modified":1509764126385},{"_id":"public/2017/08/08/踩坑填坑——DropDown/index.html","hash":"06d6aaf8ea4638eee21df1ecd089644d523fd18d","modified":1509764126385},{"_id":"public/2017/05/23/一键排版对齐/index.html","hash":"64c1d27119676e258cf578b6c998b1867404cfa0","modified":1509764126385},{"_id":"public/2017/05/02/无限列表 ScrollView List/index.html","hash":"767f1269ac454eea58aeb97906942f015e5f6256","modified":1509764126385},{"_id":"public/2017/04/27/Unity Scene场景自定义坐标轴/index.html","hash":"fb01886afd4b6fbcd4c75192a37530bc97588ba7","modified":1509764126385},{"_id":"public/2017/04/17/屏幕区域点击检测/index.html","hash":"89801020f3b9442ea597e3680054ded74bb26f1d","modified":1509764126385},{"_id":"public/2017/03/24/永远的主视图/index.html","hash":"200aaa01f854f07cfcb1e6bde60056073ba227e9","modified":1509764126385},{"_id":"public/2017/03/23/摇摆的小草——顶点动画/index.html","hash":"92e57657ddb4509af4dfdb1a43d2d933b0003795","modified":1509764126386},{"_id":"public/2017/03/20/统一管理技能及物品cd/index.html","hash":"f5ef59d55b2e01915673093a84e65a923612a0dc","modified":1509764126386},{"_id":"public/2017/03/13/Unity中使用c++/index.html","hash":"f87e499d8ceda5da10cea55c01648a76cc2f13a0","modified":1509764126387},{"_id":"public/2017/03/01/XML 解析生成工具/index.html","hash":"60faa59a6c9a931f079eb554620bb511e006a3e0","modified":1509764126387},{"_id":"public/2017/02/27/一键对齐父节点/index.html","hash":"266e70045c72950bb5c972e23156b0e89df99cf5","modified":1509764126387},{"_id":"public/2017/02/20/扫雷unity版/index.html","hash":"92a77cfddedf4b2fef092feef2cbecf36f90a599","modified":1509764126387},{"_id":"public/2017/02/13/关于A的构想/index.html","hash":"14fe83676a1802c0fee8254257f50141fc29eac3","modified":1509764126387},{"_id":"public/2016/12/05/Android连接初体验/index.html","hash":"c815200ca2ecf998e9d13440b4c1c8de055fd898","modified":1509764126387},{"_id":"public/2016/11/24/Unity中画实线与虚线/index.html","hash":"7da3e0773a277ab3e8bb32dd17c67a6c2a72885f","modified":1509764126387},{"_id":"public/2016/11/24/简单Transparent shader的三种实现/index.html","hash":"2ec70b51333550510b8080e2ca692044abc56d62","modified":1509764126387},{"_id":"public/2016/11/07/SVN下载github上的文件/index.html","hash":"025973d65f402e49b61caca7820b6d010315139c","modified":1509764126387},{"_id":"public/2016/09/23/a-simple-shader/index.html","hash":"910d395d532e4a661286f07ad657693ffce73c32","modified":1509764126387},{"_id":"public/2016/09/23/unity-shader-light/index.html","hash":"08e7bffbeb123dee6a8b80400fce0cd9b4fe9b7a","modified":1509764126387},{"_id":"public/2016/08/01/dirty-world-by-lua/index.html","hash":"ad2df47256552083bceaa42c724571c8354b8717","modified":1509764126387},{"_id":"public/2016/06/08/unity-built-mesh-by-click/index.html","hash":"cf3a1979260a28a2e8bbb300be81197dda1ac61e","modified":1509764126387},{"_id":"public/2016/06/04/hello-world/index.html","hash":"840b20766d452697c949e4ca16841fbed26afa4c","modified":1509764126387},{"_id":"public/2016/06/01/hello-world-hexo/index.html","hash":"c2ec15d1517e867a2e011b5fe9103f098bb8cf7b","modified":1509764126387},{"_id":"public/archives/index.html","hash":"42ddcb1e6bc81feb0b4154acff3f91850f3dbafe","modified":1509763907510},{"_id":"public/archives/page/3/index.html","hash":"fa978363502978ee9a6ca9821e8108d7c4378e91","modified":1509763907511},{"_id":"public/archives/2016/index.html","hash":"8ea8e2e0a14680fac6c6dcf4b83f697f313ea45f","modified":1509763907511},{"_id":"public/archives/page/2/index.html","hash":"127fc8b38a25479ba880b8bdb21d5b70a7d7ab44","modified":1509763907511},{"_id":"public/archives/2016/06/index.html","hash":"9725867c04cbaf6961de925f25b043b2bee71b6b","modified":1509763907511},{"_id":"public/archives/2016/08/index.html","hash":"2f4560432e7209758f2a466c9b29c5e99d0bd701","modified":1509763907511},{"_id":"public/archives/2016/09/index.html","hash":"f89063aca1041dfa04eefe2ef04ff3d9bdbaa6d4","modified":1509763907511},{"_id":"public/archives/2016/11/index.html","hash":"f2b826cb5eea292d8dc69bd49420e088417ad131","modified":1509763907511},{"_id":"public/archives/2016/12/index.html","hash":"fb5f4a48df9f57546d2485229685389afe2fd140","modified":1509763907511},{"_id":"public/archives/2017/index.html","hash":"29eaa2e12d03dc202ed0c51d0210626bad7766ce","modified":1509763907519},{"_id":"public/archives/2017/page/2/index.html","hash":"9346265d9ab3f76374a1555aa6b3f12604add6e1","modified":1509763907536},{"_id":"public/archives/2017/03/index.html","hash":"502a5b03830d43316bf11b10c3acd88617c14e2a","modified":1509763907537},{"_id":"public/archives/2017/02/index.html","hash":"29cb25ca7315fecea70bf120eac6f3827843e112","modified":1509763907536},{"_id":"public/archives/2017/04/index.html","hash":"783815f65a8e47ac796f6583ada7bad4c27de150","modified":1509763907537},{"_id":"public/archives/2017/05/index.html","hash":"616f395ad54e40beb330fbb76490e0ad691fa7cd","modified":1509763907537},{"_id":"public/archives/2017/08/index.html","hash":"bb6a399f9845ba5cc94564faff5911fd52418b7d","modified":1509763907537},{"_id":"public/archives/2017/10/index.html","hash":"ddb14c6a9efb846161454ed3aab982c238b40065","modified":1509763907537},{"_id":"public/categories/基础操作/index.html","hash":"6d23c82dc437d4c0d89e3c120c60229562413b2c","modified":1509763907537},{"_id":"public/categories/UnityScript/index.html","hash":"ca98e6b1d1562c354f4c7c18eb5137b667272adb","modified":1509763907537},{"_id":"public/categories/Unity/index.html","hash":"b8a81111b70ead66c5981ef15d29f192abe95c7d","modified":1509763907537},{"_id":"public/categories/UnityShader/index.html","hash":"f3c44ffe3d7f3824042f9743d371f12cd12db029","modified":1509763907537},{"_id":"public/index.html","hash":"cb117a2c0bf7ab3f5bac23bba009c13a53d05f22","modified":1509764126387},{"_id":"public/categories/UGUI/index.html","hash":"3df7217299149883aa58906e63c460b40a67717e","modified":1509763907537},{"_id":"public/page/2/index.html","hash":"759e8d53e3efca362b28d7e60b865d3edea02975","modified":1509763907537},{"_id":"public/page/3/index.html","hash":"309700384732e53e4edde98a64d88bf32c8d3be6","modified":1509763907537},{"_id":"public/tags/hexo/index.html","hash":"53f303f05dc35d55289e6940c782455af87f182f","modified":1509763907538},{"_id":"public/tags/git/index.html","hash":"6f8175cf6e2691a6d46c76721b5f1551527fd3db","modified":1509763907538},{"_id":"public/tags/github/index.html","hash":"ee5a9bff9a2ef92373d32c1f6b230b85cd463c2d","modified":1509763907538},{"_id":"public/tags/svn/index.html","hash":"50e2237da732dd5c9c654a06b9aa2bf90875afda","modified":1509763907538},{"_id":"public/tags/Android/index.html","hash":"b23e6a8e6dbfc1899df14bb5136ce5e2e46e2a9d","modified":1509763907538},{"_id":"public/tags/Unity/index.html","hash":"8ba3426c1bd4f310b4e9f05225a52ad6de22d091","modified":1509763907538},{"_id":"public/tags/Unity/page/2/index.html","hash":"ff77eb06053177155e3c71a92579b0d15719630b","modified":1509763907538},{"_id":"public/tags/坐标轴/index.html","hash":"6086f9c24f33c3464ef97ec5dac25f76f1e6a939","modified":1509763907538},{"_id":"public/tags/c/index.html","hash":"581235a273ad355507bb3883cb28a99033259fd4","modified":1509763907538},{"_id":"public/tags/画线/index.html","hash":"6ef927344d6b3d06619384658fc1e26447daf134","modified":1509763907538},{"_id":"public/tags/xml解析/index.html","hash":"ce5a2488543b715eb5d223d8a97050b66bd21e03","modified":1509763907538},{"_id":"public/tags/敏感词/index.html","hash":"6741b93428733f8536ca05483f1f1b453682f676","modified":1509763907538},{"_id":"public/tags/字典树/index.html","hash":"222d1149506c65fabe209050ad28a925034eb50b","modified":1509763907538},{"_id":"public/tags/Lua/index.html","hash":"4938e56a379789dde6edd97b2a023c2f0c1ab6b9","modified":1509763907538},{"_id":"public/tags/Shader/index.html","hash":"1edcec6beee9372ce93b01ec062785ce7b372f1b","modified":1509763907538},{"_id":"public/tags/Mesh/index.html","hash":"b4b1329b4be7433ed85b12aad178aa53d62d4c98","modified":1509763907538},{"_id":"public/tags/UGUI/index.html","hash":"f78fc0f52d161dcf45b3acd3563dd4b493aeee83","modified":1509763907538},{"_id":"public/tags/对齐/index.html","hash":"200d09f659a6d12e51ef22187292695bb441f3a9","modified":1509763907538},{"_id":"public/tags/A/index.html","hash":"4bcc1cf90a174875a47762f37fd28dedb98297c3","modified":1509763907539},{"_id":"public/tags/优化/index.html","hash":"bfd6ac92f6b3d1bfe311477b8cb9ee55b6623fc2","modified":1509763907538},{"_id":"public/tags/区域检测/index.html","hash":"bef4d48332d6173b1fe7e378afecdb1a0c2cad8c","modified":1509763907538},{"_id":"public/tags/扫雷/index.html","hash":"2107b149c922eab95291f5d82254fc07e223b1bf","modified":1509763907539},{"_id":"public/tags/无限列表/index.html","hash":"a4da3e80568fde794f74e9ba7245304a10080069","modified":1509763907539},{"_id":"public/tags/cd管理/index.html","hash":"eb261fc49c3b7756d60bef962f883dcc1a0ef522","modified":1509763907539},{"_id":"public/tags/Dropdown/index.html","hash":"3838a8b9d842edef5c1cc8b3d7e285111d75f393","modified":1509763907539},{"_id":"public/img/bg.png","hash":"a32f9717e19e821a4030ade551dc2917c889fcd8","modified":1509454525702},{"_id":"public/img/upyun_logo.svg","hash":"1f118b2b9c54f431d5e731ccf316ceefe605ba67","modified":1509454525702},{"_id":"public/img/sidebar_header.png","hash":"c47f4d39f421c0a950279d050ae82f9ae6dd19ff","modified":1509454525702},{"_id":"public/fonts/MaterialIcons-Regular.woff2","hash":"09963592e8c953cc7e14e3fb0a5b05d5042e8435","modified":1509454525702},{"_id":"public/fonts/MaterialIcons-Regular.woff","hash":"c6c953c2ccb2ca9abb21db8dbf473b5a435f0082","modified":1509454525702},{"_id":"public/img/footer/footer_ico-bilibili.svg","hash":"1a007ae30d69aa597f589edb4ee0638a9814c988","modified":1509454525702},{"_id":"public/img/footer/footer_ico-github.svg","hash":"5f1f9f53e6a87ad674108c6bd16e424a1e888c61","modified":1509454525702},{"_id":"public/img/footer/footer_ico-facebook.svg","hash":"74b3b3c6bd1d76b7eaaf75d36ac929b11a5a3e82","modified":1509454525702},{"_id":"public/img/footer/footer_ico-gplus.svg","hash":"b50274133ab263bcacdf729871d0446b615ac984","modified":1509454525702},{"_id":"public/img/footer/footer_ico-telegram.svg","hash":"413d66e40ca476deeb49364935d49d2f7839cdfd","modified":1509454525702},{"_id":"public/img/footer/footer_ico-linkedin.svg","hash":"9831c86352ec5ff283a3277d033120f86388c277","modified":1509454525702},{"_id":"public/img/footer/footer_ico-instagram.svg","hash":"294c511e62063ea49f61e23958ab27d643ba0228","modified":1509454525702},{"_id":"public/img/footer/footer_ico-twitter.svg","hash":"58df7777d6fcee8fa3c42453c091714bb3f97c95","modified":1509454525702},{"_id":"public/img/footer/footer_ico-v2ex.svg","hash":"c5ffaf67a97e534c266d1585a9a3b56f1bfe3052","modified":1509454525702},{"_id":"public/img/gallery/arrow.svg","hash":"144d73877e52acc5068bc0c9d1e69ef450e69f26","modified":1509454525702},{"_id":"public/img/footer/footer_ico-tumblr.svg","hash":"11daf4fa4220787306fc21a879429e98b7db8d03","modified":1509454525702},{"_id":"public/img/footer/footer_ico-zhihu.svg","hash":"d3f8da320fffefc5144822665dfe17d25af4061c","modified":1509454525702},{"_id":"public/img/footer/footer_ico-weibo.svg","hash":"26d0cdb77f0c4afd60111176167eacfa222bc4c1","modified":1509454525702},{"_id":"public/img/gallery/close.svg","hash":"2690088060811f01c9360df75be80070156ff176","modified":1509454525702},{"_id":"public/img/gallery/spinner.svg","hash":"fc9d1cd1118ac896d4f5326e110a653f3ea32b11","modified":1509454525702},{"_id":"public/img/random/material-10.png","hash":"363466a376e4df9e61acc904cd25f3c7ae1a7280","modified":1509454525702},{"_id":"public/img/random/material-12.png","hash":"d020b3d42542715c7ae95b3d8603fe3180bfe8f3","modified":1509454525702},{"_id":"public/img/random/material-17.png","hash":"ece82810e31f711576db598c845c3d97bd49fe67","modified":1509454525703},{"_id":"public/img/random/material-19.png","hash":"768ed1a4966e2e418cb00f6b36d2fc9058328eb3","modified":1509454525703},{"_id":"public/img/random/material-4.png","hash":"b475dfbf67a076a4e17a5527fd1973b1d4adac07","modified":1509454525703},{"_id":"public/img/random/material-3.png","hash":"848eaa70b9b0cd7a2204c78e8aa324d8f96bb097","modified":1509454525703},{"_id":"public/img/random/material-6.png","hash":"2f841e0c064fecb607ad1e149662a0c96d9e725d","modified":1509454525703},{"_id":"public/img/random/material-8.png","hash":"57db542d526ef6866cb34e261096e93a0e6f3a82","modified":1509454525703},{"_id":"public/img/random/material-9.png","hash":"840319c4d1f38fb8df79eb4669ed2e14d89fd680","modified":1509454525703},{"_id":"public/css/prism.css","hash":"bed3a85b4fb53bc89e65e42ec62b9ce3e907fc80","modified":1509454525703},{"_id":"public/css/prism-line-numbers.css","hash":"3e9c86e826e350927eeb299e53ac7daa3ce19ffc","modified":1509454525703},{"_id":"public/img/avatar.png","hash":"686fb40ecde42e86c693b12af8848a573a76f587","modified":1509454525708},{"_id":"public/img/favicon.png","hash":"686fb40ecde42e86c693b12af8848a573a76f587","modified":1509454525716},{"_id":"public/img/daily_pic.png","hash":"5e9a5f6a134889d0242e69061837f2032416d7ce","modified":1509454525724},{"_id":"public/img/logo.png","hash":"686fb40ecde42e86c693b12af8848a573a76f587","modified":1509454525724},{"_id":"public/fonts/MaterialIcons-Regular.ttf","hash":"fc05de31234e0090f7ddc28ce1b23af4026cb1da","modified":1509454525724},{"_id":"public/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1509454525724},{"_id":"public/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1509454525724},{"_id":"public/img/random/material-1.png","hash":"4839299eaa4db7272befa7b824e54b647fbbfc44","modified":1509454525724},{"_id":"public/img/random/material-11.png","hash":"ce20b0ad08a248c036115374f2edb7301ff60b72","modified":1509454525725},{"_id":"public/img/random/material-13.png","hash":"1a8378db3121b583485e2b939cb1aa0e0b14b0c8","modified":1509454525725},{"_id":"public/img/random/material-15.png","hash":"36b9937cf3810e4970902b78797ad29b0831f065","modified":1509454525725},{"_id":"public/img/random/material-14.png","hash":"b4f65b601960138c69f57171b0ddd55895483f45","modified":1509454525725},{"_id":"public/img/random/material-18.png","hash":"4b98204abe36ecd3f30678d2c22059130e0db328","modified":1509454525725},{"_id":"public/img/random/material-16.png","hash":"ade7f75200d3fb38326e3cf1e9f1a812fb12a43b","modified":1509454525725},{"_id":"public/img/random/material-2.png","hash":"faba2ce69c19d6c1dac392dd10b054e0061f6fb7","modified":1509454525725},{"_id":"public/img/random/material-5.png","hash":"5041ebd073a139c67f8ed271e74c967c7eb9c5be","modified":1509454525725},{"_id":"public/img/random/material-7.png","hash":"5c49ff3c064aaeb21227c2bd98b5ae422ddca84c","modified":1509454525725},{"_id":"public/css/duoshuo.min.css","hash":"89a30544b8b01d061da51c40f2af702a7969de5e","modified":1509454525735},{"_id":"public/css/duoshuo.css","hash":"32a02eaa01ff7b66fd9df307b0d33d52810096be","modified":1509454525735},{"_id":"public/css/ie-blocker.css","hash":"dddce7e6250a449291888ae7865697282a213b14","modified":1509454525735},{"_id":"public/css/prettify.css","hash":"c395f20ee64e80c2b6b15c7dade02f9aaaeab2c8","modified":1509454525735},{"_id":"public/css/prettify.min.css","hash":"62edd8f08656463b0e077dcf893faa3cc8eb5fe4","modified":1509454525735},{"_id":"public/css/uc.css","hash":"1e0977a2c9bdf721cc05654dfc025dd250655852","modified":1509454525736},{"_id":"public/css/disqus-proxy.min.css","hash":"3f8f99f71d361302288b0ba11fd36072564b08c2","modified":1509454525736},{"_id":"public/js/hanabi-browser-bundle.js","hash":"d646647bda386140c8315d60e3ff4ddbdb15c1ea","modified":1509454525736},{"_id":"public/js/ie-blocker.en.js","hash":"96ca8e677a12048d099319ebdf01983ddc6ca80c","modified":1509454525736},{"_id":"public/js/ie-blocker.zhCN.js","hash":"0ed49b0ec1d1924b128fbd97fca2cf7af7856fdf","modified":1509454525736},{"_id":"public/js/lsloader.js","hash":"2b14e57784fb6b5f58d71584189c61af45f393e8","modified":1509454525736},{"_id":"public/js/lazyload.min.js","hash":"5348fd7aa4dbefac9d21091c9fd5e263563b5540","modified":1509454525736},{"_id":"public/js/nprogress.js","hash":"a3058d4b6afb5d7a14e5afcbb88f778de35864f0","modified":1509454525736},{"_id":"public/js/prettify.min.js","hash":"69908fe0a09cee107c25cb5d769b861723e7b7bb","modified":1509454525736},{"_id":"public/js/lsloader.min.js","hash":"1a68a8d267948ea8475245b7d365a1a1bd8f732e","modified":1509454525736},{"_id":"public/js/queue.min.js","hash":"21aab782ca33efbb1386cc960b6be0a02106760d","modified":1509454525736},{"_id":"public/js/smoothscroll.js","hash":"df56a1c84191a62750ae820943377b6775fca0e2","modified":1509454525736},{"_id":"public/js/queue.js","hash":"dd252616b568b71c222d9cfc859bfe52738e576a","modified":1509454525736},{"_id":"public/css/prettify/atelier-cave-dark.min.css","hash":"cb0156cdc36500a26b232ae1c81fdc880eba85e7","modified":1509454525736},{"_id":"public/css/prettify/atelier-cave-light.min.css","hash":"4b62dc45aa351b071d6a434dc54fe8c2e15c85cc","modified":1509454525736},{"_id":"public/css/prettify/atelier-dune-light.min.css","hash":"b3ad98483e4d5bde72d52a15423d98e0d086db09","modified":1509454525736},{"_id":"public/css/prettify/atelier-estuary-light.min.css","hash":"1d12d8f7fa9c122a186ee76fdf681c191a68f104","modified":1509454525736},{"_id":"public/css/prettify/atelier-estuary-dark.min.css","hash":"7e3a065cafeb3acc1d7178f64ef4265f5d5ad2b9","modified":1509454525736},{"_id":"public/css/prettify/atelier-forest-dark.min.css","hash":"9296b851a5b66785a60afa5da5fe9080bda96bf5","modified":1509454525736},{"_id":"public/css/prettify/atelier-dune-dark.min.css","hash":"c5094d99ca0e619d97860c88211bf908fdf830b1","modified":1509454525736},{"_id":"public/css/prettify/atelier-heath-light.min.css","hash":"a67199fa580b3aa2df031e5d2028929d29ca3b45","modified":1509454525736},{"_id":"public/css/prettify/atelier-heath-dark.min.css","hash":"954309acd7918422382a3ff2f9c2988aec0ff956","modified":1509454525736},{"_id":"public/css/prettify/atelier-lakeside-light.min.css","hash":"e20e8ac64432fa1aa6f74792b58196af7cf79c12","modified":1509454525736},{"_id":"public/css/prettify/atelier-lakeside-dark.min.css","hash":"18575fc6dff855e395a39d0383d2f18807091f0d","modified":1509454525736},{"_id":"public/css/prettify/atelier-plateau-dark.min.css","hash":"137e3c499a720da3c1d57b4dc53264b1d623e1c5","modified":1509454525736},{"_id":"public/css/prettify/atelier-plateau-light.min.css","hash":"153801640fdcbb74c0de3f15345110f2210eb991","modified":1509454525736},{"_id":"public/css/prettify/atelier-savanna-dark.min.css","hash":"fba92c652fd6704422b8f2bbc11706805a6faed0","modified":1509454525736},{"_id":"public/css/prettify/atelier-savanna-light.min.css","hash":"d9425ffb7c60d646190c22b9a5f72091ee5f9ace","modified":1509454525736},{"_id":"public/css/prettify/atelier-forest-light.min.css","hash":"3532f6e86bf4afbba05f7a074b791b73174f9622","modified":1509454525736},{"_id":"public/css/prettify/atelier-seaside-dark.min.css","hash":"e0e6bbacc75a349b1e49c236d374b0e42f1fd485","modified":1509454525737},{"_id":"public/css/prettify/atelier-seaside-light.min.css","hash":"732750b75389c1c49204f37705e6abeee40ce64f","modified":1509454525737},{"_id":"public/css/prettify/atelier-sulphurpool-dark.min.css","hash":"015a35dddaee153fa8bb71d7f3818a6ba4d120d8","modified":1509454525737},{"_id":"public/css/prettify/atelier-sulphurpool-light.min.css","hash":"ab1a6200eab648cab443c3df77fde9b237ef27b6","modified":1509454525737},{"_id":"public/css/prettify/github-v2.min.css","hash":"57630621d20842a529bdea7b17fc90f520e562ef","modified":1509454525737},{"_id":"public/css/prettify/hemisu-dark.min.css","hash":"a671248cfd573292026d2174817e82e593691052","modified":1509454525737},{"_id":"public/css/prettify/hemisu-light.min.css","hash":"b2556ff41e513fd13d032ec84a37ee260a905815","modified":1509454525737},{"_id":"public/css/prettify/tomorrow-night-blue.min.css","hash":"c442728d96485bcf816151fe6bd96993aae09852","modified":1509454525737},{"_id":"public/css/prettify/tomorrow-night-bright.min.css","hash":"cf251fd3edfd736695272a0f1b41d509b7bb1fb9","modified":1509454525737},{"_id":"public/css/prettify/github.min.css","hash":"19cf828225288fa5c006f1d8f66c39d11f4ef7f2","modified":1509454525737},{"_id":"public/css/prettify/tomorrow-night-eighties.min.css","hash":"6ce259d674bb4edda23eea32b2379be17d0e0e6e","modified":1509454525737},{"_id":"public/css/prettify/tomorrow-night.min.css","hash":"d989206d124035494acb4b0cdc7fbc89f3b7d108","modified":1509454525737},{"_id":"public/css/prettify/tranquil-heart.min.css","hash":"0f6eefbdda8e410832e9c516a5dd19899217ef06","modified":1509454525737},{"_id":"public/css/prettify/vibrant-ink.min.css","hash":"c265bac6c31cf622b536b29c8a6bc46955d6fe63","modified":1509454525737},{"_id":"public/css/prettify/tomorrow.min.css","hash":"b2c6d610b77f0273fefab5aa4ad26a7f58956f87","modified":1509454525737},{"_id":"public/css/disqus-proxy.css","hash":"d5086cda8aaae20b8d3f9dd50f0be5ccb717e42a","modified":1509454525737},{"_id":"public/css/gallery.min.css","hash":"c5333ca835aae49239d809130a7b281af745729e","modified":1509454525737},{"_id":"public/css/fontawesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1509454525737},{"_id":"public/js/Valine.min.js","hash":"6a287a99a772a0ea8f98b133523429c9250cc67f","modified":1509454525737},{"_id":"public/js/MathJax.js","hash":"a21703b5848325a902c9b39bbf3ca6490d3e1b1b","modified":1509454525737},{"_id":"public/css/material.min.css","hash":"1a19febb9214ab689b02f5bb8ccb23579e6c1181","modified":1509454525737},{"_id":"public/css/style.min.css","hash":"a9e9b33e1fcf818f08a04b909c86f2460a05f060","modified":1509454525737},{"_id":"public/css/material.css","hash":"068e2b00f686157b6e8b78b9b808112adbedf4de","modified":1509454525737},{"_id":"public/css/style.css","hash":"a2f27c40f412dc24e1ed5f62a4117523a226eed0","modified":1509454525737},{"_id":"public/js/jquery.min.js","hash":"00073d6597d2760b81387274a9ec56b9d5cb1552","modified":1509454525737},{"_id":"public/js/js.min.js","hash":"709d347d3be033b841de0493b7cf532b594bb1f6","modified":1509454525737},{"_id":"public/js/js.js","hash":"64b3f20e7138674ecf21e6e3982565ea63feae26","modified":1509454525737},{"_id":"public/js/gallery/gallery.js","hash":"8ee48312a183b42a9886211a0ec825ea0d041301","modified":1509454525737},{"_id":"public/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1509454525737},{"_id":"public/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1509454525737},{"_id":"public/fonts/MaterialIcons-Regular.eot","hash":"26fb8cecb5512223277b4d290a24492a0f09ede1","modified":1509454525737},{"_id":"public/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1509454525737},{"_id":"public/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1509454525773},{"_id":"public/fonts/Roboto-Bold.ttf","hash":"d1864343b543978bd491d40c80010cea50c1b7bf","modified":1509454525786},{"_id":"public/fonts/Roboto-Black.ttf","hash":"0244e6497a51fb8a38ca7e6fe297b066e2e09af5","modified":1509454525786},{"_id":"public/fonts/Roboto-Light.ttf","hash":"b9ea2eaf26ff8fdcb5aee3e0c2c7a6084ebb6aac","modified":1509454525786},{"_id":"public/fonts/Roboto-Regular.ttf","hash":"06691e103d4d3ce1f1108d9b7d21254b714a41f8","modified":1509454525787},{"_id":"public/fonts/Roboto-Medium.ttf","hash":"3965419aab480c184f66bc5e39c1719a373a4ef6","modified":1509454525787},{"_id":"public/fonts/Roboto-Thin.ttf","hash":"ed5101c3a800f35e925603a406e0c2dc5278b96c","modified":1509454525787},{"_id":"source/_posts/UI自动布局.md","hash":"3bdf261343a71a98c650b1d7b0a68e1552b2c28f","modified":1509764010819},{"_id":"public/2017/11/04/UI自动布局/index.html","hash":"6df7467f913e693ffdb1850596075ae9fa7ce9ba","modified":1509764126385},{"_id":"public/archives/2017/11/index.html","hash":"25fab6b326136c7791bd87928b88642a8bf74e19","modified":1509763907541},{"_id":"public/tags/Layout/index.html","hash":"718dd34b6fc8187eba041fb98b658e337a8cbaa4","modified":1509763907541}],"Category":[{"name":"基础操作","_id":"cj9fm90sp00022cobfyleyupy"},{"name":"UnityScript","_id":"cj9fm90td000g2cobtvm5jce6"},{"name":"Unity","_id":"cj9fm90u600142cob797we2dj"},{"name":"UnityShader","_id":"cj9fm90ua001d2cobv8hxxoo8"},{"name":"UGUI","_id":"cj9fm90ui001x2coblc1yomx3"}],"Data":[{"_id":"gallery","data":{"美女":{"full_link":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1508912200438&di=d5b3eacf86d8f94c149c6fc68fe4da67&imgtype=0&src=http%3A%2F%2Fpic01.taopic.com%2F151014%2F234732-15101410452229-lp.jpg","thumb_link":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1508912200438&di=d5b3eacf86d8f94c149c6fc68fe4da67&imgtype=0&src=http%3A%2F%2Fpic01.taopic.com%2F151014%2F234732-15101410452229-lp.jpg","descr":"美女插画"}}},{"_id":"links","data":{"Github":{"link":"https://github.com/garsonlab","avatar":"https://avatars3.githubusercontent.com/u/13958934?s=460&v=4","descr":"My Github","type":"Blog"},"OnLineTools":{"link":"http://tool.lu/","avatar":"http://qn11.tool.lu/201710/15/103320SbM84Ql4tETjg49a_28x28.png","descr":"在线工具","type":"Tools"},"CMDMarkdown":{"link":"https://www.zybuluo.com/","avatar":"https://www.zybuluo.com/static/img/logo.png","descr":"Markdown在线编辑","type":"Tools"},"Hexo文档":{"link":"https://hexo.io/zh-cn/docs/","avatar":"https://hexo.io/logo.svg","descr":"Hexo中文官方文档","type":"Community"},"游戏蛮牛":{"link":"http://www.manew.com/forum.php","avatar":"http://www.manew.com/template/manew2016/images/logo.png","descr":"unity交流社区","type":"Unity"},"FairyGUI":{"link":"http://www.fairygui.com/","avatar":"http://www.fairygui.com/images/20170728151207.png","descr":"FairyGUI官方网站","type":"Site"}}},{"_id":"linktypes","data":{"Blog":{"name":"关注的博客"},"Unity":{"name":"Unity3D"},"Community":{"name":"浏览的社区"},"Tools":{"name":"工具"},"Site":{"name":"收藏的网址"}}}],"Page":[{"title":"links","date":"2017-10-25T03:24:22.642Z","layout":"links","_content":"","source":"links/index.md","raw":"---\ntitle: links\ndate:\nlayout: links\n---","updated":"2017-10-25T03:24:22.642Z","path":"links/index.html","comments":1,"_id":"cj9fm90va00442cobv965gto1","content":"","site":{"data":{"gallery":{"美女":{"full_link":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1508912200438&di=d5b3eacf86d8f94c149c6fc68fe4da67&imgtype=0&src=http%3A%2F%2Fpic01.taopic.com%2F151014%2F234732-15101410452229-lp.jpg","thumb_link":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1508912200438&di=d5b3eacf86d8f94c149c6fc68fe4da67&imgtype=0&src=http%3A%2F%2Fpic01.taopic.com%2F151014%2F234732-15101410452229-lp.jpg","descr":"美女插画"}},"links":{"Github":{"link":"https://github.com/garsonlab","avatar":"https://avatars3.githubusercontent.com/u/13958934?s=460&v=4","descr":"My Github","type":"Blog"},"OnLineTools":{"link":"http://tool.lu/","avatar":"http://qn11.tool.lu/201710/15/103320SbM84Ql4tETjg49a_28x28.png","descr":"在线工具","type":"Tools"},"CMDMarkdown":{"link":"https://www.zybuluo.com/","avatar":"https://www.zybuluo.com/static/img/logo.png","descr":"Markdown在线编辑","type":"Tools"},"Hexo文档":{"link":"https://hexo.io/zh-cn/docs/","avatar":"https://hexo.io/logo.svg","descr":"Hexo中文官方文档","type":"Community"},"游戏蛮牛":{"link":"http://www.manew.com/forum.php","avatar":"http://www.manew.com/template/manew2016/images/logo.png","descr":"unity交流社区","type":"Unity"},"FairyGUI":{"link":"http://www.fairygui.com/","avatar":"http://www.fairygui.com/images/20170728151207.png","descr":"FairyGUI官方网站","type":"Site"}},"linktypes":{"Blog":{"name":"关注的博客"},"Unity":{"name":"Unity3D"},"Community":{"name":"浏览的社区"},"Tools":{"name":"工具"},"Site":{"name":"收藏的网址"}}}},"excerpt":"","more":""},{"title":"关于主页君","type":"about","notag":true,"toc":false,"comment":false,"_content":"\n### 关于主页君\n  主页君，名Garson，狮子座游戏程序猿\n  宅，目测懒癌中期，尚有外出行动能力\n  喜新不厌旧，尤其表现在对女朋友上\n  爱探索，广涉略，!(~(not(大神)))\n  尚自由，But一直被毛爷爷约束T_T\n### 个人信息\n  **BirthDay:** 0x1301e00\n  **Email:** jiacheng_liu@yeah.net\n  **QQ:** 0x204ea5ad\n  **WeChat:** cheng624\n### 个人经验\n  暂不公布\n### 经常使用\n  ！[没事会看看的东西](https://garsonlab.github.io/links/)\n","source":"about/index.md","raw":"---\ntitle: \"关于主页君\"\ntype: \"about\"\nnotag: true\ntoc: false\ncomment: false\n---\n\n### 关于主页君\n  主页君，名Garson，狮子座游戏程序猿\n  宅，目测懒癌中期，尚有外出行动能力\n  喜新不厌旧，尤其表现在对女朋友上\n  爱探索，广涉略，!(~(not(大神)))\n  尚自由，But一直被毛爷爷约束T_T\n### 个人信息\n  **BirthDay:** 0x1301e00\n  **Email:** jiacheng_liu@yeah.net\n  **QQ:** 0x204ea5ad\n  **WeChat:** cheng624\n### 个人经验\n  暂不公布\n### 经常使用\n  ！[没事会看看的东西](https://garsonlab.github.io/links/)\n","date":"2017-10-25T12:57:57.522Z","updated":"2017-10-25T12:57:57.522Z","path":"about/index.html","comments":1,"layout":"page","_id":"cj9fm90vb00452cob9cnbdq7z","content":"<h3 id=\"关于主页君\"><a href=\"#关于主页君\" class=\"headerlink\" title=\"关于主页君\"></a>关于主页君</h3><p>  主页君，名Garson，狮子座游戏程序猿<br>  宅，目测懒癌中期，尚有外出行动能力<br>  喜新不厌旧，尤其表现在对女朋友上<br>  爱探索，广涉略，!(~(not(大神)))<br>  尚自由，But一直被毛爷爷约束T_T</p>\n<h3 id=\"个人信息\"><a href=\"#个人信息\" class=\"headerlink\" title=\"个人信息\"></a>个人信息</h3><p>  <strong>BirthDay:</strong> 0x1301e00<br>  <strong>Email:</strong> jiacheng_liu@yeah.net<br>  <strong>QQ:</strong> 0x204ea5ad<br>  <strong>WeChat:</strong> cheng624</p>\n<h3 id=\"个人经验\"><a href=\"#个人经验\" class=\"headerlink\" title=\"个人经验\"></a>个人经验</h3><p>  暂不公布</p>\n<h3 id=\"经常使用\"><a href=\"#经常使用\" class=\"headerlink\" title=\"经常使用\"></a>经常使用</h3><p>  ！<a href=\"https://garsonlab.github.io/links/\" target=\"_blank\" rel=\"external\">没事会看看的东西</a></p>\n","site":{"data":{"gallery":{"美女":{"full_link":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1508912200438&di=d5b3eacf86d8f94c149c6fc68fe4da67&imgtype=0&src=http%3A%2F%2Fpic01.taopic.com%2F151014%2F234732-15101410452229-lp.jpg","thumb_link":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1508912200438&di=d5b3eacf86d8f94c149c6fc68fe4da67&imgtype=0&src=http%3A%2F%2Fpic01.taopic.com%2F151014%2F234732-15101410452229-lp.jpg","descr":"美女插画"}},"links":{"Github":{"link":"https://github.com/garsonlab","avatar":"https://avatars3.githubusercontent.com/u/13958934?s=460&v=4","descr":"My Github","type":"Blog"},"OnLineTools":{"link":"http://tool.lu/","avatar":"http://qn11.tool.lu/201710/15/103320SbM84Ql4tETjg49a_28x28.png","descr":"在线工具","type":"Tools"},"CMDMarkdown":{"link":"https://www.zybuluo.com/","avatar":"https://www.zybuluo.com/static/img/logo.png","descr":"Markdown在线编辑","type":"Tools"},"Hexo文档":{"link":"https://hexo.io/zh-cn/docs/","avatar":"https://hexo.io/logo.svg","descr":"Hexo中文官方文档","type":"Community"},"游戏蛮牛":{"link":"http://www.manew.com/forum.php","avatar":"http://www.manew.com/template/manew2016/images/logo.png","descr":"unity交流社区","type":"Unity"},"FairyGUI":{"link":"http://www.fairygui.com/","avatar":"http://www.fairygui.com/images/20170728151207.png","descr":"FairyGUI官方网站","type":"Site"}},"linktypes":{"Blog":{"name":"关注的博客"},"Unity":{"name":"Unity3D"},"Community":{"name":"浏览的社区"},"Tools":{"name":"工具"},"Site":{"name":"收藏的网址"}}}},"excerpt":"","more":"<h3 id=\"关于主页君\"><a href=\"#关于主页君\" class=\"headerlink\" title=\"关于主页君\"></a>关于主页君</h3><p>  主页君，名Garson，狮子座游戏程序猿<br>  宅，目测懒癌中期，尚有外出行动能力<br>  喜新不厌旧，尤其表现在对女朋友上<br>  爱探索，广涉略，!(~(not(大神)))<br>  尚自由，But一直被毛爷爷约束T_T</p>\n<h3 id=\"个人信息\"><a href=\"#个人信息\" class=\"headerlink\" title=\"个人信息\"></a>个人信息</h3><p>  <strong>BirthDay:</strong> 0x1301e00<br>  <strong>Email:</strong> jiacheng_liu@yeah.net<br>  <strong>QQ:</strong> 0x204ea5ad<br>  <strong>WeChat:</strong> cheng624</p>\n<h3 id=\"个人经验\"><a href=\"#个人经验\" class=\"headerlink\" title=\"个人经验\"></a>个人经验</h3><p>  暂不公布</p>\n<h3 id=\"经常使用\"><a href=\"#经常使用\" class=\"headerlink\" title=\"经常使用\"></a>经常使用</h3><p>  ！<a href=\"https://garsonlab.github.io/links/\" target=\"_blank\" rel=\"external\">没事会看看的东西</a></p>\n"},{"title":"gallery","date":"2017-10-25T03:27:15.653Z","layout":"gallery","_content":"","source":"gallery/index.md","raw":"---\ntitle: gallery\ndate:\nlayout: gallery\n---","updated":"2017-10-25T03:27:15.653Z","path":"gallery/index.html","comments":1,"_id":"cj9fm90vc00462cob0jabfr45","content":"","site":{"data":{"gallery":{"美女":{"full_link":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1508912200438&di=d5b3eacf86d8f94c149c6fc68fe4da67&imgtype=0&src=http%3A%2F%2Fpic01.taopic.com%2F151014%2F234732-15101410452229-lp.jpg","thumb_link":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1508912200438&di=d5b3eacf86d8f94c149c6fc68fe4da67&imgtype=0&src=http%3A%2F%2Fpic01.taopic.com%2F151014%2F234732-15101410452229-lp.jpg","descr":"美女插画"}},"links":{"Github":{"link":"https://github.com/garsonlab","avatar":"https://avatars3.githubusercontent.com/u/13958934?s=460&v=4","descr":"My Github","type":"Blog"},"OnLineTools":{"link":"http://tool.lu/","avatar":"http://qn11.tool.lu/201710/15/103320SbM84Ql4tETjg49a_28x28.png","descr":"在线工具","type":"Tools"},"CMDMarkdown":{"link":"https://www.zybuluo.com/","avatar":"https://www.zybuluo.com/static/img/logo.png","descr":"Markdown在线编辑","type":"Tools"},"Hexo文档":{"link":"https://hexo.io/zh-cn/docs/","avatar":"https://hexo.io/logo.svg","descr":"Hexo中文官方文档","type":"Community"},"游戏蛮牛":{"link":"http://www.manew.com/forum.php","avatar":"http://www.manew.com/template/manew2016/images/logo.png","descr":"unity交流社区","type":"Unity"},"FairyGUI":{"link":"http://www.fairygui.com/","avatar":"http://www.fairygui.com/images/20170728151207.png","descr":"FairyGUI官方网站","type":"Site"}},"linktypes":{"Blog":{"name":"关注的博客"},"Unity":{"name":"Unity3D"},"Community":{"name":"浏览的社区"},"Tools":{"name":"工具"},"Site":{"name":"收藏的网址"}}}},"excerpt":"","more":""},{"title":"tags","date":"2017-10-25T03:30:36.079Z","layout":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate:\nlayout: tags\n---","updated":"2017-10-25T03:30:36.079Z","path":"tags/index.html","comments":1,"_id":"cj9fm90vc00472coby66agsez","content":"","site":{"data":{"gallery":{"美女":{"full_link":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1508912200438&di=d5b3eacf86d8f94c149c6fc68fe4da67&imgtype=0&src=http%3A%2F%2Fpic01.taopic.com%2F151014%2F234732-15101410452229-lp.jpg","thumb_link":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1508912200438&di=d5b3eacf86d8f94c149c6fc68fe4da67&imgtype=0&src=http%3A%2F%2Fpic01.taopic.com%2F151014%2F234732-15101410452229-lp.jpg","descr":"美女插画"}},"links":{"Github":{"link":"https://github.com/garsonlab","avatar":"https://avatars3.githubusercontent.com/u/13958934?s=460&v=4","descr":"My Github","type":"Blog"},"OnLineTools":{"link":"http://tool.lu/","avatar":"http://qn11.tool.lu/201710/15/103320SbM84Ql4tETjg49a_28x28.png","descr":"在线工具","type":"Tools"},"CMDMarkdown":{"link":"https://www.zybuluo.com/","avatar":"https://www.zybuluo.com/static/img/logo.png","descr":"Markdown在线编辑","type":"Tools"},"Hexo文档":{"link":"https://hexo.io/zh-cn/docs/","avatar":"https://hexo.io/logo.svg","descr":"Hexo中文官方文档","type":"Community"},"游戏蛮牛":{"link":"http://www.manew.com/forum.php","avatar":"http://www.manew.com/template/manew2016/images/logo.png","descr":"unity交流社区","type":"Unity"},"FairyGUI":{"link":"http://www.fairygui.com/","avatar":"http://www.fairygui.com/images/20170728151207.png","descr":"FairyGUI官方网站","type":"Site"}},"linktypes":{"Blog":{"name":"关注的博客"},"Unity":{"name":"Unity3D"},"Community":{"name":"浏览的社区"},"Tools":{"name":"工具"},"Site":{"name":"收藏的网址"}}}},"excerpt":"","more":""},{"title":"timeline","date":"2017-10-25T03:31:04.712Z","layout":"timeline","_content":"","source":"timeline/index.md","raw":"---\ntitle: timeline\ndate:\nlayout: timeline\n---","updated":"2017-10-25T03:31:04.712Z","path":"timeline/index.html","comments":1,"_id":"cj9fm90vc00482cobuoc6lhxc","content":"","site":{"data":{"gallery":{"美女":{"full_link":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1508912200438&di=d5b3eacf86d8f94c149c6fc68fe4da67&imgtype=0&src=http%3A%2F%2Fpic01.taopic.com%2F151014%2F234732-15101410452229-lp.jpg","thumb_link":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1508912200438&di=d5b3eacf86d8f94c149c6fc68fe4da67&imgtype=0&src=http%3A%2F%2Fpic01.taopic.com%2F151014%2F234732-15101410452229-lp.jpg","descr":"美女插画"}},"links":{"Github":{"link":"https://github.com/garsonlab","avatar":"https://avatars3.githubusercontent.com/u/13958934?s=460&v=4","descr":"My Github","type":"Blog"},"OnLineTools":{"link":"http://tool.lu/","avatar":"http://qn11.tool.lu/201710/15/103320SbM84Ql4tETjg49a_28x28.png","descr":"在线工具","type":"Tools"},"CMDMarkdown":{"link":"https://www.zybuluo.com/","avatar":"https://www.zybuluo.com/static/img/logo.png","descr":"Markdown在线编辑","type":"Tools"},"Hexo文档":{"link":"https://hexo.io/zh-cn/docs/","avatar":"https://hexo.io/logo.svg","descr":"Hexo中文官方文档","type":"Community"},"游戏蛮牛":{"link":"http://www.manew.com/forum.php","avatar":"http://www.manew.com/template/manew2016/images/logo.png","descr":"unity交流社区","type":"Unity"},"FairyGUI":{"link":"http://www.fairygui.com/","avatar":"http://www.fairygui.com/images/20170728151207.png","descr":"FairyGUI官方网站","type":"Site"}},"linktypes":{"Blog":{"name":"关注的博客"},"Unity":{"name":"Unity3D"},"Community":{"name":"浏览的社区"},"Tools":{"name":"工具"},"Site":{"name":"收藏的网址"}}}},"excerpt":"","more":""}],"Post":[{"title":"Hexo搭建博客","date":"2017-10-19T16:00:00.000Z","_content":"\n### 原博客搬迁\n原本一直使用[CSDN的博客](http://blog.csdn.net/cheng624)记录一些自己的东西，但是前段时间登录发现一直需要我真实身份验证，抱着支持国家政策的态度我屈服了... 但是最近，后来为什么又出来一个必须扫描公众号二维码关注再完成手机验证。只想说你推广也就算了为毛还要强制！表示不服！\n为了专治“不服”，我决定使用万能Github自行搭建博客，考虑了 [Jekyll](http://jekyll.com.cn/)，看了比人的一堆分析以后最终选择了 [Hexo](https://hexo.io/zh-cn/docs/index.html)，由于我的web前端只停留在html+css阶段故表示不懂他们底下的大区别，但是使用了以后只觉得 hexo很麻烦... 因为jekyll是github自动生成pages，hexo需要自己genegrate+deploy，我不知道这是不是代表我每次上传都必须有nodejs的环境，也不知道jekyll是不是这样...\n\n最终，我还是选择了hexo，因为我看用到了 [Material](https://github.com/viosey/hexo-theme-material/) 的模板0.0\n\n### 安装hexo\n安装步骤很简单，一路文档操作：[连接](https://hexo.io/zh-cn/docs/index.html)\n安装 Hexo 相当简单。然而在安装前，您必须检查电脑中是否已安装下列应用程序：\n\n\tNode.js\n\tGit\n如果您的电脑中已经安装上述必备程序，那么恭喜您！接下来只需要使用 npm 即可完成 Hexo 的安装。\n``` bash\n$ npm install -g hexo-cli\n```\n\n### 使用Material主题\n\n#### 建立一个空的站点\n选择一个心仪的文件夹，在此次cmd\n``` bash\n$ hexo init MyBlog #MyBlog是我要放置博客文件的文件夹\n$ cd MyBlog\n$ npm install\n```\n\n完成以后对应的目录\n\n\t.\n\t├── _config.yml\n\t├── package.json\n\t├── scaffolds\n\t├── source\n\t|   ├── _drafts\n\t|   └── _posts\n\t└── themes\n\n安装完成，在themes文件夹中已存在一个模板，由于它不是我们需要的模板，so把里面的文件删除干净，然后在里面用git或者直接down一份[Material](https://github.com/viosey/hexo-theme-material/) 的代码。解压完成。\n\n#### 修改基本配置\n先修改主文件夹的 *_config.yml* 文件，具体含义[参考配置](https://hexo.io/zh-cn/docs/configuration.html)， 主要的是修改\n\n\tlanguage: zh-CN\n\n把语言设置成中文\n``` bash\n# Extensions\n## Plugins: https://hexo.io/plugins/\n## Themes: https://hexo.io/themes/\ntheme: material\n```\n主题设置成material\n\n\n打开material文件夹\n复制一份 *_config.template.yml* 命名成 *_config.yml* \n里面的具体参数修改参考[这里](https://material.viosey.com/docs/#/config_basic)\n\n照做基本都能成\n\n#### 添加本地搜索\n\n使用本地搜索需要安装 [hexo-generator-search](https://github.com/PaicHyperionDev/hexo-generator-search) 插件。\n在修改的 *_config.yml* 中\n把 search: use 的值为 google 改为 local 即可。\n然后在原 *_config.yml* 中添加\n``` bash\nsearch:\n    path: search.xml\n    field: all\n```\n\n#### 添加标签云、照片墙、时间线\n\n[参考这里](https://material.viosey.com/docs/#/pages)\n\n唯一需要说的就是需要在修改的 *_config.yml* 中仿照about界面添加对应标签\n\n\t# Sidebar Customize\n\tsidebar:\n\t\tpages:\n\t\t\ttags: #make sure the value corresponds to another one in language file\n\t            link: \"/tags\"\n\t            icon: label\n\t            divider: false\n\t        gallery:\n\t            link: \"/gallery\"\n\t            icon: photo\n\t            divider: false\n\t        about:\n\t            link: \"/about\"\n\t            icon: person\n\t            divider: false\n\t        timeline:\n\t            link: \"/timeline\"\n\t            icon: timeline\n\t            divider: false\n\t        links:\n\t            link: \"/links\"\n\t            icon: link\n\t            divider: false\n修改多语言文件 *zh_CN.yaml*\nsidebar:\n    homepage: \"主页\"\n    archive: \"归档\"\n    article_num: \"文章总数\"\n    about: \"关于我\" \n    gallery: \"图库\"\n    links: \"友情链接\"\n    tags: \"标签云\" #this object name is mentioned above\n    timeline: \"时间轴\"\n\n\n#### 其他微调\n按照配置与自己心意随意更改，只要你喜欢，改代码也是可以的\n\n\n### 遇坑\n#### 自定义Pages的多语言\n我们添加了添加标签云、照片墙、时间线，同时，在zh_CN.yaml中配置了对应的中文，但是就是不显示\n可修改代码 *layout/_partial/sidebar-navigation.ejs* 中的这一段\n``` html\n<% if(theme.sidebar.pages[i].icon){ %>\n\t<i class=\"material-icons sidebar-material-icons\"><%= theme.sidebar.pages[i].icon %></i>\n<% } %>\n<%= i %>\n</a>\n</li>\n<% if(theme.sidebar.pages[i].divider === true) { %>\n\n\n把 <%= i %> 替换成 <%= __('sidebar.' + i) %> \n```\n\n同理，主界面有一个分页导航也是如此。\n\n#### 同步到github时Error\n同步到github后，随后收到github的邮件， 说 You are attempting to use a Jekyll theme, \"material\", which is not supported by GitHub Pages.\n\n这是由于hexo的深坑必须得自己手动发布才有效。\n安装 deployer 可解决\n\n具体方法是 [https://hexo.io/zh-cn/docs/deployment.html](https://hexo.io/zh-cn/docs/deployment.html)\n\n#### 其他问题\n1，关注主题的[Issue](https://github.com/viosey/hexo-theme-material/issues)\n2，博客[hexo 博客的神坑及本质原因](https://liguanghe.github.io/2017/05/22/blogRebuilt/)\n3，度娘\n4，谷歌\n5，自行分析\n\n\n","source":"_posts/Hexo搭建博客.md","raw":"---\ntitle: Hexo搭建博客\ndate: 2017-10-20\ntags:\n- hexo\n- git\n- github\ncategories: 基础操作\n---\n\n### 原博客搬迁\n原本一直使用[CSDN的博客](http://blog.csdn.net/cheng624)记录一些自己的东西，但是前段时间登录发现一直需要我真实身份验证，抱着支持国家政策的态度我屈服了... 但是最近，后来为什么又出来一个必须扫描公众号二维码关注再完成手机验证。只想说你推广也就算了为毛还要强制！表示不服！\n为了专治“不服”，我决定使用万能Github自行搭建博客，考虑了 [Jekyll](http://jekyll.com.cn/)，看了比人的一堆分析以后最终选择了 [Hexo](https://hexo.io/zh-cn/docs/index.html)，由于我的web前端只停留在html+css阶段故表示不懂他们底下的大区别，但是使用了以后只觉得 hexo很麻烦... 因为jekyll是github自动生成pages，hexo需要自己genegrate+deploy，我不知道这是不是代表我每次上传都必须有nodejs的环境，也不知道jekyll是不是这样...\n\n最终，我还是选择了hexo，因为我看用到了 [Material](https://github.com/viosey/hexo-theme-material/) 的模板0.0\n\n### 安装hexo\n安装步骤很简单，一路文档操作：[连接](https://hexo.io/zh-cn/docs/index.html)\n安装 Hexo 相当简单。然而在安装前，您必须检查电脑中是否已安装下列应用程序：\n\n\tNode.js\n\tGit\n如果您的电脑中已经安装上述必备程序，那么恭喜您！接下来只需要使用 npm 即可完成 Hexo 的安装。\n``` bash\n$ npm install -g hexo-cli\n```\n\n### 使用Material主题\n\n#### 建立一个空的站点\n选择一个心仪的文件夹，在此次cmd\n``` bash\n$ hexo init MyBlog #MyBlog是我要放置博客文件的文件夹\n$ cd MyBlog\n$ npm install\n```\n\n完成以后对应的目录\n\n\t.\n\t├── _config.yml\n\t├── package.json\n\t├── scaffolds\n\t├── source\n\t|   ├── _drafts\n\t|   └── _posts\n\t└── themes\n\n安装完成，在themes文件夹中已存在一个模板，由于它不是我们需要的模板，so把里面的文件删除干净，然后在里面用git或者直接down一份[Material](https://github.com/viosey/hexo-theme-material/) 的代码。解压完成。\n\n#### 修改基本配置\n先修改主文件夹的 *_config.yml* 文件，具体含义[参考配置](https://hexo.io/zh-cn/docs/configuration.html)， 主要的是修改\n\n\tlanguage: zh-CN\n\n把语言设置成中文\n``` bash\n# Extensions\n## Plugins: https://hexo.io/plugins/\n## Themes: https://hexo.io/themes/\ntheme: material\n```\n主题设置成material\n\n\n打开material文件夹\n复制一份 *_config.template.yml* 命名成 *_config.yml* \n里面的具体参数修改参考[这里](https://material.viosey.com/docs/#/config_basic)\n\n照做基本都能成\n\n#### 添加本地搜索\n\n使用本地搜索需要安装 [hexo-generator-search](https://github.com/PaicHyperionDev/hexo-generator-search) 插件。\n在修改的 *_config.yml* 中\n把 search: use 的值为 google 改为 local 即可。\n然后在原 *_config.yml* 中添加\n``` bash\nsearch:\n    path: search.xml\n    field: all\n```\n\n#### 添加标签云、照片墙、时间线\n\n[参考这里](https://material.viosey.com/docs/#/pages)\n\n唯一需要说的就是需要在修改的 *_config.yml* 中仿照about界面添加对应标签\n\n\t# Sidebar Customize\n\tsidebar:\n\t\tpages:\n\t\t\ttags: #make sure the value corresponds to another one in language file\n\t            link: \"/tags\"\n\t            icon: label\n\t            divider: false\n\t        gallery:\n\t            link: \"/gallery\"\n\t            icon: photo\n\t            divider: false\n\t        about:\n\t            link: \"/about\"\n\t            icon: person\n\t            divider: false\n\t        timeline:\n\t            link: \"/timeline\"\n\t            icon: timeline\n\t            divider: false\n\t        links:\n\t            link: \"/links\"\n\t            icon: link\n\t            divider: false\n修改多语言文件 *zh_CN.yaml*\nsidebar:\n    homepage: \"主页\"\n    archive: \"归档\"\n    article_num: \"文章总数\"\n    about: \"关于我\" \n    gallery: \"图库\"\n    links: \"友情链接\"\n    tags: \"标签云\" #this object name is mentioned above\n    timeline: \"时间轴\"\n\n\n#### 其他微调\n按照配置与自己心意随意更改，只要你喜欢，改代码也是可以的\n\n\n### 遇坑\n#### 自定义Pages的多语言\n我们添加了添加标签云、照片墙、时间线，同时，在zh_CN.yaml中配置了对应的中文，但是就是不显示\n可修改代码 *layout/_partial/sidebar-navigation.ejs* 中的这一段\n``` html\n<% if(theme.sidebar.pages[i].icon){ %>\n\t<i class=\"material-icons sidebar-material-icons\"><%= theme.sidebar.pages[i].icon %></i>\n<% } %>\n<%= i %>\n</a>\n</li>\n<% if(theme.sidebar.pages[i].divider === true) { %>\n\n\n把 <%= i %> 替换成 <%= __('sidebar.' + i) %> \n```\n\n同理，主界面有一个分页导航也是如此。\n\n#### 同步到github时Error\n同步到github后，随后收到github的邮件， 说 You are attempting to use a Jekyll theme, \"material\", which is not supported by GitHub Pages.\n\n这是由于hexo的深坑必须得自己手动发布才有效。\n安装 deployer 可解决\n\n具体方法是 [https://hexo.io/zh-cn/docs/deployment.html](https://hexo.io/zh-cn/docs/deployment.html)\n\n#### 其他问题\n1，关注主题的[Issue](https://github.com/viosey/hexo-theme-material/issues)\n2，博客[hexo 博客的神坑及本质原因](https://liguanghe.github.io/2017/05/22/blogRebuilt/)\n3，度娘\n4，谷歌\n5，自行分析\n\n\n","slug":"Hexo搭建博客","published":1,"updated":"2017-10-27T04:23:41.705Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj9fm90sh00002cob2yoia0xy","content":"<h3 id=\"原博客搬迁\"><a href=\"#原博客搬迁\" class=\"headerlink\" title=\"原博客搬迁\"></a>原博客搬迁</h3><p>原本一直使用<a href=\"http://blog.csdn.net/cheng624\" target=\"_blank\" rel=\"external\">CSDN的博客</a>记录一些自己的东西，但是前段时间登录发现一直需要我真实身份验证，抱着支持国家政策的态度我屈服了… 但是最近，后来为什么又出来一个必须扫描公众号二维码关注再完成手机验证。只想说你推广也就算了为毛还要强制！表示不服！<br>为了专治“不服”，我决定使用万能Github自行搭建博客，考虑了 <a href=\"http://jekyll.com.cn/\" target=\"_blank\" rel=\"external\">Jekyll</a>，看了比人的一堆分析以后最终选择了 <a href=\"https://hexo.io/zh-cn/docs/index.html\" target=\"_blank\" rel=\"external\">Hexo</a>，由于我的web前端只停留在html+css阶段故表示不懂他们底下的大区别，但是使用了以后只觉得 hexo很麻烦… 因为jekyll是github自动生成pages，hexo需要自己genegrate+deploy，我不知道这是不是代表我每次上传都必须有nodejs的环境，也不知道jekyll是不是这样…</p>\n<p>最终，我还是选择了hexo，因为我看用到了 <a href=\"https://github.com/viosey/hexo-theme-material/\" target=\"_blank\" rel=\"external\">Material</a> 的模板0.0</p>\n<h3 id=\"安装hexo\"><a href=\"#安装hexo\" class=\"headerlink\" title=\"安装hexo\"></a>安装hexo</h3><p>安装步骤很简单，一路文档操作：<a href=\"https://hexo.io/zh-cn/docs/index.html\" target=\"_blank\" rel=\"external\">连接</a><br>安装 Hexo 相当简单。然而在安装前，您必须检查电脑中是否已安装下列应用程序：</p>\n<pre><code>Node.js\nGit\n</code></pre><p>如果您的电脑中已经安装上述必备程序，那么恭喜您！接下来只需要使用 npm 即可完成 Hexo 的安装。</p>\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">npm</span> <span class=\"token function\">install</span> -g hexo-cli\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"使用Material主题\"><a href=\"#使用Material主题\" class=\"headerlink\" title=\"使用Material主题\"></a>使用Material主题</h3><h4 id=\"建立一个空的站点\"><a href=\"#建立一个空的站点\" class=\"headerlink\" title=\"建立一个空的站点\"></a>建立一个空的站点</h4><p>选择一个心仪的文件夹，在此次cmd</p>\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\">$ hexo init MyBlog <span class=\"token comment\" spellcheck=\"true\">#MyBlog是我要放置博客文件的文件夹</span>\n$ <span class=\"token function\">cd</span> MyBlog\n$ <span class=\"token function\">npm</span> <span class=\"token function\">install</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>完成以后对应的目录</p>\n<pre><code>.\n├── _config.yml\n├── package.json\n├── scaffolds\n├── source\n|   ├── _drafts\n|   └── _posts\n└── themes\n</code></pre><p>安装完成，在themes文件夹中已存在一个模板，由于它不是我们需要的模板，so把里面的文件删除干净，然后在里面用git或者直接down一份<a href=\"https://github.com/viosey/hexo-theme-material/\" target=\"_blank\" rel=\"external\">Material</a> 的代码。解压完成。</p>\n<h4 id=\"修改基本配置\"><a href=\"#修改基本配置\" class=\"headerlink\" title=\"修改基本配置\"></a>修改基本配置</h4><p>先修改主文件夹的 <em>_config.yml</em> 文件，具体含义<a href=\"https://hexo.io/zh-cn/docs/configuration.html\" target=\"_blank\" rel=\"external\">参考配置</a>， 主要的是修改</p>\n<pre><code>language: zh-CN\n</code></pre><p>把语言设置成中文</p>\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\"><span class=\"token comment\" spellcheck=\"true\"># Extensions</span>\n<span class=\"token comment\" spellcheck=\"true\">## Plugins: https://hexo.io/plugins/</span>\n<span class=\"token comment\" spellcheck=\"true\">## Themes: https://hexo.io/themes/</span>\ntheme: material\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>主题设置成material</p>\n<p>打开material文件夹<br>复制一份 <em>_config.template.yml</em> 命名成 <em>_config.yml</em><br>里面的具体参数修改参考<a href=\"https://material.viosey.com/docs/#/config_basic\" target=\"_blank\" rel=\"external\">这里</a></p>\n<p>照做基本都能成</p>\n<h4 id=\"添加本地搜索\"><a href=\"#添加本地搜索\" class=\"headerlink\" title=\"添加本地搜索\"></a>添加本地搜索</h4><p>使用本地搜索需要安装 <a href=\"https://github.com/PaicHyperionDev/hexo-generator-search\" target=\"_blank\" rel=\"external\">hexo-generator-search</a> 插件。<br>在修改的 <em>_config.yml</em> 中<br>把 search: use 的值为 google 改为 local 即可。<br>然后在原 <em>_config.yml</em> 中添加</p>\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\">search:\n    path: search.xml\n    field: all\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"添加标签云、照片墙、时间线\"><a href=\"#添加标签云、照片墙、时间线\" class=\"headerlink\" title=\"添加标签云、照片墙、时间线\"></a>添加标签云、照片墙、时间线</h4><p><a href=\"https://material.viosey.com/docs/#/pages\" target=\"_blank\" rel=\"external\">参考这里</a></p>\n<p>唯一需要说的就是需要在修改的 <em>_config.yml</em> 中仿照about界面添加对应标签</p>\n<pre><code># Sidebar Customize\nsidebar:\n    pages:\n        tags: #make sure the value corresponds to another one in language file\n            link: &quot;/tags&quot;\n            icon: label\n            divider: false\n        gallery:\n            link: &quot;/gallery&quot;\n            icon: photo\n            divider: false\n        about:\n            link: &quot;/about&quot;\n            icon: person\n            divider: false\n        timeline:\n            link: &quot;/timeline&quot;\n            icon: timeline\n            divider: false\n        links:\n            link: &quot;/links&quot;\n            icon: link\n            divider: false\n</code></pre><p>修改多语言文件 <em>zh_CN.yaml</em><br>sidebar:<br>    homepage: “主页”<br>    archive: “归档”<br>    article_num: “文章总数”<br>    about: “关于我”<br>    gallery: “图库”<br>    links: “友情链接”<br>    tags: “标签云” #this object name is mentioned above<br>    timeline: “时间轴”</p>\n<h4 id=\"其他微调\"><a href=\"#其他微调\" class=\"headerlink\" title=\"其他微调\"></a>其他微调</h4><p>按照配置与自己心意随意更改，只要你喜欢，改代码也是可以的</p>\n<h3 id=\"遇坑\"><a href=\"#遇坑\" class=\"headerlink\" title=\"遇坑\"></a>遇坑</h3><h4 id=\"自定义Pages的多语言\"><a href=\"#自定义Pages的多语言\" class=\"headerlink\" title=\"自定义Pages的多语言\"></a>自定义Pages的多语言</h4><p>我们添加了添加标签云、照片墙、时间线，同时，在zh_CN.yaml中配置了对应的中文，但是就是不显示<br>可修改代码 <em>layout/_partial/sidebar-navigation.ejs</em> 中的这一段</p>\n<pre class=\"line-numbers language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>%</span> <span class=\"token attr-name\">if(theme.sidebar.pages[i].icon){</span> <span class=\"token attr-name\">%</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>i</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>material-icons sidebar-material-icons<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>&lt;%= theme.sidebar.pages[i].icon %><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>i</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>%</span> <span class=\"token attr-name\">}</span> <span class=\"token attr-name\">%</span><span class=\"token punctuation\">></span></span>\n&lt;%= i %>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n&lt;% if(theme.sidebar.pages[i].divider === true) { %>\n\n\n把 &lt;%= i %> 替换成 &lt;%= __('sidebar.' + i) %>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>同理，主界面有一个分页导航也是如此。</p>\n<h4 id=\"同步到github时Error\"><a href=\"#同步到github时Error\" class=\"headerlink\" title=\"同步到github时Error\"></a>同步到github时Error</h4><p>同步到github后，随后收到github的邮件， 说 You are attempting to use a Jekyll theme, “material”, which is not supported by GitHub Pages.</p>\n<p>这是由于hexo的深坑必须得自己手动发布才有效。<br>安装 deployer 可解决</p>\n<p>具体方法是 <a href=\"https://hexo.io/zh-cn/docs/deployment.html\" target=\"_blank\" rel=\"external\">https://hexo.io/zh-cn/docs/deployment.html</a></p>\n<h4 id=\"其他问题\"><a href=\"#其他问题\" class=\"headerlink\" title=\"其他问题\"></a>其他问题</h4><p>1，关注主题的<a href=\"https://github.com/viosey/hexo-theme-material/issues\" target=\"_blank\" rel=\"external\">Issue</a><br>2，博客<a href=\"https://liguanghe.github.io/2017/05/22/blogRebuilt/\" target=\"_blank\" rel=\"external\">hexo 博客的神坑及本质原因</a><br>3，度娘<br>4，谷歌<br>5，自行分析</p>\n","site":{"data":{"gallery":{"美女":{"full_link":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1508912200438&di=d5b3eacf86d8f94c149c6fc68fe4da67&imgtype=0&src=http%3A%2F%2Fpic01.taopic.com%2F151014%2F234732-15101410452229-lp.jpg","thumb_link":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1508912200438&di=d5b3eacf86d8f94c149c6fc68fe4da67&imgtype=0&src=http%3A%2F%2Fpic01.taopic.com%2F151014%2F234732-15101410452229-lp.jpg","descr":"美女插画"}},"links":{"Github":{"link":"https://github.com/garsonlab","avatar":"https://avatars3.githubusercontent.com/u/13958934?s=460&v=4","descr":"My Github","type":"Blog"},"OnLineTools":{"link":"http://tool.lu/","avatar":"http://qn11.tool.lu/201710/15/103320SbM84Ql4tETjg49a_28x28.png","descr":"在线工具","type":"Tools"},"CMDMarkdown":{"link":"https://www.zybuluo.com/","avatar":"https://www.zybuluo.com/static/img/logo.png","descr":"Markdown在线编辑","type":"Tools"},"Hexo文档":{"link":"https://hexo.io/zh-cn/docs/","avatar":"https://hexo.io/logo.svg","descr":"Hexo中文官方文档","type":"Community"},"游戏蛮牛":{"link":"http://www.manew.com/forum.php","avatar":"http://www.manew.com/template/manew2016/images/logo.png","descr":"unity交流社区","type":"Unity"},"FairyGUI":{"link":"http://www.fairygui.com/","avatar":"http://www.fairygui.com/images/20170728151207.png","descr":"FairyGUI官方网站","type":"Site"}},"linktypes":{"Blog":{"name":"关注的博客"},"Unity":{"name":"Unity3D"},"Community":{"name":"浏览的社区"},"Tools":{"name":"工具"},"Site":{"name":"收藏的网址"}}}},"excerpt":"","more":"<h3 id=\"原博客搬迁\"><a href=\"#原博客搬迁\" class=\"headerlink\" title=\"原博客搬迁\"></a>原博客搬迁</h3><p>原本一直使用<a href=\"http://blog.csdn.net/cheng624\" target=\"_blank\" rel=\"external\">CSDN的博客</a>记录一些自己的东西，但是前段时间登录发现一直需要我真实身份验证，抱着支持国家政策的态度我屈服了… 但是最近，后来为什么又出来一个必须扫描公众号二维码关注再完成手机验证。只想说你推广也就算了为毛还要强制！表示不服！<br>为了专治“不服”，我决定使用万能Github自行搭建博客，考虑了 <a href=\"http://jekyll.com.cn/\" target=\"_blank\" rel=\"external\">Jekyll</a>，看了比人的一堆分析以后最终选择了 <a href=\"https://hexo.io/zh-cn/docs/index.html\" target=\"_blank\" rel=\"external\">Hexo</a>，由于我的web前端只停留在html+css阶段故表示不懂他们底下的大区别，但是使用了以后只觉得 hexo很麻烦… 因为jekyll是github自动生成pages，hexo需要自己genegrate+deploy，我不知道这是不是代表我每次上传都必须有nodejs的环境，也不知道jekyll是不是这样…</p>\n<p>最终，我还是选择了hexo，因为我看用到了 <a href=\"https://github.com/viosey/hexo-theme-material/\" target=\"_blank\" rel=\"external\">Material</a> 的模板0.0</p>\n<h3 id=\"安装hexo\"><a href=\"#安装hexo\" class=\"headerlink\" title=\"安装hexo\"></a>安装hexo</h3><p>安装步骤很简单，一路文档操作：<a href=\"https://hexo.io/zh-cn/docs/index.html\" target=\"_blank\" rel=\"external\">连接</a><br>安装 Hexo 相当简单。然而在安装前，您必须检查电脑中是否已安装下列应用程序：</p>\n<pre><code>Node.js\nGit\n</code></pre><p>如果您的电脑中已经安装上述必备程序，那么恭喜您！接下来只需要使用 npm 即可完成 Hexo 的安装。</p>\n<pre><code class=\"bash\">$ npm install -g hexo-cli\n</code></pre>\n<h3 id=\"使用Material主题\"><a href=\"#使用Material主题\" class=\"headerlink\" title=\"使用Material主题\"></a>使用Material主题</h3><h4 id=\"建立一个空的站点\"><a href=\"#建立一个空的站点\" class=\"headerlink\" title=\"建立一个空的站点\"></a>建立一个空的站点</h4><p>选择一个心仪的文件夹，在此次cmd</p>\n<pre><code class=\"bash\">$ hexo init MyBlog #MyBlog是我要放置博客文件的文件夹\n$ cd MyBlog\n$ npm install\n</code></pre>\n<p>完成以后对应的目录</p>\n<pre><code>.\n├── _config.yml\n├── package.json\n├── scaffolds\n├── source\n|   ├── _drafts\n|   └── _posts\n└── themes\n</code></pre><p>安装完成，在themes文件夹中已存在一个模板，由于它不是我们需要的模板，so把里面的文件删除干净，然后在里面用git或者直接down一份<a href=\"https://github.com/viosey/hexo-theme-material/\" target=\"_blank\" rel=\"external\">Material</a> 的代码。解压完成。</p>\n<h4 id=\"修改基本配置\"><a href=\"#修改基本配置\" class=\"headerlink\" title=\"修改基本配置\"></a>修改基本配置</h4><p>先修改主文件夹的 <em>_config.yml</em> 文件，具体含义<a href=\"https://hexo.io/zh-cn/docs/configuration.html\" target=\"_blank\" rel=\"external\">参考配置</a>， 主要的是修改</p>\n<pre><code>language: zh-CN\n</code></pre><p>把语言设置成中文</p>\n<pre><code class=\"bash\"># Extensions\n## Plugins: https://hexo.io/plugins/\n## Themes: https://hexo.io/themes/\ntheme: material\n</code></pre>\n<p>主题设置成material</p>\n<p>打开material文件夹<br>复制一份 <em>_config.template.yml</em> 命名成 <em>_config.yml</em><br>里面的具体参数修改参考<a href=\"https://material.viosey.com/docs/#/config_basic\" target=\"_blank\" rel=\"external\">这里</a></p>\n<p>照做基本都能成</p>\n<h4 id=\"添加本地搜索\"><a href=\"#添加本地搜索\" class=\"headerlink\" title=\"添加本地搜索\"></a>添加本地搜索</h4><p>使用本地搜索需要安装 <a href=\"https://github.com/PaicHyperionDev/hexo-generator-search\" target=\"_blank\" rel=\"external\">hexo-generator-search</a> 插件。<br>在修改的 <em>_config.yml</em> 中<br>把 search: use 的值为 google 改为 local 即可。<br>然后在原 <em>_config.yml</em> 中添加</p>\n<pre><code class=\"bash\">search:\n    path: search.xml\n    field: all\n</code></pre>\n<h4 id=\"添加标签云、照片墙、时间线\"><a href=\"#添加标签云、照片墙、时间线\" class=\"headerlink\" title=\"添加标签云、照片墙、时间线\"></a>添加标签云、照片墙、时间线</h4><p><a href=\"https://material.viosey.com/docs/#/pages\" target=\"_blank\" rel=\"external\">参考这里</a></p>\n<p>唯一需要说的就是需要在修改的 <em>_config.yml</em> 中仿照about界面添加对应标签</p>\n<pre><code># Sidebar Customize\nsidebar:\n    pages:\n        tags: #make sure the value corresponds to another one in language file\n            link: &quot;/tags&quot;\n            icon: label\n            divider: false\n        gallery:\n            link: &quot;/gallery&quot;\n            icon: photo\n            divider: false\n        about:\n            link: &quot;/about&quot;\n            icon: person\n            divider: false\n        timeline:\n            link: &quot;/timeline&quot;\n            icon: timeline\n            divider: false\n        links:\n            link: &quot;/links&quot;\n            icon: link\n            divider: false\n</code></pre><p>修改多语言文件 <em>zh_CN.yaml</em><br>sidebar:<br>    homepage: “主页”<br>    archive: “归档”<br>    article_num: “文章总数”<br>    about: “关于我”<br>    gallery: “图库”<br>    links: “友情链接”<br>    tags: “标签云” #this object name is mentioned above<br>    timeline: “时间轴”</p>\n<h4 id=\"其他微调\"><a href=\"#其他微调\" class=\"headerlink\" title=\"其他微调\"></a>其他微调</h4><p>按照配置与自己心意随意更改，只要你喜欢，改代码也是可以的</p>\n<h3 id=\"遇坑\"><a href=\"#遇坑\" class=\"headerlink\" title=\"遇坑\"></a>遇坑</h3><h4 id=\"自定义Pages的多语言\"><a href=\"#自定义Pages的多语言\" class=\"headerlink\" title=\"自定义Pages的多语言\"></a>自定义Pages的多语言</h4><p>我们添加了添加标签云、照片墙、时间线，同时，在zh_CN.yaml中配置了对应的中文，但是就是不显示<br>可修改代码 <em>layout/_partial/sidebar-navigation.ejs</em> 中的这一段</p>\n<pre><code class=\"html\">&lt;% if(theme.sidebar.pages[i].icon){ %&gt;\n    &lt;i class=&quot;material-icons sidebar-material-icons&quot;&gt;&lt;%= theme.sidebar.pages[i].icon %&gt;&lt;/i&gt;\n&lt;% } %&gt;\n&lt;%= i %&gt;\n&lt;/a&gt;\n&lt;/li&gt;\n&lt;% if(theme.sidebar.pages[i].divider === true) { %&gt;\n\n\n把 &lt;%= i %&gt; 替换成 &lt;%= __(&#39;sidebar.&#39; + i) %&gt;\n</code></pre>\n<p>同理，主界面有一个分页导航也是如此。</p>\n<h4 id=\"同步到github时Error\"><a href=\"#同步到github时Error\" class=\"headerlink\" title=\"同步到github时Error\"></a>同步到github时Error</h4><p>同步到github后，随后收到github的邮件， 说 You are attempting to use a Jekyll theme, “material”, which is not supported by GitHub Pages.</p>\n<p>这是由于hexo的深坑必须得自己手动发布才有效。<br>安装 deployer 可解决</p>\n<p>具体方法是 <a href=\"https://hexo.io/zh-cn/docs/deployment.html\" target=\"_blank\" rel=\"external\">https://hexo.io/zh-cn/docs/deployment.html</a></p>\n<h4 id=\"其他问题\"><a href=\"#其他问题\" class=\"headerlink\" title=\"其他问题\"></a>其他问题</h4><p>1，关注主题的<a href=\"https://github.com/viosey/hexo-theme-material/issues\" target=\"_blank\" rel=\"external\">Issue</a><br>2，博客<a href=\"https://liguanghe.github.io/2017/05/22/blogRebuilt/\" target=\"_blank\" rel=\"external\">hexo 博客的神坑及本质原因</a><br>3，度娘<br>4，谷歌<br>5，自行分析</p>\n"},{"title":"SVN下载github上的文件","date":"2016-11-06T16:00:00.000Z","_content":"\n## 选择所要下载的地址 \n如   https://github.com/*****/*******/tree/master/******\n## 替换 tree/master 为 trunk\n## 输入到相应的地址\nso easy!","source":"_posts/SVN下载github上的文件.md","raw":"---\ntitle: SVN下载github上的文件\ndate: 2016-11-7\ntags:\n- svn\n- git\n- github\ncategories: 基础操作\n---\n\n## 选择所要下载的地址 \n如   https://github.com/*****/*******/tree/master/******\n## 替换 tree/master 为 trunk\n## 输入到相应的地址\nso easy!","slug":"SVN下载github上的文件","published":1,"updated":"2017-10-26T09:39:13.667Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj9fm90sn00012cobbyt1lmtu","content":"<h2 id=\"选择所要下载的地址\"><a href=\"#选择所要下载的地址\" class=\"headerlink\" title=\"选择所要下载的地址\"></a>选择所要下载的地址</h2><p>如   <a href=\"https://github.com/*****/*******/tree/master/******\" target=\"_blank\" rel=\"external\">https://github.com/*****/*******/tree/master/******</a></p>\n<h2 id=\"替换-tree-master-为-trunk\"><a href=\"#替换-tree-master-为-trunk\" class=\"headerlink\" title=\"替换 tree/master 为 trunk\"></a>替换 tree/master 为 trunk</h2><h2 id=\"输入到相应的地址\"><a href=\"#输入到相应的地址\" class=\"headerlink\" title=\"输入到相应的地址\"></a>输入到相应的地址</h2><p>so easy!</p>\n","site":{"data":{"gallery":{"美女":{"full_link":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1508912200438&di=d5b3eacf86d8f94c149c6fc68fe4da67&imgtype=0&src=http%3A%2F%2Fpic01.taopic.com%2F151014%2F234732-15101410452229-lp.jpg","thumb_link":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1508912200438&di=d5b3eacf86d8f94c149c6fc68fe4da67&imgtype=0&src=http%3A%2F%2Fpic01.taopic.com%2F151014%2F234732-15101410452229-lp.jpg","descr":"美女插画"}},"links":{"Github":{"link":"https://github.com/garsonlab","avatar":"https://avatars3.githubusercontent.com/u/13958934?s=460&v=4","descr":"My Github","type":"Blog"},"OnLineTools":{"link":"http://tool.lu/","avatar":"http://qn11.tool.lu/201710/15/103320SbM84Ql4tETjg49a_28x28.png","descr":"在线工具","type":"Tools"},"CMDMarkdown":{"link":"https://www.zybuluo.com/","avatar":"https://www.zybuluo.com/static/img/logo.png","descr":"Markdown在线编辑","type":"Tools"},"Hexo文档":{"link":"https://hexo.io/zh-cn/docs/","avatar":"https://hexo.io/logo.svg","descr":"Hexo中文官方文档","type":"Community"},"游戏蛮牛":{"link":"http://www.manew.com/forum.php","avatar":"http://www.manew.com/template/manew2016/images/logo.png","descr":"unity交流社区","type":"Unity"},"FairyGUI":{"link":"http://www.fairygui.com/","avatar":"http://www.fairygui.com/images/20170728151207.png","descr":"FairyGUI官方网站","type":"Site"}},"linktypes":{"Blog":{"name":"关注的博客"},"Unity":{"name":"Unity3D"},"Community":{"name":"浏览的社区"},"Tools":{"name":"工具"},"Site":{"name":"收藏的网址"}}}},"excerpt":"","more":"<h2 id=\"选择所要下载的地址\"><a href=\"#选择所要下载的地址\" class=\"headerlink\" title=\"选择所要下载的地址\"></a>选择所要下载的地址</h2><p>如   <a href=\"https://github.com/*****/*******/tree/master/******\" target=\"_blank\" rel=\"external\">https://github.com/*****/*******/tree/master/******</a></p>\n<h2 id=\"替换-tree-master-为-trunk\"><a href=\"#替换-tree-master-为-trunk\" class=\"headerlink\" title=\"替换 tree/master 为 trunk\"></a>替换 tree/master 为 trunk</h2><h2 id=\"输入到相应的地址\"><a href=\"#输入到相应的地址\" class=\"headerlink\" title=\"输入到相应的地址\"></a>输入到相应的地址</h2><p>so easy!</p>\n"},{"title":"Android连接问题","date":"2016-12-04T16:00:00.000Z","_content":"\n1，Error: Program “/NDK-build” not found in PATH\n解决方法： [http://stackoverflow.com/questions/20200545/error-program-ndk-build-not-found-in-path](http://stackoverflow.com/questions/20200545/error-program-ndk-build-not-found-in-path)\n最后试了：C/C++ Build | Tool Chain Editor and select Android Builder as current builder.\n\n2，ADB错误“more than one device and emulator”\n解决方法：adb kill-server\n并参考了了博客： [http://blog.csdn.net/gaojinshan/article/details/9455193](http://blog.csdn.net/gaojinshan/article/details/9455193)","source":"_posts/Android连接初体验.md","raw":"---\ntitle: Android连接问题\ndate: 2016-12-5\ntags:\n- Android\ncategories: 基础操作\n---\n\n1，Error: Program “/NDK-build” not found in PATH\n解决方法： [http://stackoverflow.com/questions/20200545/error-program-ndk-build-not-found-in-path](http://stackoverflow.com/questions/20200545/error-program-ndk-build-not-found-in-path)\n最后试了：C/C++ Build | Tool Chain Editor and select Android Builder as current builder.\n\n2，ADB错误“more than one device and emulator”\n解决方法：adb kill-server\n并参考了了博客： [http://blog.csdn.net/gaojinshan/article/details/9455193](http://blog.csdn.net/gaojinshan/article/details/9455193)","slug":"Android连接初体验","published":1,"updated":"2017-10-26T11:14:32.410Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj9fm90ss00042cobvk7pgz0n","content":"<p>1，Error: Program “/NDK-build” not found in PATH<br>解决方法： <a href=\"http://stackoverflow.com/questions/20200545/error-program-ndk-build-not-found-in-path\" target=\"_blank\" rel=\"external\">http://stackoverflow.com/questions/20200545/error-program-ndk-build-not-found-in-path</a><br>最后试了：C/C++ Build | Tool Chain Editor and select Android Builder as current builder.</p>\n<p>2，ADB错误“more than one device and emulator”<br>解决方法：adb kill-server<br>并参考了了博客： <a href=\"http://blog.csdn.net/gaojinshan/article/details/9455193\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/gaojinshan/article/details/9455193</a></p>\n","site":{"data":{"gallery":{"美女":{"full_link":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1508912200438&di=d5b3eacf86d8f94c149c6fc68fe4da67&imgtype=0&src=http%3A%2F%2Fpic01.taopic.com%2F151014%2F234732-15101410452229-lp.jpg","thumb_link":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1508912200438&di=d5b3eacf86d8f94c149c6fc68fe4da67&imgtype=0&src=http%3A%2F%2Fpic01.taopic.com%2F151014%2F234732-15101410452229-lp.jpg","descr":"美女插画"}},"links":{"Github":{"link":"https://github.com/garsonlab","avatar":"https://avatars3.githubusercontent.com/u/13958934?s=460&v=4","descr":"My Github","type":"Blog"},"OnLineTools":{"link":"http://tool.lu/","avatar":"http://qn11.tool.lu/201710/15/103320SbM84Ql4tETjg49a_28x28.png","descr":"在线工具","type":"Tools"},"CMDMarkdown":{"link":"https://www.zybuluo.com/","avatar":"https://www.zybuluo.com/static/img/logo.png","descr":"Markdown在线编辑","type":"Tools"},"Hexo文档":{"link":"https://hexo.io/zh-cn/docs/","avatar":"https://hexo.io/logo.svg","descr":"Hexo中文官方文档","type":"Community"},"游戏蛮牛":{"link":"http://www.manew.com/forum.php","avatar":"http://www.manew.com/template/manew2016/images/logo.png","descr":"unity交流社区","type":"Unity"},"FairyGUI":{"link":"http://www.fairygui.com/","avatar":"http://www.fairygui.com/images/20170728151207.png","descr":"FairyGUI官方网站","type":"Site"}},"linktypes":{"Blog":{"name":"关注的博客"},"Unity":{"name":"Unity3D"},"Community":{"name":"浏览的社区"},"Tools":{"name":"工具"},"Site":{"name":"收藏的网址"}}}},"excerpt":"","more":"<p>1，Error: Program “/NDK-build” not found in PATH<br>解决方法： <a href=\"http://stackoverflow.com/questions/20200545/error-program-ndk-build-not-found-in-path\" target=\"_blank\" rel=\"external\">http://stackoverflow.com/questions/20200545/error-program-ndk-build-not-found-in-path</a><br>最后试了：C/C++ Build | Tool Chain Editor and select Android Builder as current builder.</p>\n<p>2，ADB错误“more than one device and emulator”<br>解决方法：adb kill-server<br>并参考了了博客： <a href=\"http://blog.csdn.net/gaojinshan/article/details/9455193\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/gaojinshan/article/details/9455193</a></p>\n"},{"title":"Unity Scene场景自定义坐标轴","date":"2017-04-26T16:00:00.000Z","_content":"\n多看看别人的代码是没有坏处的，即使学不了人家的大框架，偶尔拾起一些小东西也是可以的。\n最近扒了一下DoTween(声明一下源码是自己反编译的，只为学习)，看见了如何在Scene场景中添加标注和坐标轴，具体做法是，在你的脚本Editor中，比如你重定义某个mono脚本的Inspector显示中，加入OnSceneGUI函数，使用Handles进行操作。\n\n``` csharp\nvoid OnSceneGUI()  \n{  \n    if (_target.nodes.Count > 0)  \n    {  \n        //allow path adjustment undo:  \n        Undo.RecordObject(_target, \"Adjust Path\");  \n\n        //path begin and end labels:  \n        Handles.Label(_target.nodes[0], \"'\" + _target.name + \"' Begin\");  \n        Handles.Label(_target.nodes[_target.nodes.Count - 1], \"'\" + _target.name + \"' End\");  \n\n        //node handle display:  \n        for (int i = 0; i < _target.nodes.Count; i++)  \n        {  \n            _target.nodes[i] = Handles.PositionHandle(_target.nodes[i], Quaternion.identity);  \n            if (i != 0 || i != _target.nodes.Count - 1)  \n                Handles.Label(_target.nodes[i], i.ToString());  \n        }  \n        if (GUI.changed)  \n        {  \n            EditorUtility.SetDirty(_target);  \n        }  \n    }  \n      \n}\n```\n\n代码很简单，只是记录方法而已，具体的效果：\n\n![图片来源我的csdn](http://img.blog.csdn.net/20170427161523433?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvQ2hlbmc2MjQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center)\n\n给开始和结束点添加了一个label, 每个节点添加了一个坐标轴和一个序号。其中蓝色的线使用Gizmos画的，可自行度娘。","source":"_posts/Unity Scene场景自定义坐标轴.md","raw":"---\ntitle: Unity Scene场景自定义坐标轴\ndate: 2017-4-27\ntags:\n- Unity\n- 坐标轴\ncategories: UnityScript\n---\n\n多看看别人的代码是没有坏处的，即使学不了人家的大框架，偶尔拾起一些小东西也是可以的。\n最近扒了一下DoTween(声明一下源码是自己反编译的，只为学习)，看见了如何在Scene场景中添加标注和坐标轴，具体做法是，在你的脚本Editor中，比如你重定义某个mono脚本的Inspector显示中，加入OnSceneGUI函数，使用Handles进行操作。\n\n``` csharp\nvoid OnSceneGUI()  \n{  \n    if (_target.nodes.Count > 0)  \n    {  \n        //allow path adjustment undo:  \n        Undo.RecordObject(_target, \"Adjust Path\");  \n\n        //path begin and end labels:  \n        Handles.Label(_target.nodes[0], \"'\" + _target.name + \"' Begin\");  \n        Handles.Label(_target.nodes[_target.nodes.Count - 1], \"'\" + _target.name + \"' End\");  \n\n        //node handle display:  \n        for (int i = 0; i < _target.nodes.Count; i++)  \n        {  \n            _target.nodes[i] = Handles.PositionHandle(_target.nodes[i], Quaternion.identity);  \n            if (i != 0 || i != _target.nodes.Count - 1)  \n                Handles.Label(_target.nodes[i], i.ToString());  \n        }  \n        if (GUI.changed)  \n        {  \n            EditorUtility.SetDirty(_target);  \n        }  \n    }  \n      \n}\n```\n\n代码很简单，只是记录方法而已，具体的效果：\n\n![图片来源我的csdn](http://img.blog.csdn.net/20170427161523433?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvQ2hlbmc2MjQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center)\n\n给开始和结束点添加了一个label, 每个节点添加了一个坐标轴和一个序号。其中蓝色的线使用Gizmos画的，可自行度娘。","slug":"Unity Scene场景自定义坐标轴","published":1,"updated":"2017-10-26T10:57:16.009Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj9fm90sw00052cobc6a3m4n8","content":"<p>多看看别人的代码是没有坏处的，即使学不了人家的大框架，偶尔拾起一些小东西也是可以的。<br>最近扒了一下DoTween(声明一下源码是自己反编译的，只为学习)，看见了如何在Scene场景中添加标注和坐标轴，具体做法是，在你的脚本Editor中，比如你重定义某个mono脚本的Inspector显示中，加入OnSceneGUI函数，使用Handles进行操作。</p>\n<pre class=\"line-numbers language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">void</span> <span class=\"token function\">OnSceneGUI</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  \n<span class=\"token punctuation\">{</span>  \n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>_target<span class=\"token punctuation\">.</span>nodes<span class=\"token punctuation\">.</span>Count <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>  \n    <span class=\"token punctuation\">{</span>  \n        <span class=\"token comment\" spellcheck=\"true\">//allow path adjustment undo:  </span>\n        Undo<span class=\"token punctuation\">.</span><span class=\"token function\">RecordObject</span><span class=\"token punctuation\">(</span>_target<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Adjust Path\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n\n        <span class=\"token comment\" spellcheck=\"true\">//path begin and end labels:  </span>\n        Handles<span class=\"token punctuation\">.</span><span class=\"token function\">Label</span><span class=\"token punctuation\">(</span>_target<span class=\"token punctuation\">.</span>nodes<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"'\"</span> <span class=\"token operator\">+</span> _target<span class=\"token punctuation\">.</span>name <span class=\"token operator\">+</span> <span class=\"token string\">\"' Begin\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n        Handles<span class=\"token punctuation\">.</span><span class=\"token function\">Label</span><span class=\"token punctuation\">(</span>_target<span class=\"token punctuation\">.</span>nodes<span class=\"token punctuation\">[</span>_target<span class=\"token punctuation\">.</span>nodes<span class=\"token punctuation\">.</span>Count <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"'\"</span> <span class=\"token operator\">+</span> _target<span class=\"token punctuation\">.</span>name <span class=\"token operator\">+</span> <span class=\"token string\">\"' End\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n\n        <span class=\"token comment\" spellcheck=\"true\">//node handle display:  </span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> _target<span class=\"token punctuation\">.</span>nodes<span class=\"token punctuation\">.</span>Count<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>  \n        <span class=\"token punctuation\">{</span>  \n            _target<span class=\"token punctuation\">.</span>nodes<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Handles<span class=\"token punctuation\">.</span><span class=\"token function\">PositionHandle</span><span class=\"token punctuation\">(</span>_target<span class=\"token punctuation\">.</span>nodes<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> Quaternion<span class=\"token punctuation\">.</span>identity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">!=</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> i <span class=\"token operator\">!=</span> _target<span class=\"token punctuation\">.</span>nodes<span class=\"token punctuation\">.</span>Count <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>  \n                Handles<span class=\"token punctuation\">.</span><span class=\"token function\">Label</span><span class=\"token punctuation\">(</span>_target<span class=\"token punctuation\">.</span>nodes<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n        <span class=\"token punctuation\">}</span>  \n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>GUI<span class=\"token punctuation\">.</span>changed<span class=\"token punctuation\">)</span>  \n        <span class=\"token punctuation\">{</span>  \n            EditorUtility<span class=\"token punctuation\">.</span><span class=\"token function\">SetDirty</span><span class=\"token punctuation\">(</span>_target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n        <span class=\"token punctuation\">}</span>  \n    <span class=\"token punctuation\">}</span>  \n\n<span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>代码很简单，只是记录方法而已，具体的效果：</p>\n<p><img src=\"http://img.blog.csdn.net/20170427161523433?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvQ2hlbmc2MjQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\" alt=\"图片来源我的csdn\"></p>\n<p>给开始和结束点添加了一个label, 每个节点添加了一个坐标轴和一个序号。其中蓝色的线使用Gizmos画的，可自行度娘。</p>\n","site":{"data":{"gallery":{"美女":{"full_link":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1508912200438&di=d5b3eacf86d8f94c149c6fc68fe4da67&imgtype=0&src=http%3A%2F%2Fpic01.taopic.com%2F151014%2F234732-15101410452229-lp.jpg","thumb_link":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1508912200438&di=d5b3eacf86d8f94c149c6fc68fe4da67&imgtype=0&src=http%3A%2F%2Fpic01.taopic.com%2F151014%2F234732-15101410452229-lp.jpg","descr":"美女插画"}},"links":{"Github":{"link":"https://github.com/garsonlab","avatar":"https://avatars3.githubusercontent.com/u/13958934?s=460&v=4","descr":"My Github","type":"Blog"},"OnLineTools":{"link":"http://tool.lu/","avatar":"http://qn11.tool.lu/201710/15/103320SbM84Ql4tETjg49a_28x28.png","descr":"在线工具","type":"Tools"},"CMDMarkdown":{"link":"https://www.zybuluo.com/","avatar":"https://www.zybuluo.com/static/img/logo.png","descr":"Markdown在线编辑","type":"Tools"},"Hexo文档":{"link":"https://hexo.io/zh-cn/docs/","avatar":"https://hexo.io/logo.svg","descr":"Hexo中文官方文档","type":"Community"},"游戏蛮牛":{"link":"http://www.manew.com/forum.php","avatar":"http://www.manew.com/template/manew2016/images/logo.png","descr":"unity交流社区","type":"Unity"},"FairyGUI":{"link":"http://www.fairygui.com/","avatar":"http://www.fairygui.com/images/20170728151207.png","descr":"FairyGUI官方网站","type":"Site"}},"linktypes":{"Blog":{"name":"关注的博客"},"Unity":{"name":"Unity3D"},"Community":{"name":"浏览的社区"},"Tools":{"name":"工具"},"Site":{"name":"收藏的网址"}}}},"excerpt":"","more":"<p>多看看别人的代码是没有坏处的，即使学不了人家的大框架，偶尔拾起一些小东西也是可以的。<br>最近扒了一下DoTween(声明一下源码是自己反编译的，只为学习)，看见了如何在Scene场景中添加标注和坐标轴，具体做法是，在你的脚本Editor中，比如你重定义某个mono脚本的Inspector显示中，加入OnSceneGUI函数，使用Handles进行操作。</p>\n<pre><code class=\"csharp\">void OnSceneGUI()  \n{  \n    if (_target.nodes.Count &gt; 0)  \n    {  \n        //allow path adjustment undo:  \n        Undo.RecordObject(_target, &quot;Adjust Path&quot;);  \n\n        //path begin and end labels:  \n        Handles.Label(_target.nodes[0], &quot;&#39;&quot; + _target.name + &quot;&#39; Begin&quot;);  \n        Handles.Label(_target.nodes[_target.nodes.Count - 1], &quot;&#39;&quot; + _target.name + &quot;&#39; End&quot;);  \n\n        //node handle display:  \n        for (int i = 0; i &lt; _target.nodes.Count; i++)  \n        {  \n            _target.nodes[i] = Handles.PositionHandle(_target.nodes[i], Quaternion.identity);  \n            if (i != 0 || i != _target.nodes.Count - 1)  \n                Handles.Label(_target.nodes[i], i.ToString());  \n        }  \n        if (GUI.changed)  \n        {  \n            EditorUtility.SetDirty(_target);  \n        }  \n    }  \n\n}\n</code></pre>\n<p>代码很简单，只是记录方法而已，具体的效果：</p>\n<p><img src=\"http://img.blog.csdn.net/20170427161523433?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvQ2hlbmc2MjQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\" alt=\"图片来源我的csdn\"></p>\n<p>给开始和结束点添加了一个label, 每个节点添加了一个坐标轴和一个序号。其中蓝色的线使用Gizmos画的，可自行度娘。</p>\n"},{"title":"Unity中画实线与虚线","date":"2016-11-23T16:00:00.000Z","_content":"\n以前用过Vectrosity来画过线，但时间久了忘记怎么用了，也忘记能不能画虚线了。试了一下Unity的LineRenderer加上一个材质来画虚线，但是它是把我们的贴图给拉伸覆盖创建出来的mesh的，忘记保存我的实验效果了。。。可能改改Shader还可以用吧。针扎一番后决定自己用GL写，由于Unity中GL与真正的GL有差距，所以虚线费了点事。\n\n### 实现方式\n``` csharp\n\nusing UnityEngine;\nusing System.Collections;\nusing System.Collections.Generic;\n\npublic enum LineType\n{\n    Dashed,\n    Line\n}\n\npublic class VectorLines : MonoBehaviour\n{\n    private static VectorLines inst;\n    public static VectorLines instance\n    {\n        get\n        {\n            if (inst == null)\n            {\n                inst = Camera.main.transform.gameObject.AddComponent<VectorLines>();\n            }\n            return inst;\n        }\n    }\n    private Dictionary<Line, Callback0> lines;\n    private Material lineMaterial;\n\n    void Awake()\n    {\n        lines = new Dictionary<Line, Callback0>();\n        lineMaterial = new Material(\"Shader \\\"Lines/Colored Blended\\\" {\" +\n                \"SubShader { Pass {\" +\n            \"   BindChannels { Bind \\\"Color\\\",color }\" +\n            \"   Blend SrcAlpha OneMinusSrcAlpha\" +\n            \"   ZWrite Off Cull Off Fog { Mode Off }\" +\n            \"} } }\");\n\n        lineMaterial.hideFlags = HideFlags.HideAndDontSave;\n\n        lineMaterial.shader.hideFlags = HideFlags.HideAndDontSave;\n\n    }\n\n    public void Draw(Line line, Callback0 draw)\n    {\n        if (lines.ContainsKey(line)) \n            lines.Remove(line);\n        lines.Add(line, draw);\n    }\n\n    public void Cancel(Line line)\n    {\n        if (lines.ContainsKey(line))\n            lines.Remove(line);\n    }\n\n    void OnPostRender()\n    {\n        if (lines.Count > 0)\n        {\n            lineMaterial.SetPass(0);\n            GL.Begin(GL.LINES);\n            GL.Color(Color.gray);\n            foreach (var line in lines.Values)\n            {\n                line();\n            }\n            GL.End();\n        }\n    }\n}\n\npublic class Line\n{\n    private LineType lineType;\n    private Vector3[] vectors;\n    private float length;\n    private Vector3 dir;\n    private Vector3 next;\n    private Vector3 cur;\n\n    public Line()\n    {\n        lineType = LineType.Line;\n        vectors = new []{Vector3.zero, Vector3.left};\n        length = 1;\n        ReDraw();\n    }\n    public Line(LineType lt, Vector3[] vecs, float len = 0.2f)\n    {\n        lineType = lt;\n        vectors = vecs;\n        length = len;\n        ReDraw();\n    }\n\n    public void SetType(LineType lt)\n    {\n        if(lineType == lt) return;\n        lineType = lt;\n        ReDraw();\n    }\n\n    public void SetVectors(Vector3[] vecs)\n    {\n        if(vectors == vecs) return;\n        vectors = vecs;\n        ReDraw();\n    }\n\n    /// <summary>\n    /// Can use only in dashed mode\n    /// </summary>\n    public void SetLength(float len)\n    {\n        if(length == len) return;\n        length = len;\n        ReDraw();\n    }\n\n    public void Cancel()\n    {\n        VectorLines.instance.Cancel(this);\n    }\n\n    void ReDraw()\n    {\n        if(vectors.Length <= 1) {Debug.LogError(\"vectors' length canot less than 2!\");return;}\n        if (lineType == LineType.Line)\n        {\n            VectorLines.instance.Draw(this, () =>\n            {\n                for (int i = 0; i < vectors.Length -1; i++)\n                {\n                    GL.Vertex(vectors[i]);\n                    GL.Vertex(vectors[i+1]);\n                }\n            });\n        }\n        else if(lineType == LineType.Dashed)\n        {\n            if (length <= 0) { Debug.LogError(\"Length canot less than 0 in dashed mode!\"); return;}\n            VectorLines.instance.Draw(this, () =>\n            {\n                for (int i = 0; i < vectors.Length - 1; i++)\n                {\n                    cur = vectors[i];\n                    dir = (vectors[i + 1] - vectors[i]).normalized;\n                    GL.Vertex(cur);\n                    next = cur + dir*length;\n                    while (Vector3.Distance(next, vectors[i]) < Vector3.Distance(vectors[i + 1], vectors[i]))\n                    {\n                        GL.Vertex(next);\n                        cur = next;\n                        next = cur + dir*length;\n                    }\n                    GL.Vertex(vectors[i+1]);\n                }\n            });\n        }\n    }\n}\n\n```\n\n### 使用方法\n``` csharp\nnew Line(LineType.Dashed, v, 0.2f);//画虚线  \nnew Line();//画实线\n```\n\n### 具体效果\n![使用效果](http://img.blog.csdn.net/20161124150745143?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center)\n\n该做法优点是画多条线只增加一个DC,缺点也很明显，颜色单一，线条宽度。。。。试试其他有没有更好的方法吧。\n\n### bug修正\n当画虚线时长度分割正好为单数的时候会和下一条线连在一起，做出修改：\n``` csharp\n\t\tif (length <= 0) { \n\t\t\tDebug.LogError(\"Length canot less than 0 in dashed mode!\"); \n\t\t\treturn;\n\t\t}  \n\t\tVectorLines.instance.Draw(this, () =>  \n\t\t{  \n\t\t    for (int i = 0; i < vectors.Length - 1; i++)  \n\t\t    {  \n\t\t        cur = vectors[i];  \n\t\t        dir = (vectors[i + 1] - vectors[i]).normalized;  \n\t\t        GL.Vertex(cur);  \n\t\t        flag = 1;  \n\t\t        next = cur + dir*length;  \n\t\t        while (Vector3.Distance(next, vectors[i]) < Vector3.Distance(vectors[i + 1], vectors[i]))  \n\t\t        {  \n\t\t            GL.Vertex(next);  \n\t\t            flag++;  \n\t\t            cur = next;  \n\t\t            next = cur + dir*length;  \n\t\t        }  \n\t\t        GL.Vertex(vectors[i+1]);  \n\t\t        flag++;  \n\t\t        if(flag % 2 != 0)  \n\t\t            GL.Vertex(vectors[i + 1]);  \n\t\t    }  \n\t\t});\n```\n\n","source":"_posts/Unity中画实线与虚线.md","raw":"---\ntitle: Unity中画实线与虚线\ndate: 2016-11-24\ntags:\n- 画线\n- Unity\ncategories: UnityScript\n---\n\n以前用过Vectrosity来画过线，但时间久了忘记怎么用了，也忘记能不能画虚线了。试了一下Unity的LineRenderer加上一个材质来画虚线，但是它是把我们的贴图给拉伸覆盖创建出来的mesh的，忘记保存我的实验效果了。。。可能改改Shader还可以用吧。针扎一番后决定自己用GL写，由于Unity中GL与真正的GL有差距，所以虚线费了点事。\n\n### 实现方式\n``` csharp\n\nusing UnityEngine;\nusing System.Collections;\nusing System.Collections.Generic;\n\npublic enum LineType\n{\n    Dashed,\n    Line\n}\n\npublic class VectorLines : MonoBehaviour\n{\n    private static VectorLines inst;\n    public static VectorLines instance\n    {\n        get\n        {\n            if (inst == null)\n            {\n                inst = Camera.main.transform.gameObject.AddComponent<VectorLines>();\n            }\n            return inst;\n        }\n    }\n    private Dictionary<Line, Callback0> lines;\n    private Material lineMaterial;\n\n    void Awake()\n    {\n        lines = new Dictionary<Line, Callback0>();\n        lineMaterial = new Material(\"Shader \\\"Lines/Colored Blended\\\" {\" +\n                \"SubShader { Pass {\" +\n            \"   BindChannels { Bind \\\"Color\\\",color }\" +\n            \"   Blend SrcAlpha OneMinusSrcAlpha\" +\n            \"   ZWrite Off Cull Off Fog { Mode Off }\" +\n            \"} } }\");\n\n        lineMaterial.hideFlags = HideFlags.HideAndDontSave;\n\n        lineMaterial.shader.hideFlags = HideFlags.HideAndDontSave;\n\n    }\n\n    public void Draw(Line line, Callback0 draw)\n    {\n        if (lines.ContainsKey(line)) \n            lines.Remove(line);\n        lines.Add(line, draw);\n    }\n\n    public void Cancel(Line line)\n    {\n        if (lines.ContainsKey(line))\n            lines.Remove(line);\n    }\n\n    void OnPostRender()\n    {\n        if (lines.Count > 0)\n        {\n            lineMaterial.SetPass(0);\n            GL.Begin(GL.LINES);\n            GL.Color(Color.gray);\n            foreach (var line in lines.Values)\n            {\n                line();\n            }\n            GL.End();\n        }\n    }\n}\n\npublic class Line\n{\n    private LineType lineType;\n    private Vector3[] vectors;\n    private float length;\n    private Vector3 dir;\n    private Vector3 next;\n    private Vector3 cur;\n\n    public Line()\n    {\n        lineType = LineType.Line;\n        vectors = new []{Vector3.zero, Vector3.left};\n        length = 1;\n        ReDraw();\n    }\n    public Line(LineType lt, Vector3[] vecs, float len = 0.2f)\n    {\n        lineType = lt;\n        vectors = vecs;\n        length = len;\n        ReDraw();\n    }\n\n    public void SetType(LineType lt)\n    {\n        if(lineType == lt) return;\n        lineType = lt;\n        ReDraw();\n    }\n\n    public void SetVectors(Vector3[] vecs)\n    {\n        if(vectors == vecs) return;\n        vectors = vecs;\n        ReDraw();\n    }\n\n    /// <summary>\n    /// Can use only in dashed mode\n    /// </summary>\n    public void SetLength(float len)\n    {\n        if(length == len) return;\n        length = len;\n        ReDraw();\n    }\n\n    public void Cancel()\n    {\n        VectorLines.instance.Cancel(this);\n    }\n\n    void ReDraw()\n    {\n        if(vectors.Length <= 1) {Debug.LogError(\"vectors' length canot less than 2!\");return;}\n        if (lineType == LineType.Line)\n        {\n            VectorLines.instance.Draw(this, () =>\n            {\n                for (int i = 0; i < vectors.Length -1; i++)\n                {\n                    GL.Vertex(vectors[i]);\n                    GL.Vertex(vectors[i+1]);\n                }\n            });\n        }\n        else if(lineType == LineType.Dashed)\n        {\n            if (length <= 0) { Debug.LogError(\"Length canot less than 0 in dashed mode!\"); return;}\n            VectorLines.instance.Draw(this, () =>\n            {\n                for (int i = 0; i < vectors.Length - 1; i++)\n                {\n                    cur = vectors[i];\n                    dir = (vectors[i + 1] - vectors[i]).normalized;\n                    GL.Vertex(cur);\n                    next = cur + dir*length;\n                    while (Vector3.Distance(next, vectors[i]) < Vector3.Distance(vectors[i + 1], vectors[i]))\n                    {\n                        GL.Vertex(next);\n                        cur = next;\n                        next = cur + dir*length;\n                    }\n                    GL.Vertex(vectors[i+1]);\n                }\n            });\n        }\n    }\n}\n\n```\n\n### 使用方法\n``` csharp\nnew Line(LineType.Dashed, v, 0.2f);//画虚线  \nnew Line();//画实线\n```\n\n### 具体效果\n![使用效果](http://img.blog.csdn.net/20161124150745143?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center)\n\n该做法优点是画多条线只增加一个DC,缺点也很明显，颜色单一，线条宽度。。。。试试其他有没有更好的方法吧。\n\n### bug修正\n当画虚线时长度分割正好为单数的时候会和下一条线连在一起，做出修改：\n``` csharp\n\t\tif (length <= 0) { \n\t\t\tDebug.LogError(\"Length canot less than 0 in dashed mode!\"); \n\t\t\treturn;\n\t\t}  \n\t\tVectorLines.instance.Draw(this, () =>  \n\t\t{  \n\t\t    for (int i = 0; i < vectors.Length - 1; i++)  \n\t\t    {  \n\t\t        cur = vectors[i];  \n\t\t        dir = (vectors[i + 1] - vectors[i]).normalized;  \n\t\t        GL.Vertex(cur);  \n\t\t        flag = 1;  \n\t\t        next = cur + dir*length;  \n\t\t        while (Vector3.Distance(next, vectors[i]) < Vector3.Distance(vectors[i + 1], vectors[i]))  \n\t\t        {  \n\t\t            GL.Vertex(next);  \n\t\t            flag++;  \n\t\t            cur = next;  \n\t\t            next = cur + dir*length;  \n\t\t        }  \n\t\t        GL.Vertex(vectors[i+1]);  \n\t\t        flag++;  \n\t\t        if(flag % 2 != 0)  \n\t\t            GL.Vertex(vectors[i + 1]);  \n\t\t    }  \n\t\t});\n```\n\n","slug":"Unity中画实线与虚线","published":1,"updated":"2017-10-26T09:47:06.492Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj9fm90sy00062cob7ccl1ucl","content":"<p>以前用过Vectrosity来画过线，但时间久了忘记怎么用了，也忘记能不能画虚线了。试了一下Unity的LineRenderer加上一个材质来画虚线，但是它是把我们的贴图给拉伸覆盖创建出来的mesh的，忘记保存我的实验效果了。。。可能改改Shader还可以用吧。针扎一番后决定自己用GL写，由于Unity中GL与真正的GL有差距，所以虚线费了点事。</p>\n<h3 id=\"实现方式\"><a href=\"#实现方式\" class=\"headerlink\" title=\"实现方式\"></a>实现方式</h3><pre class=\"line-numbers language-csharp\"><code class=\"language-csharp\">\n<span class=\"token keyword\">using</span> UnityEngine<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> System<span class=\"token punctuation\">.</span>Collections<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> System<span class=\"token punctuation\">.</span>Collections<span class=\"token punctuation\">.</span>Generic<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">enum</span> LineType\n<span class=\"token punctuation\">{</span>\n    Dashed<span class=\"token punctuation\">,</span>\n    Line\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">VectorLines</span> <span class=\"token punctuation\">:</span> MonoBehaviour\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> VectorLines inst<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> VectorLines instance\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">get</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>inst <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                inst <span class=\"token operator\">=</span> Camera<span class=\"token punctuation\">.</span>main<span class=\"token punctuation\">.</span>transform<span class=\"token punctuation\">.</span>gameObject<span class=\"token punctuation\">.</span><span class=\"token generic-method function\">AddComponent<span class=\"token punctuation\">&lt;</span>VectorLines<span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">return</span> inst<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">private</span> Dictionary<span class=\"token operator\">&lt;</span>Line<span class=\"token punctuation\">,</span> Callback0<span class=\"token operator\">></span> lines<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> Material lineMaterial<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">void</span> <span class=\"token function\">Awake</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        lines <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Dictionary</span><span class=\"token operator\">&lt;</span>Line<span class=\"token punctuation\">,</span> Callback0<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        lineMaterial <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Material</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Shader \\\"Lines/Colored Blended\\\" {\"</span> <span class=\"token operator\">+</span>\n                <span class=\"token string\">\"SubShader { Pass {\"</span> <span class=\"token operator\">+</span>\n            <span class=\"token string\">\"   BindChannels { Bind \\\"Color\\\",color }\"</span> <span class=\"token operator\">+</span>\n            <span class=\"token string\">\"   Blend SrcAlpha OneMinusSrcAlpha\"</span> <span class=\"token operator\">+</span>\n            <span class=\"token string\">\"   ZWrite Off Cull Off Fog { Mode Off }\"</span> <span class=\"token operator\">+</span>\n            <span class=\"token string\">\"} } }\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        lineMaterial<span class=\"token punctuation\">.</span>hideFlags <span class=\"token operator\">=</span> HideFlags<span class=\"token punctuation\">.</span>HideAndDontSave<span class=\"token punctuation\">;</span>\n\n        lineMaterial<span class=\"token punctuation\">.</span>shader<span class=\"token punctuation\">.</span>hideFlags <span class=\"token operator\">=</span> HideFlags<span class=\"token punctuation\">.</span>HideAndDontSave<span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">Draw</span><span class=\"token punctuation\">(</span>Line line<span class=\"token punctuation\">,</span> Callback0 draw<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>lines<span class=\"token punctuation\">.</span><span class=\"token function\">ContainsKey</span><span class=\"token punctuation\">(</span>line<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> \n            lines<span class=\"token punctuation\">.</span><span class=\"token function\">Remove</span><span class=\"token punctuation\">(</span>line<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        lines<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>line<span class=\"token punctuation\">,</span> draw<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">Cancel</span><span class=\"token punctuation\">(</span>Line line<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>lines<span class=\"token punctuation\">.</span><span class=\"token function\">ContainsKey</span><span class=\"token punctuation\">(</span>line<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            lines<span class=\"token punctuation\">.</span><span class=\"token function\">Remove</span><span class=\"token punctuation\">(</span>line<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">void</span> <span class=\"token function\">OnPostRender</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>lines<span class=\"token punctuation\">.</span>Count <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            lineMaterial<span class=\"token punctuation\">.</span><span class=\"token function\">SetPass</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            GL<span class=\"token punctuation\">.</span><span class=\"token function\">Begin</span><span class=\"token punctuation\">(</span>GL<span class=\"token punctuation\">.</span>LINES<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            GL<span class=\"token punctuation\">.</span><span class=\"token function\">Color</span><span class=\"token punctuation\">(</span>Color<span class=\"token punctuation\">.</span>gray<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> line <span class=\"token keyword\">in</span> lines<span class=\"token punctuation\">.</span>Values<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token function\">line</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            GL<span class=\"token punctuation\">.</span><span class=\"token function\">End</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Line</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> LineType lineType<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> Vector3<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> vectors<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">float</span> length<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> Vector3 dir<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> Vector3 next<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> Vector3 cur<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token function\">Line</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        lineType <span class=\"token operator\">=</span> LineType<span class=\"token punctuation\">.</span>Line<span class=\"token punctuation\">;</span>\n        vectors <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">{</span>Vector3<span class=\"token punctuation\">.</span>zero<span class=\"token punctuation\">,</span> Vector3<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        length <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">ReDraw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token function\">Line</span><span class=\"token punctuation\">(</span>LineType lt<span class=\"token punctuation\">,</span> Vector3<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> vecs<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> len <span class=\"token operator\">=</span> <span class=\"token number\">0.2f</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        lineType <span class=\"token operator\">=</span> lt<span class=\"token punctuation\">;</span>\n        vectors <span class=\"token operator\">=</span> vecs<span class=\"token punctuation\">;</span>\n        length <span class=\"token operator\">=</span> len<span class=\"token punctuation\">;</span>\n        <span class=\"token function\">ReDraw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">SetType</span><span class=\"token punctuation\">(</span>LineType lt<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>lineType <span class=\"token operator\">==</span> lt<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        lineType <span class=\"token operator\">=</span> lt<span class=\"token punctuation\">;</span>\n        <span class=\"token function\">ReDraw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">SetVectors</span><span class=\"token punctuation\">(</span>Vector3<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> vecs<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>vectors <span class=\"token operator\">==</span> vecs<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        vectors <span class=\"token operator\">=</span> vecs<span class=\"token punctuation\">;</span>\n        <span class=\"token function\">ReDraw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">/// &lt;summary></span>\n    <span class=\"token comment\" spellcheck=\"true\">/// Can use only in dashed mode</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// &lt;/summary></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">SetLength</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> len<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>length <span class=\"token operator\">==</span> len<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        length <span class=\"token operator\">=</span> len<span class=\"token punctuation\">;</span>\n        <span class=\"token function\">ReDraw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">Cancel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        VectorLines<span class=\"token punctuation\">.</span>instance<span class=\"token punctuation\">.</span><span class=\"token function\">Cancel</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">void</span> <span class=\"token function\">ReDraw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>vectors<span class=\"token punctuation\">.</span>Length <span class=\"token operator\">&lt;=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>Debug<span class=\"token punctuation\">.</span><span class=\"token function\">LogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"vectors' length canot less than 2!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>lineType <span class=\"token operator\">==</span> LineType<span class=\"token punctuation\">.</span>Line<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            VectorLines<span class=\"token punctuation\">.</span>instance<span class=\"token punctuation\">.</span><span class=\"token function\">Draw</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> vectors<span class=\"token punctuation\">.</span>Length <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">{</span>\n                    GL<span class=\"token punctuation\">.</span><span class=\"token function\">Vertex</span><span class=\"token punctuation\">(</span>vectors<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    GL<span class=\"token punctuation\">.</span><span class=\"token function\">Vertex</span><span class=\"token punctuation\">(</span>vectors<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>lineType <span class=\"token operator\">==</span> LineType<span class=\"token punctuation\">.</span>Dashed<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>length <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> Debug<span class=\"token punctuation\">.</span><span class=\"token function\">LogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Length canot less than 0 in dashed mode!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span>\n            VectorLines<span class=\"token punctuation\">.</span>instance<span class=\"token punctuation\">.</span><span class=\"token function\">Draw</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> vectors<span class=\"token punctuation\">.</span>Length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">{</span>\n                    cur <span class=\"token operator\">=</span> vectors<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                    dir <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>vectors<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> vectors<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>normalized<span class=\"token punctuation\">;</span>\n                    GL<span class=\"token punctuation\">.</span><span class=\"token function\">Vertex</span><span class=\"token punctuation\">(</span>cur<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    next <span class=\"token operator\">=</span> cur <span class=\"token operator\">+</span> dir<span class=\"token operator\">*</span>length<span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>Vector3<span class=\"token punctuation\">.</span><span class=\"token function\">Distance</span><span class=\"token punctuation\">(</span>next<span class=\"token punctuation\">,</span> vectors<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> Vector3<span class=\"token punctuation\">.</span><span class=\"token function\">Distance</span><span class=\"token punctuation\">(</span>vectors<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> vectors<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">{</span>\n                        GL<span class=\"token punctuation\">.</span><span class=\"token function\">Vertex</span><span class=\"token punctuation\">(</span>next<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        cur <span class=\"token operator\">=</span> next<span class=\"token punctuation\">;</span>\n                        next <span class=\"token operator\">=</span> cur <span class=\"token operator\">+</span> dir<span class=\"token operator\">*</span>length<span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n                    GL<span class=\"token punctuation\">.</span><span class=\"token function\">Vertex</span><span class=\"token punctuation\">(</span>vectors<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"使用方法\"><a href=\"#使用方法\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h3><pre class=\"line-numbers language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">new</span> <span class=\"token class-name\">Line</span><span class=\"token punctuation\">(</span>LineType<span class=\"token punctuation\">.</span>Dashed<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">,</span> <span class=\"token number\">0.2f</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//画虚线  </span>\n<span class=\"token keyword\">new</span> <span class=\"token class-name\">Line</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//画实线</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h3 id=\"具体效果\"><a href=\"#具体效果\" class=\"headerlink\" title=\"具体效果\"></a>具体效果</h3><p><img src=\"http://img.blog.csdn.net/20161124150745143?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\" alt=\"使用效果\"></p>\n<p>该做法优点是画多条线只增加一个DC,缺点也很明显，颜色单一，线条宽度。。。。试试其他有没有更好的方法吧。</p>\n<h3 id=\"bug修正\"><a href=\"#bug修正\" class=\"headerlink\" title=\"bug修正\"></a>bug修正</h3><p>当画虚线时长度分割正好为单数的时候会和下一条线连在一起，做出修改：</p>\n<pre class=\"line-numbers language-csharp\"><code class=\"language-csharp\">        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>length <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \n            Debug<span class=\"token punctuation\">.</span><span class=\"token function\">LogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Length canot less than 0 in dashed mode!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>  \n        VectorLines<span class=\"token punctuation\">.</span>instance<span class=\"token punctuation\">.</span><span class=\"token function\">Draw</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span>  \n        <span class=\"token punctuation\">{</span>  \n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> vectors<span class=\"token punctuation\">.</span>Length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>  \n            <span class=\"token punctuation\">{</span>  \n                cur <span class=\"token operator\">=</span> vectors<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>  \n                dir <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>vectors<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> vectors<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>normalized<span class=\"token punctuation\">;</span>  \n                GL<span class=\"token punctuation\">.</span><span class=\"token function\">Vertex</span><span class=\"token punctuation\">(</span>cur<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n                flag <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>  \n                next <span class=\"token operator\">=</span> cur <span class=\"token operator\">+</span> dir<span class=\"token operator\">*</span>length<span class=\"token punctuation\">;</span>  \n                <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>Vector3<span class=\"token punctuation\">.</span><span class=\"token function\">Distance</span><span class=\"token punctuation\">(</span>next<span class=\"token punctuation\">,</span> vectors<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> Vector3<span class=\"token punctuation\">.</span><span class=\"token function\">Distance</span><span class=\"token punctuation\">(</span>vectors<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> vectors<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  \n                <span class=\"token punctuation\">{</span>  \n                    GL<span class=\"token punctuation\">.</span><span class=\"token function\">Vertex</span><span class=\"token punctuation\">(</span>next<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n                    flag<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>  \n                    cur <span class=\"token operator\">=</span> next<span class=\"token punctuation\">;</span>  \n                    next <span class=\"token operator\">=</span> cur <span class=\"token operator\">+</span> dir<span class=\"token operator\">*</span>length<span class=\"token punctuation\">;</span>  \n                <span class=\"token punctuation\">}</span>  \n                GL<span class=\"token punctuation\">.</span><span class=\"token function\">Vertex</span><span class=\"token punctuation\">(</span>vectors<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n                flag<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>  \n                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>flag <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>  \n                    GL<span class=\"token punctuation\">.</span><span class=\"token function\">Vertex</span><span class=\"token punctuation\">(</span>vectors<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n            <span class=\"token punctuation\">}</span>  \n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{"gallery":{"美女":{"full_link":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1508912200438&di=d5b3eacf86d8f94c149c6fc68fe4da67&imgtype=0&src=http%3A%2F%2Fpic01.taopic.com%2F151014%2F234732-15101410452229-lp.jpg","thumb_link":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1508912200438&di=d5b3eacf86d8f94c149c6fc68fe4da67&imgtype=0&src=http%3A%2F%2Fpic01.taopic.com%2F151014%2F234732-15101410452229-lp.jpg","descr":"美女插画"}},"links":{"Github":{"link":"https://github.com/garsonlab","avatar":"https://avatars3.githubusercontent.com/u/13958934?s=460&v=4","descr":"My Github","type":"Blog"},"OnLineTools":{"link":"http://tool.lu/","avatar":"http://qn11.tool.lu/201710/15/103320SbM84Ql4tETjg49a_28x28.png","descr":"在线工具","type":"Tools"},"CMDMarkdown":{"link":"https://www.zybuluo.com/","avatar":"https://www.zybuluo.com/static/img/logo.png","descr":"Markdown在线编辑","type":"Tools"},"Hexo文档":{"link":"https://hexo.io/zh-cn/docs/","avatar":"https://hexo.io/logo.svg","descr":"Hexo中文官方文档","type":"Community"},"游戏蛮牛":{"link":"http://www.manew.com/forum.php","avatar":"http://www.manew.com/template/manew2016/images/logo.png","descr":"unity交流社区","type":"Unity"},"FairyGUI":{"link":"http://www.fairygui.com/","avatar":"http://www.fairygui.com/images/20170728151207.png","descr":"FairyGUI官方网站","type":"Site"}},"linktypes":{"Blog":{"name":"关注的博客"},"Unity":{"name":"Unity3D"},"Community":{"name":"浏览的社区"},"Tools":{"name":"工具"},"Site":{"name":"收藏的网址"}}}},"excerpt":"","more":"<p>以前用过Vectrosity来画过线，但时间久了忘记怎么用了，也忘记能不能画虚线了。试了一下Unity的LineRenderer加上一个材质来画虚线，但是它是把我们的贴图给拉伸覆盖创建出来的mesh的，忘记保存我的实验效果了。。。可能改改Shader还可以用吧。针扎一番后决定自己用GL写，由于Unity中GL与真正的GL有差距，所以虚线费了点事。</p>\n<h3 id=\"实现方式\"><a href=\"#实现方式\" class=\"headerlink\" title=\"实现方式\"></a>实现方式</h3><pre><code class=\"csharp\">\nusing UnityEngine;\nusing System.Collections;\nusing System.Collections.Generic;\n\npublic enum LineType\n{\n    Dashed,\n    Line\n}\n\npublic class VectorLines : MonoBehaviour\n{\n    private static VectorLines inst;\n    public static VectorLines instance\n    {\n        get\n        {\n            if (inst == null)\n            {\n                inst = Camera.main.transform.gameObject.AddComponent&lt;VectorLines&gt;();\n            }\n            return inst;\n        }\n    }\n    private Dictionary&lt;Line, Callback0&gt; lines;\n    private Material lineMaterial;\n\n    void Awake()\n    {\n        lines = new Dictionary&lt;Line, Callback0&gt;();\n        lineMaterial = new Material(&quot;Shader \\&quot;Lines/Colored Blended\\&quot; {&quot; +\n                &quot;SubShader { Pass {&quot; +\n            &quot;   BindChannels { Bind \\&quot;Color\\&quot;,color }&quot; +\n            &quot;   Blend SrcAlpha OneMinusSrcAlpha&quot; +\n            &quot;   ZWrite Off Cull Off Fog { Mode Off }&quot; +\n            &quot;} } }&quot;);\n\n        lineMaterial.hideFlags = HideFlags.HideAndDontSave;\n\n        lineMaterial.shader.hideFlags = HideFlags.HideAndDontSave;\n\n    }\n\n    public void Draw(Line line, Callback0 draw)\n    {\n        if (lines.ContainsKey(line)) \n            lines.Remove(line);\n        lines.Add(line, draw);\n    }\n\n    public void Cancel(Line line)\n    {\n        if (lines.ContainsKey(line))\n            lines.Remove(line);\n    }\n\n    void OnPostRender()\n    {\n        if (lines.Count &gt; 0)\n        {\n            lineMaterial.SetPass(0);\n            GL.Begin(GL.LINES);\n            GL.Color(Color.gray);\n            foreach (var line in lines.Values)\n            {\n                line();\n            }\n            GL.End();\n        }\n    }\n}\n\npublic class Line\n{\n    private LineType lineType;\n    private Vector3[] vectors;\n    private float length;\n    private Vector3 dir;\n    private Vector3 next;\n    private Vector3 cur;\n\n    public Line()\n    {\n        lineType = LineType.Line;\n        vectors = new []{Vector3.zero, Vector3.left};\n        length = 1;\n        ReDraw();\n    }\n    public Line(LineType lt, Vector3[] vecs, float len = 0.2f)\n    {\n        lineType = lt;\n        vectors = vecs;\n        length = len;\n        ReDraw();\n    }\n\n    public void SetType(LineType lt)\n    {\n        if(lineType == lt) return;\n        lineType = lt;\n        ReDraw();\n    }\n\n    public void SetVectors(Vector3[] vecs)\n    {\n        if(vectors == vecs) return;\n        vectors = vecs;\n        ReDraw();\n    }\n\n    /// &lt;summary&gt;\n    /// Can use only in dashed mode\n    /// &lt;/summary&gt;\n    public void SetLength(float len)\n    {\n        if(length == len) return;\n        length = len;\n        ReDraw();\n    }\n\n    public void Cancel()\n    {\n        VectorLines.instance.Cancel(this);\n    }\n\n    void ReDraw()\n    {\n        if(vectors.Length &lt;= 1) {Debug.LogError(&quot;vectors&#39; length canot less than 2!&quot;);return;}\n        if (lineType == LineType.Line)\n        {\n            VectorLines.instance.Draw(this, () =&gt;\n            {\n                for (int i = 0; i &lt; vectors.Length -1; i++)\n                {\n                    GL.Vertex(vectors[i]);\n                    GL.Vertex(vectors[i+1]);\n                }\n            });\n        }\n        else if(lineType == LineType.Dashed)\n        {\n            if (length &lt;= 0) { Debug.LogError(&quot;Length canot less than 0 in dashed mode!&quot;); return;}\n            VectorLines.instance.Draw(this, () =&gt;\n            {\n                for (int i = 0; i &lt; vectors.Length - 1; i++)\n                {\n                    cur = vectors[i];\n                    dir = (vectors[i + 1] - vectors[i]).normalized;\n                    GL.Vertex(cur);\n                    next = cur + dir*length;\n                    while (Vector3.Distance(next, vectors[i]) &lt; Vector3.Distance(vectors[i + 1], vectors[i]))\n                    {\n                        GL.Vertex(next);\n                        cur = next;\n                        next = cur + dir*length;\n                    }\n                    GL.Vertex(vectors[i+1]);\n                }\n            });\n        }\n    }\n}\n</code></pre>\n<h3 id=\"使用方法\"><a href=\"#使用方法\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h3><pre><code class=\"csharp\">new Line(LineType.Dashed, v, 0.2f);//画虚线  \nnew Line();//画实线\n</code></pre>\n<h3 id=\"具体效果\"><a href=\"#具体效果\" class=\"headerlink\" title=\"具体效果\"></a>具体效果</h3><p><img src=\"http://img.blog.csdn.net/20161124150745143?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\" alt=\"使用效果\"></p>\n<p>该做法优点是画多条线只增加一个DC,缺点也很明显，颜色单一，线条宽度。。。。试试其他有没有更好的方法吧。</p>\n<h3 id=\"bug修正\"><a href=\"#bug修正\" class=\"headerlink\" title=\"bug修正\"></a>bug修正</h3><p>当画虚线时长度分割正好为单数的时候会和下一条线连在一起，做出修改：</p>\n<pre><code class=\"csharp\">        if (length &lt;= 0) { \n            Debug.LogError(&quot;Length canot less than 0 in dashed mode!&quot;); \n            return;\n        }  \n        VectorLines.instance.Draw(this, () =&gt;  \n        {  \n            for (int i = 0; i &lt; vectors.Length - 1; i++)  \n            {  \n                cur = vectors[i];  \n                dir = (vectors[i + 1] - vectors[i]).normalized;  \n                GL.Vertex(cur);  \n                flag = 1;  \n                next = cur + dir*length;  \n                while (Vector3.Distance(next, vectors[i]) &lt; Vector3.Distance(vectors[i + 1], vectors[i]))  \n                {  \n                    GL.Vertex(next);  \n                    flag++;  \n                    cur = next;  \n                    next = cur + dir*length;  \n                }  \n                GL.Vertex(vectors[i+1]);  \n                flag++;  \n                if(flag % 2 != 0)  \n                    GL.Vertex(vectors[i + 1]);  \n            }  \n        });\n</code></pre>\n"},{"title":"Unity中使用c++","date":"2017-03-12T16:00:00.000Z","_content":"\n\nUnity具有跨平台特性，所以一般若是要使用c++分为四种情况：Windows、Android、MacOS以及IOS，对应使用生成的库文件后缀分别为”.dll”、”.so”、”.bundle”、”.a”；\n\n## 库文件生成\n### DLL\n在Windows下生成dll的方式非常简单，一般来说，对我们这种写代码的来说都会安装vs，直接在vs中新建相应的类库，然后添加你需要的cpp文件和头文件即可。我试了此种方法，但是用vs生成的会包含一些我不需要的头文件等，而我又类似于有洁癖，不想在我需要的代码之外看见其他的，并且，我懒得去除0.0 所以换了一种生成方式——CMake。\n度娘了一下使用方法，各种分文件夹、各种list文件，一阵头疼。我需要编译的文件不多，也就五六个“cpp”，六七个“.h”，所以直接放在了一个文件夹下。层级为：\n\n\tRoot——bin //放置生成dll  \n\t\t|— build//放置cmake生成的工程  \n\t\t|— lib//放置源码  \n\t\t      |—|—CmakeLists.txt  \n\t\t|— CMakeLists.txt  \n\nRoot下CMakeLists.txt的写法：\n\n\tcmake_minimum_required(VERSION3.0)  \n\tPROJECT (Your_Project_Name)  \n\tADD_SUBDIRECTORY(lib)\n 第一行版本，第二行设置自己的工程名，第三行加入lib。\n\nLib下CmakeLists.txt的写法：\n``` bash\n\tset(PROJECT_NAME\" Your_Project_Name \")  \n\tSET(SRC  \n\t    ****.cpp#多个cpp文件按此方式写  \n\t    ****.cpp  \n\t    ****.cpp)  \n\t    ADD_LIBRARY(${PROJECT_NAME} SHARED ${SRC}) #想得到动态库，参数就是SHARED  \n\t    install (  \n\t             TARGETS           ${PROJECT_NAME}  \n\t             DESTINATION\"../bin\"  \n\t             )\n```\n\n接着，打开提前安装的cmake工具（cmake-gui），选择Source Code为Root, binaries选择build，点击左下角Configure按钮，如果出现“CMAKE_INSTALL_PREFIX”最好还是选择Root吧，然后，选择左下角的Generate按钮，Done完之后在build文件夹下用VS打开一个“vcxproj”文件，右键在相应的项目上生成就可以得到DLL。\n\n### SO\n.so文件用于安卓上，所以我们使用Android NDK来编译。在Windows上编译我的环境为ndk+Cygwin，亲自在虚拟机Linux上只需要下载相应的ndk即可。具体的安装配置步骤找度娘即可。\nNDK编译首先需要编写Android.mk文件，具体编写为:\n\n``` bash\n \tLOCAL_PATH:= $(call my-dir)  \n   \n    include $(CLEAR_VARS)  \n   \n    LOCAL_MODULE    := Your_Project_Name  \n    LOCAL_SRC_FILES := \\  \n    ****.cpp \\  \n    ****.cpp \\  \n    ****.cpp \\  \n    ****.cpp  \n   \n    APP_STL := stlport_static  \n    include $(BUILD_SHARED_LIBRARY)\n```\n\n 以上指令只看名字也能猜出大概的意思，把所有源文件和mk文件放在一个文件夹下，下一步就是直接编译了，先切换到指定的目录，CygWin执行指令：$NDK_ROOT/ndk-build，结果并不是我所需要的，提示为：No Such File or Directy #include<vector>\n\n因为我的源文件用了系统的类库，但是在此并没找到，Google说要加上一句:\n``` bash\n\tAPP_STL :=stlport_static  \n```\n然并卵！又试了N中网上盛传的解决方案都没卵用。然后我就看看ndk自带的demo，模仿着又在文件夹下添加了一个Application.mk\n``` bash\nAPP_PLATFORM := android-9  \nAPP_ABI := all  \nAPP_STL := stlport_static  \n```\n\n还有由于很多安全限制，许多函数的接口上，必须用“const”修饰，一般你在vs上是不会报错的…在此会提示：Error: No much function for call ***\n __int64在linux下也会有问题，要改成相应的。\n………一大堆vs下没有的bug来袭…\n然后，没有然后了，就是执行成功了，恭喜你获得.so文件一个。\n（另，在linux下，源文件必须放在小写的jni目录下，否则不识别，我也不造为什么0.0）\n\n\n### bundle\n复制你使用ndk时修改的那一大堆在Windows下不会报错但Android下一大波bug的源文件到你的mac下，使用XCode新建一个MacOS下的bundle项目，代码添加进去，直接build即可。\n\n### a\n使用方式同bundle，在iOS下选择 Cocoa TouchStatic Library 新建，然后拷贝代码，执行，获得.a。\n\n### 注\n另，导出dll时， 在要导出的头文件下首先添加\n``` cpp\n#pragma once  \n#define DllExport  extern \"C\" __declspec( dllexport )//宏定义,  \n```\n\n然后， 在需要导出的类或方法前，添加 **DLLExport**，类似：\n``` cpp\nDllExport MyClass * NewMyClass(); //导出一个方法  \n```\n\n而在除了dll的其他导出上， 不需要以上的定义， 而是在需要导出的类或函数前后做如下的定义写法\n``` cpp\n#pragma once  \n#ifdef __cplusplus  \nextern \"C\" {  \n#endif  \n  \n//要导出的函数或类  \n  \n#ifdef __cplusplus  \n}  \n#endif  \n```\n\n##  使用\n在Unity中创建文件夹“Plugins”，\n###直接把把dll扔进去即可，或者创建个“x86_64”的文件夹装dll。\n###在该文件夹下创建Android/Libs，把生成的armeabi-v7a和x86两个文件夹拷贝进来即可。\n###在该文件夹下创建IOS文件夹，把.a放进去\n###bundle文件同dll一样处理\n###代码\n``` csharp\nconst string DLL_NAME=\"*****\"; //android和ios下类库前会自动加lib的，但此处我们用的是不写的\n[DllImport(DLL_NAME)]\npublic static extern IntPtr Methord();//IntPtr用来接收指针\n[DllImport(DLL_NAME)]\npublic static extern int M1(IntPtrpath);\n[DllImport(DLL_NAME)]\npublic static extern void M2(IntPtr path, int mask=0x01);\n```\n\n导出使用全都类似这样。接着你只需要直接在unity中使用就可以了。","source":"_posts/Unity中使用c++.md","raw":"---\ntitle: Unity中使用c++\ndate: 2017-3-13\ntags:\n- Unity\n- c++\ncategories: UnityScript\n---\n\n\nUnity具有跨平台特性，所以一般若是要使用c++分为四种情况：Windows、Android、MacOS以及IOS，对应使用生成的库文件后缀分别为”.dll”、”.so”、”.bundle”、”.a”；\n\n## 库文件生成\n### DLL\n在Windows下生成dll的方式非常简单，一般来说，对我们这种写代码的来说都会安装vs，直接在vs中新建相应的类库，然后添加你需要的cpp文件和头文件即可。我试了此种方法，但是用vs生成的会包含一些我不需要的头文件等，而我又类似于有洁癖，不想在我需要的代码之外看见其他的，并且，我懒得去除0.0 所以换了一种生成方式——CMake。\n度娘了一下使用方法，各种分文件夹、各种list文件，一阵头疼。我需要编译的文件不多，也就五六个“cpp”，六七个“.h”，所以直接放在了一个文件夹下。层级为：\n\n\tRoot——bin //放置生成dll  \n\t\t|— build//放置cmake生成的工程  \n\t\t|— lib//放置源码  \n\t\t      |—|—CmakeLists.txt  \n\t\t|— CMakeLists.txt  \n\nRoot下CMakeLists.txt的写法：\n\n\tcmake_minimum_required(VERSION3.0)  \n\tPROJECT (Your_Project_Name)  \n\tADD_SUBDIRECTORY(lib)\n 第一行版本，第二行设置自己的工程名，第三行加入lib。\n\nLib下CmakeLists.txt的写法：\n``` bash\n\tset(PROJECT_NAME\" Your_Project_Name \")  \n\tSET(SRC  \n\t    ****.cpp#多个cpp文件按此方式写  \n\t    ****.cpp  \n\t    ****.cpp)  \n\t    ADD_LIBRARY(${PROJECT_NAME} SHARED ${SRC}) #想得到动态库，参数就是SHARED  \n\t    install (  \n\t             TARGETS           ${PROJECT_NAME}  \n\t             DESTINATION\"../bin\"  \n\t             )\n```\n\n接着，打开提前安装的cmake工具（cmake-gui），选择Source Code为Root, binaries选择build，点击左下角Configure按钮，如果出现“CMAKE_INSTALL_PREFIX”最好还是选择Root吧，然后，选择左下角的Generate按钮，Done完之后在build文件夹下用VS打开一个“vcxproj”文件，右键在相应的项目上生成就可以得到DLL。\n\n### SO\n.so文件用于安卓上，所以我们使用Android NDK来编译。在Windows上编译我的环境为ndk+Cygwin，亲自在虚拟机Linux上只需要下载相应的ndk即可。具体的安装配置步骤找度娘即可。\nNDK编译首先需要编写Android.mk文件，具体编写为:\n\n``` bash\n \tLOCAL_PATH:= $(call my-dir)  \n   \n    include $(CLEAR_VARS)  \n   \n    LOCAL_MODULE    := Your_Project_Name  \n    LOCAL_SRC_FILES := \\  \n    ****.cpp \\  \n    ****.cpp \\  \n    ****.cpp \\  \n    ****.cpp  \n   \n    APP_STL := stlport_static  \n    include $(BUILD_SHARED_LIBRARY)\n```\n\n 以上指令只看名字也能猜出大概的意思，把所有源文件和mk文件放在一个文件夹下，下一步就是直接编译了，先切换到指定的目录，CygWin执行指令：$NDK_ROOT/ndk-build，结果并不是我所需要的，提示为：No Such File or Directy #include<vector>\n\n因为我的源文件用了系统的类库，但是在此并没找到，Google说要加上一句:\n``` bash\n\tAPP_STL :=stlport_static  \n```\n然并卵！又试了N中网上盛传的解决方案都没卵用。然后我就看看ndk自带的demo，模仿着又在文件夹下添加了一个Application.mk\n``` bash\nAPP_PLATFORM := android-9  \nAPP_ABI := all  \nAPP_STL := stlport_static  \n```\n\n还有由于很多安全限制，许多函数的接口上，必须用“const”修饰，一般你在vs上是不会报错的…在此会提示：Error: No much function for call ***\n __int64在linux下也会有问题，要改成相应的。\n………一大堆vs下没有的bug来袭…\n然后，没有然后了，就是执行成功了，恭喜你获得.so文件一个。\n（另，在linux下，源文件必须放在小写的jni目录下，否则不识别，我也不造为什么0.0）\n\n\n### bundle\n复制你使用ndk时修改的那一大堆在Windows下不会报错但Android下一大波bug的源文件到你的mac下，使用XCode新建一个MacOS下的bundle项目，代码添加进去，直接build即可。\n\n### a\n使用方式同bundle，在iOS下选择 Cocoa TouchStatic Library 新建，然后拷贝代码，执行，获得.a。\n\n### 注\n另，导出dll时， 在要导出的头文件下首先添加\n``` cpp\n#pragma once  \n#define DllExport  extern \"C\" __declspec( dllexport )//宏定义,  \n```\n\n然后， 在需要导出的类或方法前，添加 **DLLExport**，类似：\n``` cpp\nDllExport MyClass * NewMyClass(); //导出一个方法  \n```\n\n而在除了dll的其他导出上， 不需要以上的定义， 而是在需要导出的类或函数前后做如下的定义写法\n``` cpp\n#pragma once  \n#ifdef __cplusplus  \nextern \"C\" {  \n#endif  \n  \n//要导出的函数或类  \n  \n#ifdef __cplusplus  \n}  \n#endif  \n```\n\n##  使用\n在Unity中创建文件夹“Plugins”，\n###直接把把dll扔进去即可，或者创建个“x86_64”的文件夹装dll。\n###在该文件夹下创建Android/Libs，把生成的armeabi-v7a和x86两个文件夹拷贝进来即可。\n###在该文件夹下创建IOS文件夹，把.a放进去\n###bundle文件同dll一样处理\n###代码\n``` csharp\nconst string DLL_NAME=\"*****\"; //android和ios下类库前会自动加lib的，但此处我们用的是不写的\n[DllImport(DLL_NAME)]\npublic static extern IntPtr Methord();//IntPtr用来接收指针\n[DllImport(DLL_NAME)]\npublic static extern int M1(IntPtrpath);\n[DllImport(DLL_NAME)]\npublic static extern void M2(IntPtr path, int mask=0x01);\n```\n\n导出使用全都类似这样。接着你只需要直接在unity中使用就可以了。","slug":"Unity中使用c++","published":1,"updated":"2017-10-26T10:28:14.102Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj9fm90t200092cobmtspscj4","content":"<p>Unity具有跨平台特性，所以一般若是要使用c++分为四种情况：Windows、Android、MacOS以及IOS，对应使用生成的库文件后缀分别为”.dll”、”.so”、”.bundle”、”.a”；</p>\n<h2 id=\"库文件生成\"><a href=\"#库文件生成\" class=\"headerlink\" title=\"库文件生成\"></a>库文件生成</h2><h3 id=\"DLL\"><a href=\"#DLL\" class=\"headerlink\" title=\"DLL\"></a>DLL</h3><p>在Windows下生成dll的方式非常简单，一般来说，对我们这种写代码的来说都会安装vs，直接在vs中新建相应的类库，然后添加你需要的cpp文件和头文件即可。我试了此种方法，但是用vs生成的会包含一些我不需要的头文件等，而我又类似于有洁癖，不想在我需要的代码之外看见其他的，并且，我懒得去除0.0 所以换了一种生成方式——CMake。<br>度娘了一下使用方法，各种分文件夹、各种list文件，一阵头疼。我需要编译的文件不多，也就五六个“cpp”，六七个“.h”，所以直接放在了一个文件夹下。层级为：</p>\n<pre><code>Root——bin //放置生成dll  \n    |— build//放置cmake生成的工程  \n    |— lib//放置源码  \n          |—|—CmakeLists.txt  \n    |— CMakeLists.txt  \n</code></pre><p>Root下CMakeLists.txt的写法：</p>\n<pre><code>cmake_minimum_required(VERSION3.0)  \nPROJECT (Your_Project_Name)  \nADD_SUBDIRECTORY(lib)\n</code></pre><p> 第一行版本，第二行设置自己的工程名，第三行加入lib。</p>\n<p>Lib下CmakeLists.txt的写法：</p>\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\">    set<span class=\"token punctuation\">(</span>PROJECT_NAME<span class=\"token string\">\" Your_Project_Name \"</span><span class=\"token punctuation\">)</span>  \n    SET<span class=\"token punctuation\">(</span>SRC  \n        ****.cpp<span class=\"token comment\" spellcheck=\"true\">#多个cpp文件按此方式写  </span>\n        ****.cpp  \n        ****.cpp<span class=\"token punctuation\">)</span>  \n        ADD_LIBRARY<span class=\"token punctuation\">(</span><span class=\"token variable\">${PROJECT_NAME}</span> SHARED <span class=\"token variable\">${SRC}</span><span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\">#想得到动态库，参数就是SHARED  </span>\n        <span class=\"token function\">install</span> <span class=\"token punctuation\">(</span>  \n                 TARGETS           <span class=\"token variable\">${PROJECT_NAME}</span>  \n                 DESTINATION<span class=\"token string\">\"../bin\"</span>  \n                 <span class=\"token punctuation\">)</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>接着，打开提前安装的cmake工具（cmake-gui），选择Source Code为Root, binaries选择build，点击左下角Configure按钮，如果出现“CMAKE_INSTALL_PREFIX”最好还是选择Root吧，然后，选择左下角的Generate按钮，Done完之后在build文件夹下用VS打开一个“vcxproj”文件，右键在相应的项目上生成就可以得到DLL。</p>\n<h3 id=\"SO\"><a href=\"#SO\" class=\"headerlink\" title=\"SO\"></a>SO</h3><p>.so文件用于安卓上，所以我们使用Android NDK来编译。在Windows上编译我的环境为ndk+Cygwin，亲自在虚拟机Linux上只需要下载相应的ndk即可。具体的安装配置步骤找度娘即可。<br>NDK编译首先需要编写Android.mk文件，具体编写为:</p>\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\">     LOCAL_PATH:<span class=\"token operator\">=</span> <span class=\"token variable\"><span class=\"token variable\">$(</span>call my-dir<span class=\"token variable\">)</span></span>  \n\n    include <span class=\"token variable\"><span class=\"token variable\">$(</span>CLEAR_VARS<span class=\"token variable\">)</span></span>  \n\n    LOCAL_MODULE    :<span class=\"token operator\">=</span> Your_Project_Name  \n    LOCAL_SRC_FILES :<span class=\"token operator\">=</span> \\  \n    ****.cpp \\  \n    ****.cpp \\  \n    ****.cpp \\  \n    ****.cpp  \n\n    APP_STL :<span class=\"token operator\">=</span> stlport_static  \n    include <span class=\"token variable\"><span class=\"token variable\">$(</span>BUILD_SHARED_LIBRARY<span class=\"token variable\">)</span></span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p> 以上指令只看名字也能猜出大概的意思，把所有源文件和mk文件放在一个文件夹下，下一步就是直接编译了，先切换到指定的目录，CygWin执行指令：$NDK_ROOT/ndk-build，结果并不是我所需要的，提示为：No Such File or Directy #include<vector></vector></p>\n<p>因为我的源文件用了系统的类库，但是在此并没找到，Google说要加上一句:</p>\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\">    APP_STL :<span class=\"token operator\">=</span>stlport_static\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>然并卵！又试了N中网上盛传的解决方案都没卵用。然后我就看看ndk自带的demo，模仿着又在文件夹下添加了一个Application.mk</p>\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\">APP_PLATFORM :<span class=\"token operator\">=</span> android-9  \nAPP_ABI :<span class=\"token operator\">=</span> all  \nAPP_STL :<span class=\"token operator\">=</span> stlport_static\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>还有由于很多安全限制，许多函数的接口上，必须用“const”修饰，一般你在vs上是不会报错的…在此会提示：Error: No much function for call <em>*</em><br> __int64在linux下也会有问题，要改成相应的。<br>………一大堆vs下没有的bug来袭…<br>然后，没有然后了，就是执行成功了，恭喜你获得.so文件一个。<br>（另，在linux下，源文件必须放在小写的jni目录下，否则不识别，我也不造为什么0.0）</p>\n<h3 id=\"bundle\"><a href=\"#bundle\" class=\"headerlink\" title=\"bundle\"></a>bundle</h3><p>复制你使用ndk时修改的那一大堆在Windows下不会报错但Android下一大波bug的源文件到你的mac下，使用XCode新建一个MacOS下的bundle项目，代码添加进去，直接build即可。</p>\n<h3 id=\"a\"><a href=\"#a\" class=\"headerlink\" title=\"a\"></a>a</h3><p>使用方式同bundle，在iOS下选择 Cocoa TouchStatic Library 新建，然后拷贝代码，执行，获得.a。</p>\n<h3 id=\"注\"><a href=\"#注\" class=\"headerlink\" title=\"注\"></a>注</h3><p>另，导出dll时， 在要导出的头文件下首先添加</p>\n<pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\">#<span class=\"token directive keyword\">pragma</span> once  </span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> DllExport  extern \"C\" __declspec( dllexport )</span><span class=\"token comment\" spellcheck=\"true\">//宏定义,</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>然后， 在需要导出的类或方法前，添加 <strong>DLLExport</strong>，类似：</p>\n<pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\">DllExport MyClass <span class=\"token operator\">*</span> <span class=\"token function\">NewMyClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">//导出一个方法</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>而在除了dll的其他导出上， 不需要以上的定义， 而是在需要导出的类或函数前后做如下的定义写法</p>\n<pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\">#<span class=\"token directive keyword\">pragma</span> once  </span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">ifdef</span> __cplusplus  </span>\n<span class=\"token keyword\">extern</span> <span class=\"token string\">\"C\"</span> <span class=\"token punctuation\">{</span>  \n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span>  </span>\n\n<span class=\"token comment\" spellcheck=\"true\">//要导出的函数或类  </span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">ifdef</span> __cplusplus  </span>\n<span class=\"token punctuation\">}</span>  \n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><p>在Unity中创建文件夹“Plugins”，</p>\n<p>###直接把把dll扔进去即可，或者创建个“x86_64”的文件夹装dll。</p>\n<p>###在该文件夹下创建Android/Libs，把生成的armeabi-v7a和x86两个文件夹拷贝进来即可。</p>\n<p>###在该文件夹下创建IOS文件夹，把.a放进去</p>\n<p>###bundle文件同dll一样处理</p>\n<p>###代码</p>\n<pre class=\"line-numbers language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">const</span> <span class=\"token keyword\">string</span> DLL_NAME<span class=\"token operator\">=</span><span class=\"token string\">\"*****\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">//android和ios下类库前会自动加lib的，但此处我们用的是不写的</span>\n<span class=\"token punctuation\">[</span><span class=\"token function\">DllImport</span><span class=\"token punctuation\">(</span>DLL_NAME<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">extern</span> IntPtr <span class=\"token function\">Methord</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//IntPtr用来接收指针</span>\n<span class=\"token punctuation\">[</span><span class=\"token function\">DllImport</span><span class=\"token punctuation\">(</span>DLL_NAME<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">extern</span> <span class=\"token keyword\">int</span> <span class=\"token function\">M1</span><span class=\"token punctuation\">(</span>IntPtrpath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">[</span><span class=\"token function\">DllImport</span><span class=\"token punctuation\">(</span>DLL_NAME<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">extern</span> <span class=\"token keyword\">void</span> <span class=\"token function\">M2</span><span class=\"token punctuation\">(</span>IntPtr path<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> mask<span class=\"token operator\">=</span><span class=\"token number\">0x01</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>导出使用全都类似这样。接着你只需要直接在unity中使用就可以了。</p>\n","site":{"data":{"gallery":{"美女":{"full_link":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1508912200438&di=d5b3eacf86d8f94c149c6fc68fe4da67&imgtype=0&src=http%3A%2F%2Fpic01.taopic.com%2F151014%2F234732-15101410452229-lp.jpg","thumb_link":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1508912200438&di=d5b3eacf86d8f94c149c6fc68fe4da67&imgtype=0&src=http%3A%2F%2Fpic01.taopic.com%2F151014%2F234732-15101410452229-lp.jpg","descr":"美女插画"}},"links":{"Github":{"link":"https://github.com/garsonlab","avatar":"https://avatars3.githubusercontent.com/u/13958934?s=460&v=4","descr":"My Github","type":"Blog"},"OnLineTools":{"link":"http://tool.lu/","avatar":"http://qn11.tool.lu/201710/15/103320SbM84Ql4tETjg49a_28x28.png","descr":"在线工具","type":"Tools"},"CMDMarkdown":{"link":"https://www.zybuluo.com/","avatar":"https://www.zybuluo.com/static/img/logo.png","descr":"Markdown在线编辑","type":"Tools"},"Hexo文档":{"link":"https://hexo.io/zh-cn/docs/","avatar":"https://hexo.io/logo.svg","descr":"Hexo中文官方文档","type":"Community"},"游戏蛮牛":{"link":"http://www.manew.com/forum.php","avatar":"http://www.manew.com/template/manew2016/images/logo.png","descr":"unity交流社区","type":"Unity"},"FairyGUI":{"link":"http://www.fairygui.com/","avatar":"http://www.fairygui.com/images/20170728151207.png","descr":"FairyGUI官方网站","type":"Site"}},"linktypes":{"Blog":{"name":"关注的博客"},"Unity":{"name":"Unity3D"},"Community":{"name":"浏览的社区"},"Tools":{"name":"工具"},"Site":{"name":"收藏的网址"}}}},"excerpt":"","more":"<p>Unity具有跨平台特性，所以一般若是要使用c++分为四种情况：Windows、Android、MacOS以及IOS，对应使用生成的库文件后缀分别为”.dll”、”.so”、”.bundle”、”.a”；</p>\n<h2 id=\"库文件生成\"><a href=\"#库文件生成\" class=\"headerlink\" title=\"库文件生成\"></a>库文件生成</h2><h3 id=\"DLL\"><a href=\"#DLL\" class=\"headerlink\" title=\"DLL\"></a>DLL</h3><p>在Windows下生成dll的方式非常简单，一般来说，对我们这种写代码的来说都会安装vs，直接在vs中新建相应的类库，然后添加你需要的cpp文件和头文件即可。我试了此种方法，但是用vs生成的会包含一些我不需要的头文件等，而我又类似于有洁癖，不想在我需要的代码之外看见其他的，并且，我懒得去除0.0 所以换了一种生成方式——CMake。<br>度娘了一下使用方法，各种分文件夹、各种list文件，一阵头疼。我需要编译的文件不多，也就五六个“cpp”，六七个“.h”，所以直接放在了一个文件夹下。层级为：</p>\n<pre><code>Root——bin //放置生成dll  \n    |— build//放置cmake生成的工程  \n    |— lib//放置源码  \n          |—|—CmakeLists.txt  \n    |— CMakeLists.txt  \n</code></pre><p>Root下CMakeLists.txt的写法：</p>\n<pre><code>cmake_minimum_required(VERSION3.0)  \nPROJECT (Your_Project_Name)  \nADD_SUBDIRECTORY(lib)\n</code></pre><p> 第一行版本，第二行设置自己的工程名，第三行加入lib。</p>\n<p>Lib下CmakeLists.txt的写法：</p>\n<pre><code class=\"bash\">    set(PROJECT_NAME&quot; Your_Project_Name &quot;)  \n    SET(SRC  \n        ****.cpp#多个cpp文件按此方式写  \n        ****.cpp  \n        ****.cpp)  \n        ADD_LIBRARY(${PROJECT_NAME} SHARED ${SRC}) #想得到动态库，参数就是SHARED  \n        install (  \n                 TARGETS           ${PROJECT_NAME}  \n                 DESTINATION&quot;../bin&quot;  \n                 )\n</code></pre>\n<p>接着，打开提前安装的cmake工具（cmake-gui），选择Source Code为Root, binaries选择build，点击左下角Configure按钮，如果出现“CMAKE_INSTALL_PREFIX”最好还是选择Root吧，然后，选择左下角的Generate按钮，Done完之后在build文件夹下用VS打开一个“vcxproj”文件，右键在相应的项目上生成就可以得到DLL。</p>\n<h3 id=\"SO\"><a href=\"#SO\" class=\"headerlink\" title=\"SO\"></a>SO</h3><p>.so文件用于安卓上，所以我们使用Android NDK来编译。在Windows上编译我的环境为ndk+Cygwin，亲自在虚拟机Linux上只需要下载相应的ndk即可。具体的安装配置步骤找度娘即可。<br>NDK编译首先需要编写Android.mk文件，具体编写为:</p>\n<pre><code class=\"bash\">     LOCAL_PATH:= $(call my-dir)  \n\n    include $(CLEAR_VARS)  \n\n    LOCAL_MODULE    := Your_Project_Name  \n    LOCAL_SRC_FILES := \\  \n    ****.cpp \\  \n    ****.cpp \\  \n    ****.cpp \\  \n    ****.cpp  \n\n    APP_STL := stlport_static  \n    include $(BUILD_SHARED_LIBRARY)\n</code></pre>\n<p> 以上指令只看名字也能猜出大概的意思，把所有源文件和mk文件放在一个文件夹下，下一步就是直接编译了，先切换到指定的目录，CygWin执行指令：$NDK_ROOT/ndk-build，结果并不是我所需要的，提示为：No Such File or Directy #include<vector></vector></p>\n<p>因为我的源文件用了系统的类库，但是在此并没找到，Google说要加上一句:</p>\n<pre><code class=\"bash\">    APP_STL :=stlport_static\n</code></pre>\n<p>然并卵！又试了N中网上盛传的解决方案都没卵用。然后我就看看ndk自带的demo，模仿着又在文件夹下添加了一个Application.mk</p>\n<pre><code class=\"bash\">APP_PLATFORM := android-9  \nAPP_ABI := all  \nAPP_STL := stlport_static\n</code></pre>\n<p>还有由于很多安全限制，许多函数的接口上，必须用“const”修饰，一般你在vs上是不会报错的…在此会提示：Error: No much function for call <em>*</em><br> __int64在linux下也会有问题，要改成相应的。<br>………一大堆vs下没有的bug来袭…<br>然后，没有然后了，就是执行成功了，恭喜你获得.so文件一个。<br>（另，在linux下，源文件必须放在小写的jni目录下，否则不识别，我也不造为什么0.0）</p>\n<h3 id=\"bundle\"><a href=\"#bundle\" class=\"headerlink\" title=\"bundle\"></a>bundle</h3><p>复制你使用ndk时修改的那一大堆在Windows下不会报错但Android下一大波bug的源文件到你的mac下，使用XCode新建一个MacOS下的bundle项目，代码添加进去，直接build即可。</p>\n<h3 id=\"a\"><a href=\"#a\" class=\"headerlink\" title=\"a\"></a>a</h3><p>使用方式同bundle，在iOS下选择 Cocoa TouchStatic Library 新建，然后拷贝代码，执行，获得.a。</p>\n<h3 id=\"注\"><a href=\"#注\" class=\"headerlink\" title=\"注\"></a>注</h3><p>另，导出dll时， 在要导出的头文件下首先添加</p>\n<pre><code class=\"cpp\">#pragma once  \n#define DllExport  extern &quot;C&quot; __declspec( dllexport )//宏定义,\n</code></pre>\n<p>然后， 在需要导出的类或方法前，添加 <strong>DLLExport</strong>，类似：</p>\n<pre><code class=\"cpp\">DllExport MyClass * NewMyClass(); //导出一个方法\n</code></pre>\n<p>而在除了dll的其他导出上， 不需要以上的定义， 而是在需要导出的类或函数前后做如下的定义写法</p>\n<pre><code class=\"cpp\">#pragma once  \n#ifdef __cplusplus  \nextern &quot;C&quot; {  \n#endif  \n\n//要导出的函数或类  \n\n#ifdef __cplusplus  \n}  \n#endif\n</code></pre>\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><p>在Unity中创建文件夹“Plugins”，</p>\n<p>###直接把把dll扔进去即可，或者创建个“x86_64”的文件夹装dll。</p>\n<p>###在该文件夹下创建Android/Libs，把生成的armeabi-v7a和x86两个文件夹拷贝进来即可。</p>\n<p>###在该文件夹下创建IOS文件夹，把.a放进去</p>\n<p>###bundle文件同dll一样处理</p>\n<p>###代码</p>\n<pre><code class=\"csharp\">const string DLL_NAME=&quot;*****&quot;; //android和ios下类库前会自动加lib的，但此处我们用的是不写的\n[DllImport(DLL_NAME)]\npublic static extern IntPtr Methord();//IntPtr用来接收指针\n[DllImport(DLL_NAME)]\npublic static extern int M1(IntPtrpath);\n[DllImport(DLL_NAME)]\npublic static extern void M2(IntPtr path, int mask=0x01);\n</code></pre>\n<p>导出使用全都类似这样。接着你只需要直接在unity中使用就可以了。</p>\n"},{"title":"XML 解析生成工具","date":"2017-02-28T16:00:00.000Z","_content":"\n轻量级的XML解析生成工具，具体使用如注释。\n\n``` csharp\n\nusing System;\nusing System.Collections;\nusing System.Collections.Generic;\nusing System.Text;\nusing UnityEngine;\n\n/*----------------------------------------------------------------\n// Copyright (C) 2017\n//\n// 模块名：轻量级XML工具\n// 创建者：Cheng\n// 修改者列表：\n// 创建日期：2/28/2017\n// 模块描述：\n//----------------------------------------------------------------*/\nnamespace Garson\n{\n    public class XML\n    {\n        private XmlNode root;\n        public XML() { }\n\n        public XML(string xml)\n        {\n            Parse(xml);\n        }\n\n        /// <summary>\n        /// 从根节点获取Element\n        /// </summary>\n        /// <param name=\"path\">路径，eg:\"Root/Node/Element\"</param>\n        /// <returns></returns>\n        public XmlNode GetElement(string path)\n        {\n            string[] paths = path.Split('/');\n            var p = root;\n            for (int i = 0; i < paths.Length; i++)\n            {\n                p = p.GetElement(paths[i]);\n                if(p == null)\n                    break;\n            }\n            return p;\n        }\n\n        /// <summary>\n        /// 在指定节点下插入新元素\n        /// </summary>\n        /// <param name=\"path\">如果path为空则插入在根节点</param>\n        /// <param name=\"name\">新节点名称</param>\n        /// <returns></returns>\n        public XmlNode AddNode(string path, string name)\n        {\n            if(root == null)\n                root = new XmlNode();\n            if (string.IsNullOrEmpty(path))\n            {\n                XmlNode node = new XmlNode {name = name};\n                root.AddChild(node);\n                return node;\n            }\n            else\n            {\n                var parent = GetElement(path);\n                if (parent == null)\n                {\n                    Debug.LogError(\"Error: Cannot find path:\" + path);\n                    return null;\n                }\n                XmlNode node = new XmlNode();\n                node.name = name;\n                parent.AddChild(node);\n                return node;\n            }\n        }\n\n        /// <summary>\n        /// 在指定路径下插入新节点\n        /// </summary>\n        /// <param name=\"path\">如果路径不存在，会创建相应的节点</param>\n        /// <param name=\"name\">新节点名称</param>\n        /// <returns></returns>\n        public XmlNode AddNodeIgnorePath(string path, string name)\n        {\n            if (root == null)\n                root = new XmlNode();\n\n            string[] paths = path.Split('/');\n            var p = root;\n            for (int i = 0; i < paths.Length; i++)\n            {\n                var c = p.GetElement(paths[i]);\n                if (p == null)\n                {\n                    c = new XmlNode(){name = paths[i]};\n                    p.AddChild(c);\n                }\n                p = c;\n            }\n\n            var node = new XmlNode(){name = name};\n            p.AddChild(node);\n            return node;\n        }\n\n        /// <summary>\n        /// 添加属性\n        /// </summary>\n        /// <param name=\"path\">该路径下的节点</param>\n        /// <param name=\"key\">属性名</param>\n        /// <param name=\"value\">属性值</param>\n        /// <returns></returns>\n        public bool AddAttribute(string path, string key, string value)\n        {\n            var p = GetElement(path);\n            if (p == null) return false;\n            p.AddAttribute(key, value);\n            return true;\n        }\n\n        public override string ToString()\n        {\n            return Print();\n        }\n\n        /// <summary>\n        /// 把XML转化成字符串\n        /// </summary>\n        /// <returns></returns>\n        public string Print()\n        {\n            StringBuilder stringBuilder = new StringBuilder();\n            stringBuilder.AppendLine(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\");\n\n            var elements = root.GetElements();\n            foreach (var element in elements)\n            {\n                BuildString(stringBuilder, element, 0);\n            }\n            return stringBuilder.ToString();\n        }\n\n        /// <summary>\n        /// 递归调用\n        /// </summary>\n        /// <param name=\"stringBuilder\"></param>\n        /// <param name=\"element\"></param>\n        /// <param name=\"tab\">每行前加制表符个数</param>\n        private void BuildString(StringBuilder stringBuilder, XmlNode element, int tab)\n        {\n            for (int i = 0; i < tab; i++)\n            {\n                stringBuilder.Append(\"\\t\");\n            }\n            stringBuilder.Append(\"<\");\n            stringBuilder.Append(element.name);\n            if (element.HasAttribute())\n            {\n                stringBuilder.Append(\" \");\n                var attrs = element.GetAttributes();\n                foreach (var key in attrs.Keys)\n                {\n                    stringBuilder.Append(key);\n                    stringBuilder.Append(\"=\\\"\");\n                    stringBuilder.Append(attrs[key]);\n                    stringBuilder.Append(\"\\\" \");\n                }\n            }\n            if (element.HasChild())\n            {\n                stringBuilder.AppendLine(\">\");\n                var childern = element.GetElements();\n                foreach (var child in childern)\n                {\n                    BuildString(stringBuilder, child, tab+1);\n                }\n                for (int i = 0; i < tab; i++)\n                {\n                    stringBuilder.Append(\"\\t\");\n                }\n                stringBuilder.AppendLine(\"</\" + element.name + \">\");\n            }\n            else if (!string.IsNullOrEmpty(element.text))\n            {\n                stringBuilder.Append(\">\");\n                stringBuilder.Append(element.text);\n                stringBuilder.AppendLine(\"</\" + element.name + \">\");\n            }\n            else\n            {\n                stringBuilder.AppendLine(\" />\");\n            }\n        }\n\n        private const char LT = '<';\n        private const char GT = '>';\n        private const char DASH = '-';\n        private const char SPACE = ' ';\n        private const char QUOTE = '\"';\n        private const char SLASH = '/';\n        private const char QMARK = '?';\n        private const char EQUALS = '=';\n        private const char EXCLAMATION = '!';\n\n        private enum ElementType\n        {\n            /// <summary>\n            /// 元标签\n            /// </summary>\n            METATAG,\n            /// <summary>\n            /// 注释\n            /// </summary>\n            COMMENT,\n            /// <summary>\n            /// 声明\n            /// </summary>\n            DOCTYPE,\n            /// <summary>\n            /// 字符数据\n            /// </summary>\n            CDATA,\n            /// <summary>\n            /// 空\n            /// </summary>\n            NONE,\n        }\n\n        /// <summary>\n        /// Xml解析，会覆盖已存在的XML\n        /// </summary>\n        /// <param name=\"xml\"></param>\n        public void Parse(string xml)\n        {\n            if(string.IsNullOrEmpty(xml))\n                return;\n            xml = xml.Replace(\"\\n\", \" \");\n            root = new XmlNode();\n\n            ElementType cType = ElementType.NONE;\n            \n            char c; //current char\n            char cp; //c previous\n            char cn; //c next\n            char cnn; // c next next\n            Stack<XmlNode> xmlStack = new Stack<XmlNode>();\n            xmlStack.Push(root);\n            int length = xml.Length;\n            bool collectingName = false;\n            bool collectingAttribute = false;\n            string name = \"\";\n            string attr = \"\";\n\n            for (int i = 0; i < length; i++)\n            {\n                c = cp = cn = cnn = '\\0';\n                c = xml[i];\n                if (i > 0) cp = xml[i - 1];\n                if (i + 1 < length) cn = xml[i + 1];\n                if (i + 2 < length) cnn = xml[i + 2];\n\n                if (cType == ElementType.NONE)\n                {\n                    if (c == LT)\n                    {\n                        if (xmlStack.Count > 0)\n                        {\n                            if (!string.IsNullOrEmpty(name.Trim()))// top ele's text eg.<aa>****</aa>\n                            {\n                                var node = xmlStack.Peek();\n                                node.text = name.Trim();\n                            }\n                        }\n                        name = \"\";\n\n                        if (cn == QMARK)//<?*****?>\n                        {\n                            cType = ElementType.METATAG;\n                            i++;\n                            continue;\n                        }\n                        if (cn == EXCLAMATION && cnn == DASH)//<!-->\n                        {\n                            cType = ElementType.COMMENT;\n                            i++;\n                            continue;\n                        }\n                        if (cn == EXCLAMATION)//<![[*******>\n                        {\n                            cType = ElementType.DOCTYPE;\n                            i++;\n                            continue;\n                        }\n\n                        if (cn == SLASH)//</***>\n                        {\n                            cType = ElementType.CDATA;\n                            continue;\n                        }\n                        //create new\n                        cType = ElementType.CDATA;\n                        collectingName = false;\n                        collectingAttribute = false;\n                        name = \"\";\n                        attr = \"\";\n                        XmlNode xmlNode = new XmlNode();\n                        if (xmlStack.Count > 0)\n                        {\n                            var parent = xmlStack.Peek();\n                            parent.AddChild(xmlNode);\n                        }\n                        xmlStack.Push(xmlNode);\n                        continue;\n                    }\n                    else\n                    {\n                        name += c;\n                    }\n                }\n\n                if (cType == ElementType.METATAG)\n                {\n                    if (c == QMARK && cn == GT)\n                    {\n                        i++;\n                        cType = ElementType.NONE;\n                        continue;\n                    }\n                    else\n                        continue;\n                }\n                if (cType == ElementType.COMMENT)\n                {\n                    if (c == DASH && cn == DASH && cnn == GT)\n                    {\n                        i += 2;\n                        cType = ElementType.NONE;\n                        continue;\n                    }\n                    else\n                        continue;\n                }\n                if (cType == ElementType.DOCTYPE)\n                {\n                    if (c == GT) cType = ElementType.NONE;\n                    continue;\n                }\n\n                if (cType == ElementType.CDATA)\n                {\n                    if (collectingName)\n                    {\n                        if (c == SPACE || c == GT)\n                        {\n                            var node = xmlStack.Peek();\n                            if (string.IsNullOrEmpty(node.name))\n                            {\n                                node.name = name.Trim();\n                                collectingName = false;\n                                name = \"\";\n                            }\n                            if (c == GT)\n                            {\n                                cType = ElementType.NONE;\n                                continue;\n                            }\n                            \n                        }\n                        else if (c == SLASH && cn == GT)\n                        {\n                            var node = xmlStack.Peek();\n                            node.name = name.Trim();\n                            collectingName = false;\n                            cType = ElementType.NONE;\n                            name = \"\";\n                            i++;\n\n                            xmlStack.Pop();\n                            continue;\n                        }\n                        else if (c == EQUALS)\n                        {\n                            if (cn == QUOTE)\n                            {\n                                collectingName = false;\n                                collectingAttribute = true;\n                                attr = \"\";\n                                i++;\n                                continue;\n                            }\n                            else\n                                Debug.LogError(\"Error: Attribute '\\\"' is not near '=' in char index:\" + i );\n                        }\n                        else\n                        {\n                            name += c;\n                        }\n                    }\n                    else if(collectingAttribute)\n                    {\n                        if (c == QUOTE)\n                        {\n                            collectingAttribute = false;\n                            var node = xmlStack.Peek();\n                            node.AddAttribute(name.Trim(), attr);\n                            name = \"\";\n                            attr = \"\";\n                        }\n                        else\n                        {\n                            attr += c;\n                        }\n                    }\n                    else\n                    {\n                        if(c == SPACE) continue;\n\n                        if (c == GT)\n                        {\n                            cType = ElementType.NONE;\n                            continue;\n                        }\n\n                        if (c == SLASH && cn == GT)\n                        {\n                            cType = ElementType.NONE;\n                            xmlStack.Pop();\n                            i++;\n                            continue;\n                        }\n\n                        if (c == SLASH)\n                        {\n                            name = \"\";\n                            int j = i + 1;\n                            for (; j < length; j++)\n                            {\n                                if (xml[j] == GT)\n                                {\n                                    break;\n                                }\n                                else\n                                {\n                                    name += xml[j];\n                                }\n                            }\n\n                            var node = xmlStack.Peek();\n                            if (node.name.Equals(name))\n                            {\n                                xmlStack.Pop();\n                            }\n                            else\n                            {\n                                Debug.LogError(\"Error: current is /, name is \"+ name + \", but top node name is \"+ node.name );\n                            }\n                            i = j;\n                            cType = ElementType.NONE;\n                            name = \"\";\n                            continue;\n                        }\n\n                        name += c;\n                        collectingName = true;\n                    }\n                }\n            }\n        }\n\n    }\n\n\n    public class XmlNode\n    {\n        public string text { get; set; }\n        public string name { get; set; }\n        private List<XmlNode> children;\n        private Dictionary<string, string> attributes;\n\n        public XmlNode()\n        {\n            children = new List<XmlNode>();\n            attributes = new Dictionary<string, string>();\n            name = string.Empty;\n            text = string.Empty;\n        }\n\n        public bool HasChild()\n        {\n            return children.Count > 0;\n        }\n\n        public bool HasAttribute()\n        {\n            return attributes.Count > 0;\n        }\n\n        public void AddChild(XmlNode child)\n        {\n            children.Add(child);\n        }\n\n        /// <summary>\n        /// 移除子节点\n        /// </summary>\n        /// <param name=\"index\">从0开始的下标</param>\n        /// <returns></returns>\n        public XmlNode RemoveChild(int index)\n        {\n            if (children.Count > index)\n            {\n                var node = children[index];\n                children.RemoveAt(index);\n                return node;\n            }\n            return null;\n        }\n\n        /// <summary>\n        /// 添加属性，已存在则会覆盖\n        /// </summary>\n        /// <param name=\"key\"></param>\n        /// <param name=\"value\"></param>\n        public void AddAttribute(string key, string value)\n        {\n            if (attributes.ContainsKey(key))\n                attributes[key] = value;\n            else\n                attributes.Add(key, value);\n        }\n\n        public void RemoveAttribute(string key)\n        {\n            attributes.Remove(key);\n        }\n\n        /// <summary>\n        /// 获取节点\n        /// </summary>\n        /// <param name=\"index\">从0开始的下标</param>\n        /// <returns></returns>\n        public XmlNode GetElement(int index)\n        {\n            if (children.Count > index)\n                return children[index];\n            return null;\n        }\n\n        public XmlNode GetElement(string cname)\n        {\n            foreach (var child in children)\n            {\n                if (child.name.Equals(cname))\n                    return child;\n            }\n            return null;\n        }\n\n        public List<XmlNode> GetElements()\n        {\n            return children;\n        }\n\n        public string GetAttribute(string key)\n        {\n            if (attributes.ContainsKey(key))\n                return attributes[key];\n            return string.Empty;\n        }\n\n        public Dictionary<string, string> GetAttributes()\n        {\n            return attributes;\n        }\n\n        public string[] GetAttributeArray(string key)\n        {\n            string value = GetAttribute(key);\n            return value.Split(',');\n        }\n    }\n}\n```\n\n可能会有坑，但是我自己还没遇到...","source":"_posts/XML 解析生成工具.md","raw":"---\ntitle: XML 解析生成工具\ndate: 2017-3-1\ntags:\n- xml解析\ncategories: UnityScript\n---\n\n轻量级的XML解析生成工具，具体使用如注释。\n\n``` csharp\n\nusing System;\nusing System.Collections;\nusing System.Collections.Generic;\nusing System.Text;\nusing UnityEngine;\n\n/*----------------------------------------------------------------\n// Copyright (C) 2017\n//\n// 模块名：轻量级XML工具\n// 创建者：Cheng\n// 修改者列表：\n// 创建日期：2/28/2017\n// 模块描述：\n//----------------------------------------------------------------*/\nnamespace Garson\n{\n    public class XML\n    {\n        private XmlNode root;\n        public XML() { }\n\n        public XML(string xml)\n        {\n            Parse(xml);\n        }\n\n        /// <summary>\n        /// 从根节点获取Element\n        /// </summary>\n        /// <param name=\"path\">路径，eg:\"Root/Node/Element\"</param>\n        /// <returns></returns>\n        public XmlNode GetElement(string path)\n        {\n            string[] paths = path.Split('/');\n            var p = root;\n            for (int i = 0; i < paths.Length; i++)\n            {\n                p = p.GetElement(paths[i]);\n                if(p == null)\n                    break;\n            }\n            return p;\n        }\n\n        /// <summary>\n        /// 在指定节点下插入新元素\n        /// </summary>\n        /// <param name=\"path\">如果path为空则插入在根节点</param>\n        /// <param name=\"name\">新节点名称</param>\n        /// <returns></returns>\n        public XmlNode AddNode(string path, string name)\n        {\n            if(root == null)\n                root = new XmlNode();\n            if (string.IsNullOrEmpty(path))\n            {\n                XmlNode node = new XmlNode {name = name};\n                root.AddChild(node);\n                return node;\n            }\n            else\n            {\n                var parent = GetElement(path);\n                if (parent == null)\n                {\n                    Debug.LogError(\"Error: Cannot find path:\" + path);\n                    return null;\n                }\n                XmlNode node = new XmlNode();\n                node.name = name;\n                parent.AddChild(node);\n                return node;\n            }\n        }\n\n        /// <summary>\n        /// 在指定路径下插入新节点\n        /// </summary>\n        /// <param name=\"path\">如果路径不存在，会创建相应的节点</param>\n        /// <param name=\"name\">新节点名称</param>\n        /// <returns></returns>\n        public XmlNode AddNodeIgnorePath(string path, string name)\n        {\n            if (root == null)\n                root = new XmlNode();\n\n            string[] paths = path.Split('/');\n            var p = root;\n            for (int i = 0; i < paths.Length; i++)\n            {\n                var c = p.GetElement(paths[i]);\n                if (p == null)\n                {\n                    c = new XmlNode(){name = paths[i]};\n                    p.AddChild(c);\n                }\n                p = c;\n            }\n\n            var node = new XmlNode(){name = name};\n            p.AddChild(node);\n            return node;\n        }\n\n        /// <summary>\n        /// 添加属性\n        /// </summary>\n        /// <param name=\"path\">该路径下的节点</param>\n        /// <param name=\"key\">属性名</param>\n        /// <param name=\"value\">属性值</param>\n        /// <returns></returns>\n        public bool AddAttribute(string path, string key, string value)\n        {\n            var p = GetElement(path);\n            if (p == null) return false;\n            p.AddAttribute(key, value);\n            return true;\n        }\n\n        public override string ToString()\n        {\n            return Print();\n        }\n\n        /// <summary>\n        /// 把XML转化成字符串\n        /// </summary>\n        /// <returns></returns>\n        public string Print()\n        {\n            StringBuilder stringBuilder = new StringBuilder();\n            stringBuilder.AppendLine(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\");\n\n            var elements = root.GetElements();\n            foreach (var element in elements)\n            {\n                BuildString(stringBuilder, element, 0);\n            }\n            return stringBuilder.ToString();\n        }\n\n        /// <summary>\n        /// 递归调用\n        /// </summary>\n        /// <param name=\"stringBuilder\"></param>\n        /// <param name=\"element\"></param>\n        /// <param name=\"tab\">每行前加制表符个数</param>\n        private void BuildString(StringBuilder stringBuilder, XmlNode element, int tab)\n        {\n            for (int i = 0; i < tab; i++)\n            {\n                stringBuilder.Append(\"\\t\");\n            }\n            stringBuilder.Append(\"<\");\n            stringBuilder.Append(element.name);\n            if (element.HasAttribute())\n            {\n                stringBuilder.Append(\" \");\n                var attrs = element.GetAttributes();\n                foreach (var key in attrs.Keys)\n                {\n                    stringBuilder.Append(key);\n                    stringBuilder.Append(\"=\\\"\");\n                    stringBuilder.Append(attrs[key]);\n                    stringBuilder.Append(\"\\\" \");\n                }\n            }\n            if (element.HasChild())\n            {\n                stringBuilder.AppendLine(\">\");\n                var childern = element.GetElements();\n                foreach (var child in childern)\n                {\n                    BuildString(stringBuilder, child, tab+1);\n                }\n                for (int i = 0; i < tab; i++)\n                {\n                    stringBuilder.Append(\"\\t\");\n                }\n                stringBuilder.AppendLine(\"</\" + element.name + \">\");\n            }\n            else if (!string.IsNullOrEmpty(element.text))\n            {\n                stringBuilder.Append(\">\");\n                stringBuilder.Append(element.text);\n                stringBuilder.AppendLine(\"</\" + element.name + \">\");\n            }\n            else\n            {\n                stringBuilder.AppendLine(\" />\");\n            }\n        }\n\n        private const char LT = '<';\n        private const char GT = '>';\n        private const char DASH = '-';\n        private const char SPACE = ' ';\n        private const char QUOTE = '\"';\n        private const char SLASH = '/';\n        private const char QMARK = '?';\n        private const char EQUALS = '=';\n        private const char EXCLAMATION = '!';\n\n        private enum ElementType\n        {\n            /// <summary>\n            /// 元标签\n            /// </summary>\n            METATAG,\n            /// <summary>\n            /// 注释\n            /// </summary>\n            COMMENT,\n            /// <summary>\n            /// 声明\n            /// </summary>\n            DOCTYPE,\n            /// <summary>\n            /// 字符数据\n            /// </summary>\n            CDATA,\n            /// <summary>\n            /// 空\n            /// </summary>\n            NONE,\n        }\n\n        /// <summary>\n        /// Xml解析，会覆盖已存在的XML\n        /// </summary>\n        /// <param name=\"xml\"></param>\n        public void Parse(string xml)\n        {\n            if(string.IsNullOrEmpty(xml))\n                return;\n            xml = xml.Replace(\"\\n\", \" \");\n            root = new XmlNode();\n\n            ElementType cType = ElementType.NONE;\n            \n            char c; //current char\n            char cp; //c previous\n            char cn; //c next\n            char cnn; // c next next\n            Stack<XmlNode> xmlStack = new Stack<XmlNode>();\n            xmlStack.Push(root);\n            int length = xml.Length;\n            bool collectingName = false;\n            bool collectingAttribute = false;\n            string name = \"\";\n            string attr = \"\";\n\n            for (int i = 0; i < length; i++)\n            {\n                c = cp = cn = cnn = '\\0';\n                c = xml[i];\n                if (i > 0) cp = xml[i - 1];\n                if (i + 1 < length) cn = xml[i + 1];\n                if (i + 2 < length) cnn = xml[i + 2];\n\n                if (cType == ElementType.NONE)\n                {\n                    if (c == LT)\n                    {\n                        if (xmlStack.Count > 0)\n                        {\n                            if (!string.IsNullOrEmpty(name.Trim()))// top ele's text eg.<aa>****</aa>\n                            {\n                                var node = xmlStack.Peek();\n                                node.text = name.Trim();\n                            }\n                        }\n                        name = \"\";\n\n                        if (cn == QMARK)//<?*****?>\n                        {\n                            cType = ElementType.METATAG;\n                            i++;\n                            continue;\n                        }\n                        if (cn == EXCLAMATION && cnn == DASH)//<!-->\n                        {\n                            cType = ElementType.COMMENT;\n                            i++;\n                            continue;\n                        }\n                        if (cn == EXCLAMATION)//<![[*******>\n                        {\n                            cType = ElementType.DOCTYPE;\n                            i++;\n                            continue;\n                        }\n\n                        if (cn == SLASH)//</***>\n                        {\n                            cType = ElementType.CDATA;\n                            continue;\n                        }\n                        //create new\n                        cType = ElementType.CDATA;\n                        collectingName = false;\n                        collectingAttribute = false;\n                        name = \"\";\n                        attr = \"\";\n                        XmlNode xmlNode = new XmlNode();\n                        if (xmlStack.Count > 0)\n                        {\n                            var parent = xmlStack.Peek();\n                            parent.AddChild(xmlNode);\n                        }\n                        xmlStack.Push(xmlNode);\n                        continue;\n                    }\n                    else\n                    {\n                        name += c;\n                    }\n                }\n\n                if (cType == ElementType.METATAG)\n                {\n                    if (c == QMARK && cn == GT)\n                    {\n                        i++;\n                        cType = ElementType.NONE;\n                        continue;\n                    }\n                    else\n                        continue;\n                }\n                if (cType == ElementType.COMMENT)\n                {\n                    if (c == DASH && cn == DASH && cnn == GT)\n                    {\n                        i += 2;\n                        cType = ElementType.NONE;\n                        continue;\n                    }\n                    else\n                        continue;\n                }\n                if (cType == ElementType.DOCTYPE)\n                {\n                    if (c == GT) cType = ElementType.NONE;\n                    continue;\n                }\n\n                if (cType == ElementType.CDATA)\n                {\n                    if (collectingName)\n                    {\n                        if (c == SPACE || c == GT)\n                        {\n                            var node = xmlStack.Peek();\n                            if (string.IsNullOrEmpty(node.name))\n                            {\n                                node.name = name.Trim();\n                                collectingName = false;\n                                name = \"\";\n                            }\n                            if (c == GT)\n                            {\n                                cType = ElementType.NONE;\n                                continue;\n                            }\n                            \n                        }\n                        else if (c == SLASH && cn == GT)\n                        {\n                            var node = xmlStack.Peek();\n                            node.name = name.Trim();\n                            collectingName = false;\n                            cType = ElementType.NONE;\n                            name = \"\";\n                            i++;\n\n                            xmlStack.Pop();\n                            continue;\n                        }\n                        else if (c == EQUALS)\n                        {\n                            if (cn == QUOTE)\n                            {\n                                collectingName = false;\n                                collectingAttribute = true;\n                                attr = \"\";\n                                i++;\n                                continue;\n                            }\n                            else\n                                Debug.LogError(\"Error: Attribute '\\\"' is not near '=' in char index:\" + i );\n                        }\n                        else\n                        {\n                            name += c;\n                        }\n                    }\n                    else if(collectingAttribute)\n                    {\n                        if (c == QUOTE)\n                        {\n                            collectingAttribute = false;\n                            var node = xmlStack.Peek();\n                            node.AddAttribute(name.Trim(), attr);\n                            name = \"\";\n                            attr = \"\";\n                        }\n                        else\n                        {\n                            attr += c;\n                        }\n                    }\n                    else\n                    {\n                        if(c == SPACE) continue;\n\n                        if (c == GT)\n                        {\n                            cType = ElementType.NONE;\n                            continue;\n                        }\n\n                        if (c == SLASH && cn == GT)\n                        {\n                            cType = ElementType.NONE;\n                            xmlStack.Pop();\n                            i++;\n                            continue;\n                        }\n\n                        if (c == SLASH)\n                        {\n                            name = \"\";\n                            int j = i + 1;\n                            for (; j < length; j++)\n                            {\n                                if (xml[j] == GT)\n                                {\n                                    break;\n                                }\n                                else\n                                {\n                                    name += xml[j];\n                                }\n                            }\n\n                            var node = xmlStack.Peek();\n                            if (node.name.Equals(name))\n                            {\n                                xmlStack.Pop();\n                            }\n                            else\n                            {\n                                Debug.LogError(\"Error: current is /, name is \"+ name + \", but top node name is \"+ node.name );\n                            }\n                            i = j;\n                            cType = ElementType.NONE;\n                            name = \"\";\n                            continue;\n                        }\n\n                        name += c;\n                        collectingName = true;\n                    }\n                }\n            }\n        }\n\n    }\n\n\n    public class XmlNode\n    {\n        public string text { get; set; }\n        public string name { get; set; }\n        private List<XmlNode> children;\n        private Dictionary<string, string> attributes;\n\n        public XmlNode()\n        {\n            children = new List<XmlNode>();\n            attributes = new Dictionary<string, string>();\n            name = string.Empty;\n            text = string.Empty;\n        }\n\n        public bool HasChild()\n        {\n            return children.Count > 0;\n        }\n\n        public bool HasAttribute()\n        {\n            return attributes.Count > 0;\n        }\n\n        public void AddChild(XmlNode child)\n        {\n            children.Add(child);\n        }\n\n        /// <summary>\n        /// 移除子节点\n        /// </summary>\n        /// <param name=\"index\">从0开始的下标</param>\n        /// <returns></returns>\n        public XmlNode RemoveChild(int index)\n        {\n            if (children.Count > index)\n            {\n                var node = children[index];\n                children.RemoveAt(index);\n                return node;\n            }\n            return null;\n        }\n\n        /// <summary>\n        /// 添加属性，已存在则会覆盖\n        /// </summary>\n        /// <param name=\"key\"></param>\n        /// <param name=\"value\"></param>\n        public void AddAttribute(string key, string value)\n        {\n            if (attributes.ContainsKey(key))\n                attributes[key] = value;\n            else\n                attributes.Add(key, value);\n        }\n\n        public void RemoveAttribute(string key)\n        {\n            attributes.Remove(key);\n        }\n\n        /// <summary>\n        /// 获取节点\n        /// </summary>\n        /// <param name=\"index\">从0开始的下标</param>\n        /// <returns></returns>\n        public XmlNode GetElement(int index)\n        {\n            if (children.Count > index)\n                return children[index];\n            return null;\n        }\n\n        public XmlNode GetElement(string cname)\n        {\n            foreach (var child in children)\n            {\n                if (child.name.Equals(cname))\n                    return child;\n            }\n            return null;\n        }\n\n        public List<XmlNode> GetElements()\n        {\n            return children;\n        }\n\n        public string GetAttribute(string key)\n        {\n            if (attributes.ContainsKey(key))\n                return attributes[key];\n            return string.Empty;\n        }\n\n        public Dictionary<string, string> GetAttributes()\n        {\n            return attributes;\n        }\n\n        public string[] GetAttributeArray(string key)\n        {\n            string value = GetAttribute(key);\n            return value.Split(',');\n        }\n    }\n}\n```\n\n可能会有坑，但是我自己还没遇到...","slug":"XML 解析生成工具","published":1,"updated":"2017-10-26T10:13:56.821Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj9fm90t4000a2cobpmdk3pto","content":"<p>轻量级的XML解析生成工具，具体使用如注释。</p>\n<pre class=\"line-numbers language-csharp\"><code class=\"language-csharp\">\n<span class=\"token keyword\">using</span> System<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> System<span class=\"token punctuation\">.</span>Collections<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> System<span class=\"token punctuation\">.</span>Collections<span class=\"token punctuation\">.</span>Generic<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> System<span class=\"token punctuation\">.</span>Text<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> UnityEngine<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/*----------------------------------------------------------------\n// Copyright (C) 2017\n//\n// 模块名：轻量级XML工具\n// 创建者：Cheng\n// 修改者列表：\n// 创建日期：2/28/2017\n// 模块描述：\n//----------------------------------------------------------------*/</span>\n<span class=\"token keyword\">namespace</span> Garson\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">XML</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">private</span> XmlNode root<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">public</span> <span class=\"token function\">XML</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">public</span> <span class=\"token function\">XML</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">string</span> xml<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">Parse</span><span class=\"token punctuation\">(</span>xml<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;summary></span>\n        <span class=\"token comment\" spellcheck=\"true\">/// 从根节点获取Element</span>\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;/summary></span>\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;param name=\"path\">路径，eg:\"Root/Node/Element\"&lt;/param></span>\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;returns>&lt;/returns></span>\n        <span class=\"token keyword\">public</span> XmlNode <span class=\"token function\">GetElement</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">string</span> path<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> paths <span class=\"token operator\">=</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">Split</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">var</span> p <span class=\"token operator\">=</span> root<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> paths<span class=\"token punctuation\">.</span>Length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                p <span class=\"token operator\">=</span> p<span class=\"token punctuation\">.</span><span class=\"token function\">GetElement</span><span class=\"token punctuation\">(</span>paths<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>p <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">return</span> p<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;summary></span>\n        <span class=\"token comment\" spellcheck=\"true\">/// 在指定节点下插入新元素</span>\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;/summary></span>\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;param name=\"path\">如果path为空则插入在根节点&lt;/param></span>\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;param name=\"name\">新节点名称&lt;/param></span>\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;returns>&lt;/returns></span>\n        <span class=\"token keyword\">public</span> XmlNode <span class=\"token function\">AddNode</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">string</span> path<span class=\"token punctuation\">,</span> <span class=\"token keyword\">string</span> name<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>root <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n                root <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">XmlNode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">.</span><span class=\"token function\">IsNullOrEmpty</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                XmlNode node <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">XmlNode</span> <span class=\"token punctuation\">{</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n                root<span class=\"token punctuation\">.</span><span class=\"token function\">AddChild</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">return</span> node<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">else</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">var</span> parent <span class=\"token operator\">=</span> <span class=\"token function\">GetElement</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>parent <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">{</span>\n                    Debug<span class=\"token punctuation\">.</span><span class=\"token function\">LogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Error: Cannot find path:\"</span> <span class=\"token operator\">+</span> path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                XmlNode node <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">XmlNode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                node<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n                parent<span class=\"token punctuation\">.</span><span class=\"token function\">AddChild</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">return</span> node<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;summary></span>\n        <span class=\"token comment\" spellcheck=\"true\">/// 在指定路径下插入新节点</span>\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;/summary></span>\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;param name=\"path\">如果路径不存在，会创建相应的节点&lt;/param></span>\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;param name=\"name\">新节点名称&lt;/param></span>\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;returns>&lt;/returns></span>\n        <span class=\"token keyword\">public</span> XmlNode <span class=\"token function\">AddNodeIgnorePath</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">string</span> path<span class=\"token punctuation\">,</span> <span class=\"token keyword\">string</span> name<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n                root <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">XmlNode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> paths <span class=\"token operator\">=</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">Split</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">var</span> p <span class=\"token operator\">=</span> root<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> paths<span class=\"token punctuation\">.</span>Length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">var</span> c <span class=\"token operator\">=</span> p<span class=\"token punctuation\">.</span><span class=\"token function\">GetElement</span><span class=\"token punctuation\">(</span>paths<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>p <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">{</span>\n                    c <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">XmlNode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>name <span class=\"token operator\">=</span> paths<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n                    p<span class=\"token punctuation\">.</span><span class=\"token function\">AddChild</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                p <span class=\"token operator\">=</span> c<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token keyword\">var</span> node <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">XmlNode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n            p<span class=\"token punctuation\">.</span><span class=\"token function\">AddChild</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> node<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;summary></span>\n        <span class=\"token comment\" spellcheck=\"true\">/// 添加属性</span>\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;/summary></span>\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;param name=\"path\">该路径下的节点&lt;/param></span>\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;param name=\"key\">属性名&lt;/param></span>\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;param name=\"value\">属性值&lt;/param></span>\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;returns>&lt;/returns></span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">bool</span> <span class=\"token function\">AddAttribute</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">string</span> path<span class=\"token punctuation\">,</span> <span class=\"token keyword\">string</span> key<span class=\"token punctuation\">,</span> <span class=\"token keyword\">string</span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">var</span> p <span class=\"token operator\">=</span> <span class=\"token function\">GetElement</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>p <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">false</span><span class=\"token punctuation\">;</span>\n            p<span class=\"token punctuation\">.</span><span class=\"token function\">AddAttribute</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">override</span> <span class=\"token keyword\">string</span> <span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token function\">Print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;summary></span>\n        <span class=\"token comment\" spellcheck=\"true\">/// 把XML转化成字符串</span>\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;/summary></span>\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;returns>&lt;/returns></span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">string</span> <span class=\"token function\">Print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            StringBuilder stringBuilder <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            stringBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">AppendLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&lt;?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">var</span> elements <span class=\"token operator\">=</span> root<span class=\"token punctuation\">.</span><span class=\"token function\">GetElements</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> element <span class=\"token keyword\">in</span> elements<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token function\">BuildString</span><span class=\"token punctuation\">(</span>stringBuilder<span class=\"token punctuation\">,</span> element<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">return</span> stringBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;summary></span>\n        <span class=\"token comment\" spellcheck=\"true\">/// 递归调用</span>\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;/summary></span>\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;param name=\"stringBuilder\">&lt;/param></span>\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;param name=\"element\">&lt;/param></span>\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;param name=\"tab\">每行前加制表符个数&lt;/param></span>\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">BuildString</span><span class=\"token punctuation\">(</span>StringBuilder stringBuilder<span class=\"token punctuation\">,</span> XmlNode element<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> tab<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> tab<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                stringBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">Append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\t\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            stringBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">Append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&lt;\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            stringBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">Append</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">.</span><span class=\"token function\">HasAttribute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                stringBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">Append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">var</span> attrs <span class=\"token operator\">=</span> element<span class=\"token punctuation\">.</span><span class=\"token function\">GetAttributes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> key <span class=\"token keyword\">in</span> attrs<span class=\"token punctuation\">.</span>Keys<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">{</span>\n                    stringBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">Append</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    stringBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">Append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"=\\\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    stringBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">Append</span><span class=\"token punctuation\">(</span>attrs<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    stringBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">Append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">.</span><span class=\"token function\">HasChild</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                stringBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">AppendLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\">\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">var</span> childern <span class=\"token operator\">=</span> element<span class=\"token punctuation\">.</span><span class=\"token function\">GetElements</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> child <span class=\"token keyword\">in</span> childern<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">{</span>\n                    <span class=\"token function\">BuildString</span><span class=\"token punctuation\">(</span>stringBuilder<span class=\"token punctuation\">,</span> child<span class=\"token punctuation\">,</span> tab<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> tab<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">{</span>\n                    stringBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">Append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\t\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                stringBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">AppendLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&lt;/\"</span> <span class=\"token operator\">+</span> element<span class=\"token punctuation\">.</span>name <span class=\"token operator\">+</span> <span class=\"token string\">\">\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">.</span><span class=\"token function\">IsNullOrEmpty</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                stringBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">Append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\">\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                stringBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">Append</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                stringBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">AppendLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&lt;/\"</span> <span class=\"token operator\">+</span> element<span class=\"token punctuation\">.</span>name <span class=\"token operator\">+</span> <span class=\"token string\">\">\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">else</span>\n            <span class=\"token punctuation\">{</span>\n                stringBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">AppendLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" />\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> LT <span class=\"token operator\">=</span> <span class=\"token string\">'&lt;'</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> GT <span class=\"token operator\">=</span> <span class=\"token string\">'>'</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> DASH <span class=\"token operator\">=</span> <span class=\"token string\">'-'</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> SPACE <span class=\"token operator\">=</span> <span class=\"token string\">' '</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> QUOTE <span class=\"token operator\">=</span> <span class=\"token string\">'\"'</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> SLASH <span class=\"token operator\">=</span> <span class=\"token string\">'/'</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> QMARK <span class=\"token operator\">=</span> <span class=\"token string\">'?'</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> EQUALS <span class=\"token operator\">=</span> <span class=\"token string\">'='</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> EXCLAMATION <span class=\"token operator\">=</span> <span class=\"token string\">'!'</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">enum</span> ElementType\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\" spellcheck=\"true\">/// &lt;summary></span>\n            <span class=\"token comment\" spellcheck=\"true\">/// 元标签</span>\n            <span class=\"token comment\" spellcheck=\"true\">/// &lt;/summary></span>\n            METATAG<span class=\"token punctuation\">,</span>\n            <span class=\"token comment\" spellcheck=\"true\">/// &lt;summary></span>\n            <span class=\"token comment\" spellcheck=\"true\">/// 注释</span>\n            <span class=\"token comment\" spellcheck=\"true\">/// &lt;/summary></span>\n            COMMENT<span class=\"token punctuation\">,</span>\n            <span class=\"token comment\" spellcheck=\"true\">/// &lt;summary></span>\n            <span class=\"token comment\" spellcheck=\"true\">/// 声明</span>\n            <span class=\"token comment\" spellcheck=\"true\">/// &lt;/summary></span>\n            DOCTYPE<span class=\"token punctuation\">,</span>\n            <span class=\"token comment\" spellcheck=\"true\">/// &lt;summary></span>\n            <span class=\"token comment\" spellcheck=\"true\">/// 字符数据</span>\n            <span class=\"token comment\" spellcheck=\"true\">/// &lt;/summary></span>\n            CDATA<span class=\"token punctuation\">,</span>\n            <span class=\"token comment\" spellcheck=\"true\">/// &lt;summary></span>\n            <span class=\"token comment\" spellcheck=\"true\">/// 空</span>\n            <span class=\"token comment\" spellcheck=\"true\">/// &lt;/summary></span>\n            NONE<span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;summary></span>\n        <span class=\"token comment\" spellcheck=\"true\">/// Xml解析，会覆盖已存在的XML</span>\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;/summary></span>\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;param name=\"xml\">&lt;/param></span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">Parse</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">string</span> xml<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">.</span><span class=\"token function\">IsNullOrEmpty</span><span class=\"token punctuation\">(</span>xml<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n            xml <span class=\"token operator\">=</span> xml<span class=\"token punctuation\">.</span><span class=\"token function\">Replace</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            root <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">XmlNode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            ElementType cType <span class=\"token operator\">=</span> ElementType<span class=\"token punctuation\">.</span>NONE<span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">char</span> c<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">//current char</span>\n            <span class=\"token keyword\">char</span> cp<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">//c previous</span>\n            <span class=\"token keyword\">char</span> cn<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">//c next</span>\n            <span class=\"token keyword\">char</span> cnn<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// c next next</span>\n            Stack<span class=\"token operator\">&lt;</span>XmlNode<span class=\"token operator\">></span> xmlStack <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Stack</span><span class=\"token operator\">&lt;</span>XmlNode<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            xmlStack<span class=\"token punctuation\">.</span><span class=\"token function\">Push</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">int</span> length <span class=\"token operator\">=</span> xml<span class=\"token punctuation\">.</span>Length<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">bool</span> collectingName <span class=\"token operator\">=</span> <span class=\"token keyword\">false</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">bool</span> collectingAttribute <span class=\"token operator\">=</span> <span class=\"token keyword\">false</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">string</span> name <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">string</span> attr <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                c <span class=\"token operator\">=</span> cp <span class=\"token operator\">=</span> cn <span class=\"token operator\">=</span> cnn <span class=\"token operator\">=</span> <span class=\"token string\">'\\0'</span><span class=\"token punctuation\">;</span>\n                c <span class=\"token operator\">=</span> xml<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> cp <span class=\"token operator\">=</span> xml<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token operator\">&lt;</span> length<span class=\"token punctuation\">)</span> cn <span class=\"token operator\">=</span> xml<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token number\">2</span> <span class=\"token operator\">&lt;</span> length<span class=\"token punctuation\">)</span> cnn <span class=\"token operator\">=</span> xml<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cType <span class=\"token operator\">==</span> ElementType<span class=\"token punctuation\">.</span>NONE<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">==</span> LT<span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">{</span>\n                        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>xmlStack<span class=\"token punctuation\">.</span>Count <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n                        <span class=\"token punctuation\">{</span>\n                            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">.</span><span class=\"token function\">IsNullOrEmpty</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">.</span><span class=\"token function\">Trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token comment\" spellcheck=\"true\">// top ele's text eg.&lt;aa>****&lt;/aa></span>\n                            <span class=\"token punctuation\">{</span>\n                                <span class=\"token keyword\">var</span> node <span class=\"token operator\">=</span> xmlStack<span class=\"token punctuation\">.</span><span class=\"token function\">Peek</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                                node<span class=\"token punctuation\">.</span>text <span class=\"token operator\">=</span> name<span class=\"token punctuation\">.</span><span class=\"token function\">Trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                            <span class=\"token punctuation\">}</span>\n                        <span class=\"token punctuation\">}</span>\n                        name <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n\n                        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cn <span class=\"token operator\">==</span> QMARK<span class=\"token punctuation\">)</span><span class=\"token comment\" spellcheck=\"true\">//&lt;?*****?></span>\n                        <span class=\"token punctuation\">{</span>\n                            cType <span class=\"token operator\">=</span> ElementType<span class=\"token punctuation\">.</span>METATAG<span class=\"token punctuation\">;</span>\n                            i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n                            <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token punctuation\">}</span>\n                        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cn <span class=\"token operator\">==</span> EXCLAMATION <span class=\"token operator\">&amp;&amp;</span> cnn <span class=\"token operator\">==</span> DASH<span class=\"token punctuation\">)</span><span class=\"token comment\" spellcheck=\"true\">//&lt;!--></span>\n                        <span class=\"token punctuation\">{</span>\n                            cType <span class=\"token operator\">=</span> ElementType<span class=\"token punctuation\">.</span>COMMENT<span class=\"token punctuation\">;</span>\n                            i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n                            <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token punctuation\">}</span>\n                        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cn <span class=\"token operator\">==</span> EXCLAMATION<span class=\"token punctuation\">)</span><span class=\"token comment\" spellcheck=\"true\">//&lt;![[*******></span>\n                        <span class=\"token punctuation\">{</span>\n                            cType <span class=\"token operator\">=</span> ElementType<span class=\"token punctuation\">.</span>DOCTYPE<span class=\"token punctuation\">;</span>\n                            i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n                            <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token punctuation\">}</span>\n\n                        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cn <span class=\"token operator\">==</span> SLASH<span class=\"token punctuation\">)</span><span class=\"token comment\" spellcheck=\"true\">//&lt;/***></span>\n                        <span class=\"token punctuation\">{</span>\n                            cType <span class=\"token operator\">=</span> ElementType<span class=\"token punctuation\">.</span>CDATA<span class=\"token punctuation\">;</span>\n                            <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token punctuation\">}</span>\n                        <span class=\"token comment\" spellcheck=\"true\">//create new</span>\n                        cType <span class=\"token operator\">=</span> ElementType<span class=\"token punctuation\">.</span>CDATA<span class=\"token punctuation\">;</span>\n                        collectingName <span class=\"token operator\">=</span> <span class=\"token keyword\">false</span><span class=\"token punctuation\">;</span>\n                        collectingAttribute <span class=\"token operator\">=</span> <span class=\"token keyword\">false</span><span class=\"token punctuation\">;</span>\n                        name <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n                        attr <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n                        XmlNode xmlNode <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">XmlNode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>xmlStack<span class=\"token punctuation\">.</span>Count <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n                        <span class=\"token punctuation\">{</span>\n                            <span class=\"token keyword\">var</span> parent <span class=\"token operator\">=</span> xmlStack<span class=\"token punctuation\">.</span><span class=\"token function\">Peek</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                            parent<span class=\"token punctuation\">.</span><span class=\"token function\">AddChild</span><span class=\"token punctuation\">(</span>xmlNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token punctuation\">}</span>\n                        xmlStack<span class=\"token punctuation\">.</span><span class=\"token function\">Push</span><span class=\"token punctuation\">(</span>xmlNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n                    <span class=\"token keyword\">else</span>\n                    <span class=\"token punctuation\">{</span>\n                        name <span class=\"token operator\">+</span><span class=\"token operator\">=</span> c<span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n                <span class=\"token punctuation\">}</span>\n\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cType <span class=\"token operator\">==</span> ElementType<span class=\"token punctuation\">.</span>METATAG<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">==</span> QMARK <span class=\"token operator\">&amp;&amp;</span> cn <span class=\"token operator\">==</span> GT<span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">{</span>\n                        i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n                        cType <span class=\"token operator\">=</span> ElementType<span class=\"token punctuation\">.</span>NONE<span class=\"token punctuation\">;</span>\n                        <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n                    <span class=\"token keyword\">else</span>\n                        <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cType <span class=\"token operator\">==</span> ElementType<span class=\"token punctuation\">.</span>COMMENT<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">==</span> DASH <span class=\"token operator\">&amp;&amp;</span> cn <span class=\"token operator\">==</span> DASH <span class=\"token operator\">&amp;&amp;</span> cnn <span class=\"token operator\">==</span> GT<span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">{</span>\n                        i <span class=\"token operator\">+</span><span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n                        cType <span class=\"token operator\">=</span> ElementType<span class=\"token punctuation\">.</span>NONE<span class=\"token punctuation\">;</span>\n                        <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n                    <span class=\"token keyword\">else</span>\n                        <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cType <span class=\"token operator\">==</span> ElementType<span class=\"token punctuation\">.</span>DOCTYPE<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">==</span> GT<span class=\"token punctuation\">)</span> cType <span class=\"token operator\">=</span> ElementType<span class=\"token punctuation\">.</span>NONE<span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cType <span class=\"token operator\">==</span> ElementType<span class=\"token punctuation\">.</span>CDATA<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>collectingName<span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">{</span>\n                        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">==</span> SPACE <span class=\"token operator\">||</span> c <span class=\"token operator\">==</span> GT<span class=\"token punctuation\">)</span>\n                        <span class=\"token punctuation\">{</span>\n                            <span class=\"token keyword\">var</span> node <span class=\"token operator\">=</span> xmlStack<span class=\"token punctuation\">.</span><span class=\"token function\">Peek</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">.</span><span class=\"token function\">IsNullOrEmpty</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                            <span class=\"token punctuation\">{</span>\n                                node<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">.</span><span class=\"token function\">Trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                                collectingName <span class=\"token operator\">=</span> <span class=\"token keyword\">false</span><span class=\"token punctuation\">;</span>\n                                name <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n                            <span class=\"token punctuation\">}</span>\n                            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">==</span> GT<span class=\"token punctuation\">)</span>\n                            <span class=\"token punctuation\">{</span>\n                                cType <span class=\"token operator\">=</span> ElementType<span class=\"token punctuation\">.</span>NONE<span class=\"token punctuation\">;</span>\n                                <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n                            <span class=\"token punctuation\">}</span>\n\n                        <span class=\"token punctuation\">}</span>\n                        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">==</span> SLASH <span class=\"token operator\">&amp;&amp;</span> cn <span class=\"token operator\">==</span> GT<span class=\"token punctuation\">)</span>\n                        <span class=\"token punctuation\">{</span>\n                            <span class=\"token keyword\">var</span> node <span class=\"token operator\">=</span> xmlStack<span class=\"token punctuation\">.</span><span class=\"token function\">Peek</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                            node<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">.</span><span class=\"token function\">Trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                            collectingName <span class=\"token operator\">=</span> <span class=\"token keyword\">false</span><span class=\"token punctuation\">;</span>\n                            cType <span class=\"token operator\">=</span> ElementType<span class=\"token punctuation\">.</span>NONE<span class=\"token punctuation\">;</span>\n                            name <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n                            i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\n                            xmlStack<span class=\"token punctuation\">.</span><span class=\"token function\">Pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                            <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token punctuation\">}</span>\n                        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">==</span> EQUALS<span class=\"token punctuation\">)</span>\n                        <span class=\"token punctuation\">{</span>\n                            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cn <span class=\"token operator\">==</span> QUOTE<span class=\"token punctuation\">)</span>\n                            <span class=\"token punctuation\">{</span>\n                                collectingName <span class=\"token operator\">=</span> <span class=\"token keyword\">false</span><span class=\"token punctuation\">;</span>\n                                collectingAttribute <span class=\"token operator\">=</span> <span class=\"token keyword\">true</span><span class=\"token punctuation\">;</span>\n                                attr <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n                                i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n                                <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n                            <span class=\"token punctuation\">}</span>\n                            <span class=\"token keyword\">else</span>\n                                Debug<span class=\"token punctuation\">.</span><span class=\"token function\">LogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Error: Attribute '\\\"' is not near '=' in char index:\"</span> <span class=\"token operator\">+</span> i <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token punctuation\">}</span>\n                        <span class=\"token keyword\">else</span>\n                        <span class=\"token punctuation\">{</span>\n                            name <span class=\"token operator\">+</span><span class=\"token operator\">=</span> c<span class=\"token punctuation\">;</span>\n                        <span class=\"token punctuation\">}</span>\n                    <span class=\"token punctuation\">}</span>\n                    <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>collectingAttribute<span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">{</span>\n                        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">==</span> QUOTE<span class=\"token punctuation\">)</span>\n                        <span class=\"token punctuation\">{</span>\n                            collectingAttribute <span class=\"token operator\">=</span> <span class=\"token keyword\">false</span><span class=\"token punctuation\">;</span>\n                            <span class=\"token keyword\">var</span> node <span class=\"token operator\">=</span> xmlStack<span class=\"token punctuation\">.</span><span class=\"token function\">Peek</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                            node<span class=\"token punctuation\">.</span><span class=\"token function\">AddAttribute</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">.</span><span class=\"token function\">Trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> attr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                            name <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n                            attr <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token punctuation\">}</span>\n                        <span class=\"token keyword\">else</span>\n                        <span class=\"token punctuation\">{</span>\n                            attr <span class=\"token operator\">+</span><span class=\"token operator\">=</span> c<span class=\"token punctuation\">;</span>\n                        <span class=\"token punctuation\">}</span>\n                    <span class=\"token punctuation\">}</span>\n                    <span class=\"token keyword\">else</span>\n                    <span class=\"token punctuation\">{</span>\n                        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>c <span class=\"token operator\">==</span> SPACE<span class=\"token punctuation\">)</span> <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n\n                        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">==</span> GT<span class=\"token punctuation\">)</span>\n                        <span class=\"token punctuation\">{</span>\n                            cType <span class=\"token operator\">=</span> ElementType<span class=\"token punctuation\">.</span>NONE<span class=\"token punctuation\">;</span>\n                            <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token punctuation\">}</span>\n\n                        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">==</span> SLASH <span class=\"token operator\">&amp;&amp;</span> cn <span class=\"token operator\">==</span> GT<span class=\"token punctuation\">)</span>\n                        <span class=\"token punctuation\">{</span>\n                            cType <span class=\"token operator\">=</span> ElementType<span class=\"token punctuation\">.</span>NONE<span class=\"token punctuation\">;</span>\n                            xmlStack<span class=\"token punctuation\">.</span><span class=\"token function\">Pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                            i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n                            <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token punctuation\">}</span>\n\n                        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">==</span> SLASH<span class=\"token punctuation\">)</span>\n                        <span class=\"token punctuation\">{</span>\n                            name <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n                            <span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n                            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> length<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n                            <span class=\"token punctuation\">{</span>\n                                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>xml<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> GT<span class=\"token punctuation\">)</span>\n                                <span class=\"token punctuation\">{</span>\n                                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                                <span class=\"token punctuation\">}</span>\n                                <span class=\"token keyword\">else</span>\n                                <span class=\"token punctuation\">{</span>\n                                    name <span class=\"token operator\">+</span><span class=\"token operator\">=</span> xml<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                                <span class=\"token punctuation\">}</span>\n                            <span class=\"token punctuation\">}</span>\n\n                            <span class=\"token keyword\">var</span> node <span class=\"token operator\">=</span> xmlStack<span class=\"token punctuation\">.</span><span class=\"token function\">Peek</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">.</span><span class=\"token function\">Equals</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                            <span class=\"token punctuation\">{</span>\n                                xmlStack<span class=\"token punctuation\">.</span><span class=\"token function\">Pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                            <span class=\"token punctuation\">}</span>\n                            <span class=\"token keyword\">else</span>\n                            <span class=\"token punctuation\">{</span>\n                                Debug<span class=\"token punctuation\">.</span><span class=\"token function\">LogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Error: current is /, name is \"</span><span class=\"token operator\">+</span> name <span class=\"token operator\">+</span> <span class=\"token string\">\", but top node name is \"</span><span class=\"token operator\">+</span> node<span class=\"token punctuation\">.</span>name <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                            <span class=\"token punctuation\">}</span>\n                            i <span class=\"token operator\">=</span> j<span class=\"token punctuation\">;</span>\n                            cType <span class=\"token operator\">=</span> ElementType<span class=\"token punctuation\">.</span>NONE<span class=\"token punctuation\">;</span>\n                            name <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n                            <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token punctuation\">}</span>\n\n                        name <span class=\"token operator\">+</span><span class=\"token operator\">=</span> c<span class=\"token punctuation\">;</span>\n                        collectingName <span class=\"token operator\">=</span> <span class=\"token keyword\">true</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n    <span class=\"token punctuation\">}</span>\n\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">XmlNode</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">string</span> text <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">string</span> name <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">private</span> List<span class=\"token operator\">&lt;</span>XmlNode<span class=\"token operator\">></span> children<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">private</span> Dictionary<span class=\"token operator\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">string</span><span class=\"token operator\">></span> attributes<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">public</span> <span class=\"token function\">XmlNode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            children <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">List</span><span class=\"token operator\">&lt;</span>XmlNode<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            attributes <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Dictionary</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">string</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            name <span class=\"token operator\">=</span> <span class=\"token keyword\">string</span><span class=\"token punctuation\">.</span>Empty<span class=\"token punctuation\">;</span>\n            text <span class=\"token operator\">=</span> <span class=\"token keyword\">string</span><span class=\"token punctuation\">.</span>Empty<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">bool</span> <span class=\"token function\">HasChild</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> children<span class=\"token punctuation\">.</span>Count <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">bool</span> <span class=\"token function\">HasAttribute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> attributes<span class=\"token punctuation\">.</span>Count <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">AddChild</span><span class=\"token punctuation\">(</span>XmlNode child<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            children<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;summary></span>\n        <span class=\"token comment\" spellcheck=\"true\">/// 移除子节点</span>\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;/summary></span>\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;param name=\"index\">从0开始的下标&lt;/param></span>\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;returns>&lt;/returns></span>\n        <span class=\"token keyword\">public</span> XmlNode <span class=\"token function\">RemoveChild</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> index<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>children<span class=\"token punctuation\">.</span>Count <span class=\"token operator\">></span> index<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">var</span> node <span class=\"token operator\">=</span> children<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                children<span class=\"token punctuation\">.</span><span class=\"token function\">RemoveAt</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">return</span> node<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;summary></span>\n        <span class=\"token comment\" spellcheck=\"true\">/// 添加属性，已存在则会覆盖</span>\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;/summary></span>\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;param name=\"key\">&lt;/param></span>\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;param name=\"value\">&lt;/param></span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">AddAttribute</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">string</span> key<span class=\"token punctuation\">,</span> <span class=\"token keyword\">string</span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>attributes<span class=\"token punctuation\">.</span><span class=\"token function\">ContainsKey</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                attributes<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">else</span>\n                attributes<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">RemoveAttribute</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">string</span> key<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            attributes<span class=\"token punctuation\">.</span><span class=\"token function\">Remove</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;summary></span>\n        <span class=\"token comment\" spellcheck=\"true\">/// 获取节点</span>\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;/summary></span>\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;param name=\"index\">从0开始的下标&lt;/param></span>\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;returns>&lt;/returns></span>\n        <span class=\"token keyword\">public</span> XmlNode <span class=\"token function\">GetElement</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> index<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>children<span class=\"token punctuation\">.</span>Count <span class=\"token operator\">></span> index<span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">return</span> children<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">public</span> XmlNode <span class=\"token function\">GetElement</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">string</span> cname<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> child <span class=\"token keyword\">in</span> children<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">.</span><span class=\"token function\">Equals</span><span class=\"token punctuation\">(</span>cname<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token keyword\">return</span> child<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">public</span> List<span class=\"token operator\">&lt;</span>XmlNode<span class=\"token operator\">></span> <span class=\"token function\">GetElements</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> children<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">string</span> <span class=\"token function\">GetAttribute</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">string</span> key<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>attributes<span class=\"token punctuation\">.</span><span class=\"token function\">ContainsKey</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">return</span> attributes<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">string</span><span class=\"token punctuation\">.</span>Empty<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">public</span> Dictionary<span class=\"token operator\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">string</span><span class=\"token operator\">></span> <span class=\"token function\">GetAttributes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> attributes<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">GetAttributeArray</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">string</span> key<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">string</span> <span class=\"token keyword\">value</span> <span class=\"token operator\">=</span> <span class=\"token function\">GetAttribute</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">.</span><span class=\"token function\">Split</span><span class=\"token punctuation\">(</span><span class=\"token string\">','</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>可能会有坑，但是我自己还没遇到…</p>\n","site":{"data":{"gallery":{"美女":{"full_link":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1508912200438&di=d5b3eacf86d8f94c149c6fc68fe4da67&imgtype=0&src=http%3A%2F%2Fpic01.taopic.com%2F151014%2F234732-15101410452229-lp.jpg","thumb_link":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1508912200438&di=d5b3eacf86d8f94c149c6fc68fe4da67&imgtype=0&src=http%3A%2F%2Fpic01.taopic.com%2F151014%2F234732-15101410452229-lp.jpg","descr":"美女插画"}},"links":{"Github":{"link":"https://github.com/garsonlab","avatar":"https://avatars3.githubusercontent.com/u/13958934?s=460&v=4","descr":"My Github","type":"Blog"},"OnLineTools":{"link":"http://tool.lu/","avatar":"http://qn11.tool.lu/201710/15/103320SbM84Ql4tETjg49a_28x28.png","descr":"在线工具","type":"Tools"},"CMDMarkdown":{"link":"https://www.zybuluo.com/","avatar":"https://www.zybuluo.com/static/img/logo.png","descr":"Markdown在线编辑","type":"Tools"},"Hexo文档":{"link":"https://hexo.io/zh-cn/docs/","avatar":"https://hexo.io/logo.svg","descr":"Hexo中文官方文档","type":"Community"},"游戏蛮牛":{"link":"http://www.manew.com/forum.php","avatar":"http://www.manew.com/template/manew2016/images/logo.png","descr":"unity交流社区","type":"Unity"},"FairyGUI":{"link":"http://www.fairygui.com/","avatar":"http://www.fairygui.com/images/20170728151207.png","descr":"FairyGUI官方网站","type":"Site"}},"linktypes":{"Blog":{"name":"关注的博客"},"Unity":{"name":"Unity3D"},"Community":{"name":"浏览的社区"},"Tools":{"name":"工具"},"Site":{"name":"收藏的网址"}}}},"excerpt":"","more":"<p>轻量级的XML解析生成工具，具体使用如注释。</p>\n<pre><code class=\"csharp\">\nusing System;\nusing System.Collections;\nusing System.Collections.Generic;\nusing System.Text;\nusing UnityEngine;\n\n/*----------------------------------------------------------------\n// Copyright (C) 2017\n//\n// 模块名：轻量级XML工具\n// 创建者：Cheng\n// 修改者列表：\n// 创建日期：2/28/2017\n// 模块描述：\n//----------------------------------------------------------------*/\nnamespace Garson\n{\n    public class XML\n    {\n        private XmlNode root;\n        public XML() { }\n\n        public XML(string xml)\n        {\n            Parse(xml);\n        }\n\n        /// &lt;summary&gt;\n        /// 从根节点获取Element\n        /// &lt;/summary&gt;\n        /// &lt;param name=&quot;path&quot;&gt;路径，eg:&quot;Root/Node/Element&quot;&lt;/param&gt;\n        /// &lt;returns&gt;&lt;/returns&gt;\n        public XmlNode GetElement(string path)\n        {\n            string[] paths = path.Split(&#39;/&#39;);\n            var p = root;\n            for (int i = 0; i &lt; paths.Length; i++)\n            {\n                p = p.GetElement(paths[i]);\n                if(p == null)\n                    break;\n            }\n            return p;\n        }\n\n        /// &lt;summary&gt;\n        /// 在指定节点下插入新元素\n        /// &lt;/summary&gt;\n        /// &lt;param name=&quot;path&quot;&gt;如果path为空则插入在根节点&lt;/param&gt;\n        /// &lt;param name=&quot;name&quot;&gt;新节点名称&lt;/param&gt;\n        /// &lt;returns&gt;&lt;/returns&gt;\n        public XmlNode AddNode(string path, string name)\n        {\n            if(root == null)\n                root = new XmlNode();\n            if (string.IsNullOrEmpty(path))\n            {\n                XmlNode node = new XmlNode {name = name};\n                root.AddChild(node);\n                return node;\n            }\n            else\n            {\n                var parent = GetElement(path);\n                if (parent == null)\n                {\n                    Debug.LogError(&quot;Error: Cannot find path:&quot; + path);\n                    return null;\n                }\n                XmlNode node = new XmlNode();\n                node.name = name;\n                parent.AddChild(node);\n                return node;\n            }\n        }\n\n        /// &lt;summary&gt;\n        /// 在指定路径下插入新节点\n        /// &lt;/summary&gt;\n        /// &lt;param name=&quot;path&quot;&gt;如果路径不存在，会创建相应的节点&lt;/param&gt;\n        /// &lt;param name=&quot;name&quot;&gt;新节点名称&lt;/param&gt;\n        /// &lt;returns&gt;&lt;/returns&gt;\n        public XmlNode AddNodeIgnorePath(string path, string name)\n        {\n            if (root == null)\n                root = new XmlNode();\n\n            string[] paths = path.Split(&#39;/&#39;);\n            var p = root;\n            for (int i = 0; i &lt; paths.Length; i++)\n            {\n                var c = p.GetElement(paths[i]);\n                if (p == null)\n                {\n                    c = new XmlNode(){name = paths[i]};\n                    p.AddChild(c);\n                }\n                p = c;\n            }\n\n            var node = new XmlNode(){name = name};\n            p.AddChild(node);\n            return node;\n        }\n\n        /// &lt;summary&gt;\n        /// 添加属性\n        /// &lt;/summary&gt;\n        /// &lt;param name=&quot;path&quot;&gt;该路径下的节点&lt;/param&gt;\n        /// &lt;param name=&quot;key&quot;&gt;属性名&lt;/param&gt;\n        /// &lt;param name=&quot;value&quot;&gt;属性值&lt;/param&gt;\n        /// &lt;returns&gt;&lt;/returns&gt;\n        public bool AddAttribute(string path, string key, string value)\n        {\n            var p = GetElement(path);\n            if (p == null) return false;\n            p.AddAttribute(key, value);\n            return true;\n        }\n\n        public override string ToString()\n        {\n            return Print();\n        }\n\n        /// &lt;summary&gt;\n        /// 把XML转化成字符串\n        /// &lt;/summary&gt;\n        /// &lt;returns&gt;&lt;/returns&gt;\n        public string Print()\n        {\n            StringBuilder stringBuilder = new StringBuilder();\n            stringBuilder.AppendLine(&quot;&lt;?xml version=\\&quot;1.0\\&quot; encoding=\\&quot;UTF-8\\&quot;?&gt;&quot;);\n\n            var elements = root.GetElements();\n            foreach (var element in elements)\n            {\n                BuildString(stringBuilder, element, 0);\n            }\n            return stringBuilder.ToString();\n        }\n\n        /// &lt;summary&gt;\n        /// 递归调用\n        /// &lt;/summary&gt;\n        /// &lt;param name=&quot;stringBuilder&quot;&gt;&lt;/param&gt;\n        /// &lt;param name=&quot;element&quot;&gt;&lt;/param&gt;\n        /// &lt;param name=&quot;tab&quot;&gt;每行前加制表符个数&lt;/param&gt;\n        private void BuildString(StringBuilder stringBuilder, XmlNode element, int tab)\n        {\n            for (int i = 0; i &lt; tab; i++)\n            {\n                stringBuilder.Append(&quot;\\t&quot;);\n            }\n            stringBuilder.Append(&quot;&lt;&quot;);\n            stringBuilder.Append(element.name);\n            if (element.HasAttribute())\n            {\n                stringBuilder.Append(&quot; &quot;);\n                var attrs = element.GetAttributes();\n                foreach (var key in attrs.Keys)\n                {\n                    stringBuilder.Append(key);\n                    stringBuilder.Append(&quot;=\\&quot;&quot;);\n                    stringBuilder.Append(attrs[key]);\n                    stringBuilder.Append(&quot;\\&quot; &quot;);\n                }\n            }\n            if (element.HasChild())\n            {\n                stringBuilder.AppendLine(&quot;&gt;&quot;);\n                var childern = element.GetElements();\n                foreach (var child in childern)\n                {\n                    BuildString(stringBuilder, child, tab+1);\n                }\n                for (int i = 0; i &lt; tab; i++)\n                {\n                    stringBuilder.Append(&quot;\\t&quot;);\n                }\n                stringBuilder.AppendLine(&quot;&lt;/&quot; + element.name + &quot;&gt;&quot;);\n            }\n            else if (!string.IsNullOrEmpty(element.text))\n            {\n                stringBuilder.Append(&quot;&gt;&quot;);\n                stringBuilder.Append(element.text);\n                stringBuilder.AppendLine(&quot;&lt;/&quot; + element.name + &quot;&gt;&quot;);\n            }\n            else\n            {\n                stringBuilder.AppendLine(&quot; /&gt;&quot;);\n            }\n        }\n\n        private const char LT = &#39;&lt;&#39;;\n        private const char GT = &#39;&gt;&#39;;\n        private const char DASH = &#39;-&#39;;\n        private const char SPACE = &#39; &#39;;\n        private const char QUOTE = &#39;&quot;&#39;;\n        private const char SLASH = &#39;/&#39;;\n        private const char QMARK = &#39;?&#39;;\n        private const char EQUALS = &#39;=&#39;;\n        private const char EXCLAMATION = &#39;!&#39;;\n\n        private enum ElementType\n        {\n            /// &lt;summary&gt;\n            /// 元标签\n            /// &lt;/summary&gt;\n            METATAG,\n            /// &lt;summary&gt;\n            /// 注释\n            /// &lt;/summary&gt;\n            COMMENT,\n            /// &lt;summary&gt;\n            /// 声明\n            /// &lt;/summary&gt;\n            DOCTYPE,\n            /// &lt;summary&gt;\n            /// 字符数据\n            /// &lt;/summary&gt;\n            CDATA,\n            /// &lt;summary&gt;\n            /// 空\n            /// &lt;/summary&gt;\n            NONE,\n        }\n\n        /// &lt;summary&gt;\n        /// Xml解析，会覆盖已存在的XML\n        /// &lt;/summary&gt;\n        /// &lt;param name=&quot;xml&quot;&gt;&lt;/param&gt;\n        public void Parse(string xml)\n        {\n            if(string.IsNullOrEmpty(xml))\n                return;\n            xml = xml.Replace(&quot;\\n&quot;, &quot; &quot;);\n            root = new XmlNode();\n\n            ElementType cType = ElementType.NONE;\n\n            char c; //current char\n            char cp; //c previous\n            char cn; //c next\n            char cnn; // c next next\n            Stack&lt;XmlNode&gt; xmlStack = new Stack&lt;XmlNode&gt;();\n            xmlStack.Push(root);\n            int length = xml.Length;\n            bool collectingName = false;\n            bool collectingAttribute = false;\n            string name = &quot;&quot;;\n            string attr = &quot;&quot;;\n\n            for (int i = 0; i &lt; length; i++)\n            {\n                c = cp = cn = cnn = &#39;\\0&#39;;\n                c = xml[i];\n                if (i &gt; 0) cp = xml[i - 1];\n                if (i + 1 &lt; length) cn = xml[i + 1];\n                if (i + 2 &lt; length) cnn = xml[i + 2];\n\n                if (cType == ElementType.NONE)\n                {\n                    if (c == LT)\n                    {\n                        if (xmlStack.Count &gt; 0)\n                        {\n                            if (!string.IsNullOrEmpty(name.Trim()))// top ele&#39;s text eg.&lt;aa&gt;****&lt;/aa&gt;\n                            {\n                                var node = xmlStack.Peek();\n                                node.text = name.Trim();\n                            }\n                        }\n                        name = &quot;&quot;;\n\n                        if (cn == QMARK)//&lt;?*****?&gt;\n                        {\n                            cType = ElementType.METATAG;\n                            i++;\n                            continue;\n                        }\n                        if (cn == EXCLAMATION &amp;&amp; cnn == DASH)//&lt;!--&gt;\n                        {\n                            cType = ElementType.COMMENT;\n                            i++;\n                            continue;\n                        }\n                        if (cn == EXCLAMATION)//&lt;![[*******&gt;\n                        {\n                            cType = ElementType.DOCTYPE;\n                            i++;\n                            continue;\n                        }\n\n                        if (cn == SLASH)//&lt;/***&gt;\n                        {\n                            cType = ElementType.CDATA;\n                            continue;\n                        }\n                        //create new\n                        cType = ElementType.CDATA;\n                        collectingName = false;\n                        collectingAttribute = false;\n                        name = &quot;&quot;;\n                        attr = &quot;&quot;;\n                        XmlNode xmlNode = new XmlNode();\n                        if (xmlStack.Count &gt; 0)\n                        {\n                            var parent = xmlStack.Peek();\n                            parent.AddChild(xmlNode);\n                        }\n                        xmlStack.Push(xmlNode);\n                        continue;\n                    }\n                    else\n                    {\n                        name += c;\n                    }\n                }\n\n                if (cType == ElementType.METATAG)\n                {\n                    if (c == QMARK &amp;&amp; cn == GT)\n                    {\n                        i++;\n                        cType = ElementType.NONE;\n                        continue;\n                    }\n                    else\n                        continue;\n                }\n                if (cType == ElementType.COMMENT)\n                {\n                    if (c == DASH &amp;&amp; cn == DASH &amp;&amp; cnn == GT)\n                    {\n                        i += 2;\n                        cType = ElementType.NONE;\n                        continue;\n                    }\n                    else\n                        continue;\n                }\n                if (cType == ElementType.DOCTYPE)\n                {\n                    if (c == GT) cType = ElementType.NONE;\n                    continue;\n                }\n\n                if (cType == ElementType.CDATA)\n                {\n                    if (collectingName)\n                    {\n                        if (c == SPACE || c == GT)\n                        {\n                            var node = xmlStack.Peek();\n                            if (string.IsNullOrEmpty(node.name))\n                            {\n                                node.name = name.Trim();\n                                collectingName = false;\n                                name = &quot;&quot;;\n                            }\n                            if (c == GT)\n                            {\n                                cType = ElementType.NONE;\n                                continue;\n                            }\n\n                        }\n                        else if (c == SLASH &amp;&amp; cn == GT)\n                        {\n                            var node = xmlStack.Peek();\n                            node.name = name.Trim();\n                            collectingName = false;\n                            cType = ElementType.NONE;\n                            name = &quot;&quot;;\n                            i++;\n\n                            xmlStack.Pop();\n                            continue;\n                        }\n                        else if (c == EQUALS)\n                        {\n                            if (cn == QUOTE)\n                            {\n                                collectingName = false;\n                                collectingAttribute = true;\n                                attr = &quot;&quot;;\n                                i++;\n                                continue;\n                            }\n                            else\n                                Debug.LogError(&quot;Error: Attribute &#39;\\&quot;&#39; is not near &#39;=&#39; in char index:&quot; + i );\n                        }\n                        else\n                        {\n                            name += c;\n                        }\n                    }\n                    else if(collectingAttribute)\n                    {\n                        if (c == QUOTE)\n                        {\n                            collectingAttribute = false;\n                            var node = xmlStack.Peek();\n                            node.AddAttribute(name.Trim(), attr);\n                            name = &quot;&quot;;\n                            attr = &quot;&quot;;\n                        }\n                        else\n                        {\n                            attr += c;\n                        }\n                    }\n                    else\n                    {\n                        if(c == SPACE) continue;\n\n                        if (c == GT)\n                        {\n                            cType = ElementType.NONE;\n                            continue;\n                        }\n\n                        if (c == SLASH &amp;&amp; cn == GT)\n                        {\n                            cType = ElementType.NONE;\n                            xmlStack.Pop();\n                            i++;\n                            continue;\n                        }\n\n                        if (c == SLASH)\n                        {\n                            name = &quot;&quot;;\n                            int j = i + 1;\n                            for (; j &lt; length; j++)\n                            {\n                                if (xml[j] == GT)\n                                {\n                                    break;\n                                }\n                                else\n                                {\n                                    name += xml[j];\n                                }\n                            }\n\n                            var node = xmlStack.Peek();\n                            if (node.name.Equals(name))\n                            {\n                                xmlStack.Pop();\n                            }\n                            else\n                            {\n                                Debug.LogError(&quot;Error: current is /, name is &quot;+ name + &quot;, but top node name is &quot;+ node.name );\n                            }\n                            i = j;\n                            cType = ElementType.NONE;\n                            name = &quot;&quot;;\n                            continue;\n                        }\n\n                        name += c;\n                        collectingName = true;\n                    }\n                }\n            }\n        }\n\n    }\n\n\n    public class XmlNode\n    {\n        public string text { get; set; }\n        public string name { get; set; }\n        private List&lt;XmlNode&gt; children;\n        private Dictionary&lt;string, string&gt; attributes;\n\n        public XmlNode()\n        {\n            children = new List&lt;XmlNode&gt;();\n            attributes = new Dictionary&lt;string, string&gt;();\n            name = string.Empty;\n            text = string.Empty;\n        }\n\n        public bool HasChild()\n        {\n            return children.Count &gt; 0;\n        }\n\n        public bool HasAttribute()\n        {\n            return attributes.Count &gt; 0;\n        }\n\n        public void AddChild(XmlNode child)\n        {\n            children.Add(child);\n        }\n\n        /// &lt;summary&gt;\n        /// 移除子节点\n        /// &lt;/summary&gt;\n        /// &lt;param name=&quot;index&quot;&gt;从0开始的下标&lt;/param&gt;\n        /// &lt;returns&gt;&lt;/returns&gt;\n        public XmlNode RemoveChild(int index)\n        {\n            if (children.Count &gt; index)\n            {\n                var node = children[index];\n                children.RemoveAt(index);\n                return node;\n            }\n            return null;\n        }\n\n        /// &lt;summary&gt;\n        /// 添加属性，已存在则会覆盖\n        /// &lt;/summary&gt;\n        /// &lt;param name=&quot;key&quot;&gt;&lt;/param&gt;\n        /// &lt;param name=&quot;value&quot;&gt;&lt;/param&gt;\n        public void AddAttribute(string key, string value)\n        {\n            if (attributes.ContainsKey(key))\n                attributes[key] = value;\n            else\n                attributes.Add(key, value);\n        }\n\n        public void RemoveAttribute(string key)\n        {\n            attributes.Remove(key);\n        }\n\n        /// &lt;summary&gt;\n        /// 获取节点\n        /// &lt;/summary&gt;\n        /// &lt;param name=&quot;index&quot;&gt;从0开始的下标&lt;/param&gt;\n        /// &lt;returns&gt;&lt;/returns&gt;\n        public XmlNode GetElement(int index)\n        {\n            if (children.Count &gt; index)\n                return children[index];\n            return null;\n        }\n\n        public XmlNode GetElement(string cname)\n        {\n            foreach (var child in children)\n            {\n                if (child.name.Equals(cname))\n                    return child;\n            }\n            return null;\n        }\n\n        public List&lt;XmlNode&gt; GetElements()\n        {\n            return children;\n        }\n\n        public string GetAttribute(string key)\n        {\n            if (attributes.ContainsKey(key))\n                return attributes[key];\n            return string.Empty;\n        }\n\n        public Dictionary&lt;string, string&gt; GetAttributes()\n        {\n            return attributes;\n        }\n\n        public string[] GetAttributeArray(string key)\n        {\n            string value = GetAttribute(key);\n            return value.Split(&#39;,&#39;);\n        }\n    }\n}\n</code></pre>\n<p>可能会有坑，但是我自己还没遇到…</p>\n"},{"title":"敏感词的字典树匹配（lua版）","date":"2016-07-31T16:00:00.000Z","_content":"\n对于国内互联网和出版物来说，屏蔽敏感词和某些众所周知的秘密是一件老生常谈加司空见惯的事情了。。。上周小白也做了一个这个功能，但是我们属于游戏，要屏蔽的东西十分简单，不用像那些大型网站或者平台一样用专门的算法进行匹配，所以就能省则省。。。但是还是想说蛋疼的模式匹配啊\n## 几种匹配方式对比\n### 普通匹配法\n该方法就是直接进行字符匹配，遍历所有的敏感词列表看看用户的输入中是否有敏感词出现，这种对敏感词少且输入短的来说是无所谓，但是真正的应用，我只能说：呵呵。。。\n### 正则匹配\n我也觉得正则匹配用到此处刚刚好，完全可以担当灵活多变四个字。但是如果是匹配有某些规律的还好说，可敏感词我还真找不出来他都是什么规律，想了想，无奈的放弃吧，当断则断\n### 字典树\n从运营处拿到了两份敏感词，一份是名字，一份是聊天，其中名字有一万行，聊天也特么有一万多行。使用过普通匹配后，猛喷出一口老血，这酸爽。。。无奈，使用了字典树，具体步骤是：a，预先遍历敏感词，构造字典树；b，根据输入匹配。貌似说了一堆废话。。。（其实我也不想，是现在闲了）。\n## 字典树实现\n下面直接上代码吧\n``` csharp\nlocal chat = require \"chat\"\n\nlocal chat_dict\nlocal chat_leaves = {}\n--构造字典树\nlocal function init_chat_dict()\n\tchat_dict = {}\n\tlocal record = chat.table\n\t\n\tfor i = 1, #record do\n\t\tlocal word = record[i]\n\t\tlocal t = chat_dict\n\t\tfor j = 1, #word do \n\t\t\tlocal c = string.byte(word, j)\n\t\t\tif not t[c] then\n\t\t\t\tt[c] = {}\n\t\t\tend\n\t\t\tt = t[c]\n\t\tend\t\t\t\n\t\tchat_leaves[word] = true\n\tend\nend\n\n--匹配\nfunction ShieldChat(msg)\n\tif not chat_dict then\n\t\tinit_chat_dict()\n\tend\n\tlocal matchs = {}\n\tfor i = 1, #msg do\n\t\tlocal p = i\n\t\tlocal q = p\n\t\tlocal t = chat_dict\n\t\twhile true do\n\t\t\tif not t[string.byte(msg,q)] then\n\t\t\t\tq = q - 1\n\t\t\t\tbreak\n\t\t\tend\n\t\t\tt = t[string.byte(msg, q)]\n\t\t\tq = q + 1\n\t\tend\n\t\tif q >= p then\n\t\t\tlocal str = string.sub(msg, p, q)\n\t\t\tif chat_leaves[str] then\n\t\t\t\ttable.insert(matchs, {b = p, e = q, l = (q - p + 1)})\n\t\t\tend\n\t\tend\n\tend\n\tlocal str = msg\n\tfor _,v in ipairs(matchs) do\n\t\tstr = string.sub(str, 1, v.b - 1) .. string.rep(\"*\", v.l) .. string.sub(str, v.e + 1)\n\tend\n\treturn str\nend\n\n```\n以上包含最基本功能，剩下的想加可以自行添加其他要求，并希望能得到大家的其他指导！","source":"_posts/dirty-world-by-lua.md","raw":"---\ntitle: 敏感词的字典树匹配（lua版）\ndate: 2016-8-1\ntags:\n- 敏感词\n- 字典树\n- Lua\ncategories: Unity\n---\n\n对于国内互联网和出版物来说，屏蔽敏感词和某些众所周知的秘密是一件老生常谈加司空见惯的事情了。。。上周小白也做了一个这个功能，但是我们属于游戏，要屏蔽的东西十分简单，不用像那些大型网站或者平台一样用专门的算法进行匹配，所以就能省则省。。。但是还是想说蛋疼的模式匹配啊\n## 几种匹配方式对比\n### 普通匹配法\n该方法就是直接进行字符匹配，遍历所有的敏感词列表看看用户的输入中是否有敏感词出现，这种对敏感词少且输入短的来说是无所谓，但是真正的应用，我只能说：呵呵。。。\n### 正则匹配\n我也觉得正则匹配用到此处刚刚好，完全可以担当灵活多变四个字。但是如果是匹配有某些规律的还好说，可敏感词我还真找不出来他都是什么规律，想了想，无奈的放弃吧，当断则断\n### 字典树\n从运营处拿到了两份敏感词，一份是名字，一份是聊天，其中名字有一万行，聊天也特么有一万多行。使用过普通匹配后，猛喷出一口老血，这酸爽。。。无奈，使用了字典树，具体步骤是：a，预先遍历敏感词，构造字典树；b，根据输入匹配。貌似说了一堆废话。。。（其实我也不想，是现在闲了）。\n## 字典树实现\n下面直接上代码吧\n``` csharp\nlocal chat = require \"chat\"\n\nlocal chat_dict\nlocal chat_leaves = {}\n--构造字典树\nlocal function init_chat_dict()\n\tchat_dict = {}\n\tlocal record = chat.table\n\t\n\tfor i = 1, #record do\n\t\tlocal word = record[i]\n\t\tlocal t = chat_dict\n\t\tfor j = 1, #word do \n\t\t\tlocal c = string.byte(word, j)\n\t\t\tif not t[c] then\n\t\t\t\tt[c] = {}\n\t\t\tend\n\t\t\tt = t[c]\n\t\tend\t\t\t\n\t\tchat_leaves[word] = true\n\tend\nend\n\n--匹配\nfunction ShieldChat(msg)\n\tif not chat_dict then\n\t\tinit_chat_dict()\n\tend\n\tlocal matchs = {}\n\tfor i = 1, #msg do\n\t\tlocal p = i\n\t\tlocal q = p\n\t\tlocal t = chat_dict\n\t\twhile true do\n\t\t\tif not t[string.byte(msg,q)] then\n\t\t\t\tq = q - 1\n\t\t\t\tbreak\n\t\t\tend\n\t\t\tt = t[string.byte(msg, q)]\n\t\t\tq = q + 1\n\t\tend\n\t\tif q >= p then\n\t\t\tlocal str = string.sub(msg, p, q)\n\t\t\tif chat_leaves[str] then\n\t\t\t\ttable.insert(matchs, {b = p, e = q, l = (q - p + 1)})\n\t\t\tend\n\t\tend\n\tend\n\tlocal str = msg\n\tfor _,v in ipairs(matchs) do\n\t\tstr = string.sub(str, 1, v.b - 1) .. string.rep(\"*\", v.l) .. string.sub(str, v.e + 1)\n\tend\n\treturn str\nend\n\n```\n以上包含最基本功能，剩下的想加可以自行添加其他要求，并希望能得到大家的其他指导！","slug":"dirty-world-by-lua","published":1,"updated":"2017-10-26T09:21:43.708Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj9fm90t8000e2cobqz3z7c54","content":"<p>对于国内互联网和出版物来说，屏蔽敏感词和某些众所周知的秘密是一件老生常谈加司空见惯的事情了。。。上周小白也做了一个这个功能，但是我们属于游戏，要屏蔽的东西十分简单，不用像那些大型网站或者平台一样用专门的算法进行匹配，所以就能省则省。。。但是还是想说蛋疼的模式匹配啊</p>\n<h2 id=\"几种匹配方式对比\"><a href=\"#几种匹配方式对比\" class=\"headerlink\" title=\"几种匹配方式对比\"></a>几种匹配方式对比</h2><h3 id=\"普通匹配法\"><a href=\"#普通匹配法\" class=\"headerlink\" title=\"普通匹配法\"></a>普通匹配法</h3><p>该方法就是直接进行字符匹配，遍历所有的敏感词列表看看用户的输入中是否有敏感词出现，这种对敏感词少且输入短的来说是无所谓，但是真正的应用，我只能说：呵呵。。。</p>\n<h3 id=\"正则匹配\"><a href=\"#正则匹配\" class=\"headerlink\" title=\"正则匹配\"></a>正则匹配</h3><p>我也觉得正则匹配用到此处刚刚好，完全可以担当灵活多变四个字。但是如果是匹配有某些规律的还好说，可敏感词我还真找不出来他都是什么规律，想了想，无奈的放弃吧，当断则断</p>\n<h3 id=\"字典树\"><a href=\"#字典树\" class=\"headerlink\" title=\"字典树\"></a>字典树</h3><p>从运营处拿到了两份敏感词，一份是名字，一份是聊天，其中名字有一万行，聊天也特么有一万多行。使用过普通匹配后，猛喷出一口老血，这酸爽。。。无奈，使用了字典树，具体步骤是：a，预先遍历敏感词，构造字典树；b，根据输入匹配。貌似说了一堆废话。。。（其实我也不想，是现在闲了）。</p>\n<h2 id=\"字典树实现\"><a href=\"#字典树实现\" class=\"headerlink\" title=\"字典树实现\"></a>字典树实现</h2><p>下面直接上代码吧</p>\n<pre class=\"line-numbers language-csharp\"><code class=\"language-csharp\">local chat <span class=\"token operator\">=</span> require <span class=\"token string\">\"chat\"</span>\n\nlocal chat_dict\nlocal chat_leaves <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token operator\">--</span>构造字典树\nlocal function <span class=\"token function\">init_chat_dict</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    chat_dict <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n    local record <span class=\"token operator\">=</span> chat<span class=\"token punctuation\">.</span>table\n\n    <span class=\"token keyword\">for</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> #record <span class=\"token keyword\">do</span>\n        local word <span class=\"token operator\">=</span> record<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n        local t <span class=\"token operator\">=</span> chat_dict\n        <span class=\"token keyword\">for</span> j <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> #word <span class=\"token keyword\">do</span> \n            local c <span class=\"token operator\">=</span> <span class=\"token keyword\">string</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">byte</span><span class=\"token punctuation\">(</span>word<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">if</span> not t<span class=\"token punctuation\">[</span>c<span class=\"token punctuation\">]</span> then\n                t<span class=\"token punctuation\">[</span>c<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n            end\n            t <span class=\"token operator\">=</span> t<span class=\"token punctuation\">[</span>c<span class=\"token punctuation\">]</span>\n        end            \n        chat_leaves<span class=\"token punctuation\">[</span>word<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">true</span>\n    end\nend\n\n<span class=\"token operator\">--</span>匹配\nfunction <span class=\"token function\">ShieldChat</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> not chat_dict then\n        <span class=\"token function\">init_chat_dict</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    end\n    local matchs <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> #msg <span class=\"token keyword\">do</span>\n        local p <span class=\"token operator\">=</span> i\n        local q <span class=\"token operator\">=</span> p\n        local t <span class=\"token operator\">=</span> chat_dict\n        <span class=\"token keyword\">while</span> <span class=\"token keyword\">true</span> <span class=\"token keyword\">do</span>\n            <span class=\"token keyword\">if</span> not t<span class=\"token punctuation\">[</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">byte</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">,</span>q<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> then\n                q <span class=\"token operator\">=</span> q <span class=\"token operator\">-</span> <span class=\"token number\">1</span>\n                <span class=\"token keyword\">break</span>\n            end\n            t <span class=\"token operator\">=</span> t<span class=\"token punctuation\">[</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">byte</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">,</span> q<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n            q <span class=\"token operator\">=</span> q <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n        end\n        <span class=\"token keyword\">if</span> q <span class=\"token operator\">>=</span> p then\n            local str <span class=\"token operator\">=</span> <span class=\"token keyword\">string</span><span class=\"token punctuation\">.</span><span class=\"token function\">sub</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">,</span> q<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">if</span> chat_leaves<span class=\"token punctuation\">[</span>str<span class=\"token punctuation\">]</span> then\n                table<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>matchs<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>b <span class=\"token operator\">=</span> p<span class=\"token punctuation\">,</span> e <span class=\"token operator\">=</span> q<span class=\"token punctuation\">,</span> l <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>q <span class=\"token operator\">-</span> p <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n            end\n        end\n    end\n    local str <span class=\"token operator\">=</span> msg\n    <span class=\"token keyword\">for</span> _<span class=\"token punctuation\">,</span>v <span class=\"token keyword\">in</span> <span class=\"token function\">ipairs</span><span class=\"token punctuation\">(</span>matchs<span class=\"token punctuation\">)</span> <span class=\"token keyword\">do</span>\n        str <span class=\"token operator\">=</span> <span class=\"token keyword\">string</span><span class=\"token punctuation\">.</span><span class=\"token function\">sub</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">.</span>b <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token keyword\">string</span><span class=\"token punctuation\">.</span><span class=\"token function\">rep</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"*\"</span><span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">.</span>l<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token keyword\">string</span><span class=\"token punctuation\">.</span><span class=\"token function\">sub</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">.</span>e <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    end\n    <span class=\"token keyword\">return</span> str\nend\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>以上包含最基本功能，剩下的想加可以自行添加其他要求，并希望能得到大家的其他指导！</p>\n","site":{"data":{"gallery":{"美女":{"full_link":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1508912200438&di=d5b3eacf86d8f94c149c6fc68fe4da67&imgtype=0&src=http%3A%2F%2Fpic01.taopic.com%2F151014%2F234732-15101410452229-lp.jpg","thumb_link":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1508912200438&di=d5b3eacf86d8f94c149c6fc68fe4da67&imgtype=0&src=http%3A%2F%2Fpic01.taopic.com%2F151014%2F234732-15101410452229-lp.jpg","descr":"美女插画"}},"links":{"Github":{"link":"https://github.com/garsonlab","avatar":"https://avatars3.githubusercontent.com/u/13958934?s=460&v=4","descr":"My Github","type":"Blog"},"OnLineTools":{"link":"http://tool.lu/","avatar":"http://qn11.tool.lu/201710/15/103320SbM84Ql4tETjg49a_28x28.png","descr":"在线工具","type":"Tools"},"CMDMarkdown":{"link":"https://www.zybuluo.com/","avatar":"https://www.zybuluo.com/static/img/logo.png","descr":"Markdown在线编辑","type":"Tools"},"Hexo文档":{"link":"https://hexo.io/zh-cn/docs/","avatar":"https://hexo.io/logo.svg","descr":"Hexo中文官方文档","type":"Community"},"游戏蛮牛":{"link":"http://www.manew.com/forum.php","avatar":"http://www.manew.com/template/manew2016/images/logo.png","descr":"unity交流社区","type":"Unity"},"FairyGUI":{"link":"http://www.fairygui.com/","avatar":"http://www.fairygui.com/images/20170728151207.png","descr":"FairyGUI官方网站","type":"Site"}},"linktypes":{"Blog":{"name":"关注的博客"},"Unity":{"name":"Unity3D"},"Community":{"name":"浏览的社区"},"Tools":{"name":"工具"},"Site":{"name":"收藏的网址"}}}},"excerpt":"","more":"<p>对于国内互联网和出版物来说，屏蔽敏感词和某些众所周知的秘密是一件老生常谈加司空见惯的事情了。。。上周小白也做了一个这个功能，但是我们属于游戏，要屏蔽的东西十分简单，不用像那些大型网站或者平台一样用专门的算法进行匹配，所以就能省则省。。。但是还是想说蛋疼的模式匹配啊</p>\n<h2 id=\"几种匹配方式对比\"><a href=\"#几种匹配方式对比\" class=\"headerlink\" title=\"几种匹配方式对比\"></a>几种匹配方式对比</h2><h3 id=\"普通匹配法\"><a href=\"#普通匹配法\" class=\"headerlink\" title=\"普通匹配法\"></a>普通匹配法</h3><p>该方法就是直接进行字符匹配，遍历所有的敏感词列表看看用户的输入中是否有敏感词出现，这种对敏感词少且输入短的来说是无所谓，但是真正的应用，我只能说：呵呵。。。</p>\n<h3 id=\"正则匹配\"><a href=\"#正则匹配\" class=\"headerlink\" title=\"正则匹配\"></a>正则匹配</h3><p>我也觉得正则匹配用到此处刚刚好，完全可以担当灵活多变四个字。但是如果是匹配有某些规律的还好说，可敏感词我还真找不出来他都是什么规律，想了想，无奈的放弃吧，当断则断</p>\n<h3 id=\"字典树\"><a href=\"#字典树\" class=\"headerlink\" title=\"字典树\"></a>字典树</h3><p>从运营处拿到了两份敏感词，一份是名字，一份是聊天，其中名字有一万行，聊天也特么有一万多行。使用过普通匹配后，猛喷出一口老血，这酸爽。。。无奈，使用了字典树，具体步骤是：a，预先遍历敏感词，构造字典树；b，根据输入匹配。貌似说了一堆废话。。。（其实我也不想，是现在闲了）。</p>\n<h2 id=\"字典树实现\"><a href=\"#字典树实现\" class=\"headerlink\" title=\"字典树实现\"></a>字典树实现</h2><p>下面直接上代码吧</p>\n<pre><code class=\"csharp\">local chat = require &quot;chat&quot;\n\nlocal chat_dict\nlocal chat_leaves = {}\n--构造字典树\nlocal function init_chat_dict()\n    chat_dict = {}\n    local record = chat.table\n\n    for i = 1, #record do\n        local word = record[i]\n        local t = chat_dict\n        for j = 1, #word do \n            local c = string.byte(word, j)\n            if not t[c] then\n                t[c] = {}\n            end\n            t = t[c]\n        end            \n        chat_leaves[word] = true\n    end\nend\n\n--匹配\nfunction ShieldChat(msg)\n    if not chat_dict then\n        init_chat_dict()\n    end\n    local matchs = {}\n    for i = 1, #msg do\n        local p = i\n        local q = p\n        local t = chat_dict\n        while true do\n            if not t[string.byte(msg,q)] then\n                q = q - 1\n                break\n            end\n            t = t[string.byte(msg, q)]\n            q = q + 1\n        end\n        if q &gt;= p then\n            local str = string.sub(msg, p, q)\n            if chat_leaves[str] then\n                table.insert(matchs, {b = p, e = q, l = (q - p + 1)})\n            end\n        end\n    end\n    local str = msg\n    for _,v in ipairs(matchs) do\n        str = string.sub(str, 1, v.b - 1) .. string.rep(&quot;*&quot;, v.l) .. string.sub(str, v.e + 1)\n    end\n    return str\nend\n</code></pre>\n<p>以上包含最基本功能，剩下的想加可以自行添加其他要求，并希望能得到大家的其他指导！</p>\n"},{"title":"一个简单的着色器","date":"2016-09-22T16:00:00.000Z","_content":"\n一直在关注[CandyCat的博客](http://blog.csdn.net/candycat1992)，所以在第一时间买了她新出的《Unity Shader 入门精要》，看了好久才记得要做读书笔记...是不是可以换句话说书写的太精彩忘记了\n目前为止，第6章快看完了，回顾第五章讲的基础，就是一个简单的定点片元着色器，代码及注释如下：\n``` cpp\nShader \"Mine/5_SimpleShader\"\n{\n\tProperties{\n\t\t_Color (\"Color Tint\", Color) = (1.0,1.0,1.0,1.0)\n\t}\n\tSubShader{\n\t\tPass{\n\t\t\tCGPROGRAM\n\t\t\t\t#pragma vertex vert\n\t\t\t\t#pragma fragment frag\n\n\t\t\t\tfixed4 _Color;\n\t\t\t\t//input\n\t\t\t\tstruct a2v {\n\t\t\t\t\tfloat4 vertex : POSITION; // 用模型空间定点填充vertex\n\t\t\t\t\tfloat4 normal : NORMAL; // 用模型空间的法线填充\n\t\t\t\t\tfloat4 texcoord : TEXCOORD0; // 用第一套纹理填充\n\t\t\t\t};\n\n\t\t\t\t//vertex output\n\t\t\t\tstruct v2f {\n\t\t\t\t\tfloat4 pos : SV_POSITION; // 裁剪空间中的位置信息填充pos\n\t\t\t\t\tfixed3 color : COLOR0; // 储存颜色信息\n\t\t\t\t};\n\n\t\t\t\tv2f vert(a2v v) { //SV_POSITION意思是输出的是裁剪空间坐标\n\t\t\t\t\tv2f o;\n\t\t\t\t\to.pos = mul(UNITY_MATRIX_MVP, v.vertex); //转换到裁剪空间,顶点着色器中必须包含一个 SV_POSITION,否则无法得到裁剪空间中的坐标\n\t\t\t\t\to.color = v.normal * 0.5 + fixed3(0.5, 0.5, 0.5);//normal 范围（－1，1），color范围则成了（0，1）\n\t\t\t\t\treturn o;\n\t\t\t\t}\n\n\t\t\t\tfixed4 frag(v2f i) : SV_Target { //SV_Target 把输出的颜色储存到默认帧缓冲\n\t\t\t\t\treturn fixed4(i.color * _Color, 1.0);\n\t\t\t\t}\n\n\t\t\tENDCG\n\t\t}\n\t}\n}\n```\n\n还有，以后记得自己实践并记录！","source":"_posts/a-simple-shader.md","raw":"---\ntitle: 一个简单的着色器\ndate: 2016-9-23\ntags:\n- Shader\n- Unity\ncategories: UnityShader\n---\n\n一直在关注[CandyCat的博客](http://blog.csdn.net/candycat1992)，所以在第一时间买了她新出的《Unity Shader 入门精要》，看了好久才记得要做读书笔记...是不是可以换句话说书写的太精彩忘记了\n目前为止，第6章快看完了，回顾第五章讲的基础，就是一个简单的定点片元着色器，代码及注释如下：\n``` cpp\nShader \"Mine/5_SimpleShader\"\n{\n\tProperties{\n\t\t_Color (\"Color Tint\", Color) = (1.0,1.0,1.0,1.0)\n\t}\n\tSubShader{\n\t\tPass{\n\t\t\tCGPROGRAM\n\t\t\t\t#pragma vertex vert\n\t\t\t\t#pragma fragment frag\n\n\t\t\t\tfixed4 _Color;\n\t\t\t\t//input\n\t\t\t\tstruct a2v {\n\t\t\t\t\tfloat4 vertex : POSITION; // 用模型空间定点填充vertex\n\t\t\t\t\tfloat4 normal : NORMAL; // 用模型空间的法线填充\n\t\t\t\t\tfloat4 texcoord : TEXCOORD0; // 用第一套纹理填充\n\t\t\t\t};\n\n\t\t\t\t//vertex output\n\t\t\t\tstruct v2f {\n\t\t\t\t\tfloat4 pos : SV_POSITION; // 裁剪空间中的位置信息填充pos\n\t\t\t\t\tfixed3 color : COLOR0; // 储存颜色信息\n\t\t\t\t};\n\n\t\t\t\tv2f vert(a2v v) { //SV_POSITION意思是输出的是裁剪空间坐标\n\t\t\t\t\tv2f o;\n\t\t\t\t\to.pos = mul(UNITY_MATRIX_MVP, v.vertex); //转换到裁剪空间,顶点着色器中必须包含一个 SV_POSITION,否则无法得到裁剪空间中的坐标\n\t\t\t\t\to.color = v.normal * 0.5 + fixed3(0.5, 0.5, 0.5);//normal 范围（－1，1），color范围则成了（0，1）\n\t\t\t\t\treturn o;\n\t\t\t\t}\n\n\t\t\t\tfixed4 frag(v2f i) : SV_Target { //SV_Target 把输出的颜色储存到默认帧缓冲\n\t\t\t\t\treturn fixed4(i.color * _Color, 1.0);\n\t\t\t\t}\n\n\t\t\tENDCG\n\t\t}\n\t}\n}\n```\n\n还有，以后记得自己实践并记录！","slug":"a-simple-shader","published":1,"updated":"2017-10-26T09:27:10.588Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj9fm90tb000f2cob503x9w9s","content":"<p>一直在关注<a href=\"http://blog.csdn.net/candycat1992\" target=\"_blank\" rel=\"external\">CandyCat的博客</a>，所以在第一时间买了她新出的《Unity Shader 入门精要》，看了好久才记得要做读书笔记…是不是可以换句话说书写的太精彩忘记了<br>目前为止，第6章快看完了，回顾第五章讲的基础，就是一个简单的定点片元着色器，代码及注释如下：</p>\n<pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\">Shader <span class=\"token string\">\"Mine/5_SimpleShader\"</span>\n<span class=\"token punctuation\">{</span>\n    Properties<span class=\"token punctuation\">{</span>\n        <span class=\"token function\">_Color</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"Color Tint\"</span><span class=\"token punctuation\">,</span> Color<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1.0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1.0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1.0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1.0</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    SubShader<span class=\"token punctuation\">{</span>\n        Pass<span class=\"token punctuation\">{</span>\n            CGPROGRAM\n                <span class=\"token macro property\">#<span class=\"token directive keyword\">pragma</span> vertex vert</span>\n                <span class=\"token macro property\">#<span class=\"token directive keyword\">pragma</span> fragment frag</span>\n\n                fixed4 _Color<span class=\"token punctuation\">;</span>\n                <span class=\"token comment\" spellcheck=\"true\">//input</span>\n                <span class=\"token keyword\">struct</span> a2v <span class=\"token punctuation\">{</span>\n                    float4 vertex <span class=\"token operator\">:</span> POSITION<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// 用模型空间定点填充vertex</span>\n                    float4 normal <span class=\"token operator\">:</span> NORMAL<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// 用模型空间的法线填充</span>\n                    float4 texcoord <span class=\"token operator\">:</span> TEXCOORD0<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// 用第一套纹理填充</span>\n                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n                <span class=\"token comment\" spellcheck=\"true\">//vertex output</span>\n                <span class=\"token keyword\">struct</span> v2f <span class=\"token punctuation\">{</span>\n                    float4 pos <span class=\"token operator\">:</span> SV_POSITION<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// 裁剪空间中的位置信息填充pos</span>\n                    fixed3 color <span class=\"token operator\">:</span> COLOR0<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// 储存颜色信息</span>\n                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n                v2f <span class=\"token function\">vert</span><span class=\"token punctuation\">(</span>a2v v<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\" spellcheck=\"true\">//SV_POSITION意思是输出的是裁剪空间坐标</span>\n                    v2f o<span class=\"token punctuation\">;</span>\n                    o<span class=\"token punctuation\">.</span>pos <span class=\"token operator\">=</span> <span class=\"token function\">mul</span><span class=\"token punctuation\">(</span>UNITY_MATRIX_MVP<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">.</span>vertex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">//转换到裁剪空间,顶点着色器中必须包含一个 SV_POSITION,否则无法得到裁剪空间中的坐标</span>\n                    o<span class=\"token punctuation\">.</span>color <span class=\"token operator\">=</span> v<span class=\"token punctuation\">.</span>normal <span class=\"token operator\">*</span> <span class=\"token number\">0.5</span> <span class=\"token operator\">+</span> <span class=\"token function\">fixed3</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//normal 范围（－1，1），color范围则成了（0，1）</span>\n                    <span class=\"token keyword\">return</span> o<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n\n                fixed4 <span class=\"token function\">frag</span><span class=\"token punctuation\">(</span>v2f i<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> SV_Target <span class=\"token punctuation\">{</span> <span class=\"token comment\" spellcheck=\"true\">//SV_Target 把输出的颜色储存到默认帧缓冲</span>\n                    <span class=\"token keyword\">return</span> <span class=\"token function\">fixed4</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">.</span>color <span class=\"token operator\">*</span> _Color<span class=\"token punctuation\">,</span> <span class=\"token number\">1.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n\n            ENDCG\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>还有，以后记得自己实践并记录！</p>\n","site":{"data":{"gallery":{"美女":{"full_link":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1508912200438&di=d5b3eacf86d8f94c149c6fc68fe4da67&imgtype=0&src=http%3A%2F%2Fpic01.taopic.com%2F151014%2F234732-15101410452229-lp.jpg","thumb_link":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1508912200438&di=d5b3eacf86d8f94c149c6fc68fe4da67&imgtype=0&src=http%3A%2F%2Fpic01.taopic.com%2F151014%2F234732-15101410452229-lp.jpg","descr":"美女插画"}},"links":{"Github":{"link":"https://github.com/garsonlab","avatar":"https://avatars3.githubusercontent.com/u/13958934?s=460&v=4","descr":"My Github","type":"Blog"},"OnLineTools":{"link":"http://tool.lu/","avatar":"http://qn11.tool.lu/201710/15/103320SbM84Ql4tETjg49a_28x28.png","descr":"在线工具","type":"Tools"},"CMDMarkdown":{"link":"https://www.zybuluo.com/","avatar":"https://www.zybuluo.com/static/img/logo.png","descr":"Markdown在线编辑","type":"Tools"},"Hexo文档":{"link":"https://hexo.io/zh-cn/docs/","avatar":"https://hexo.io/logo.svg","descr":"Hexo中文官方文档","type":"Community"},"游戏蛮牛":{"link":"http://www.manew.com/forum.php","avatar":"http://www.manew.com/template/manew2016/images/logo.png","descr":"unity交流社区","type":"Unity"},"FairyGUI":{"link":"http://www.fairygui.com/","avatar":"http://www.fairygui.com/images/20170728151207.png","descr":"FairyGUI官方网站","type":"Site"}},"linktypes":{"Blog":{"name":"关注的博客"},"Unity":{"name":"Unity3D"},"Community":{"name":"浏览的社区"},"Tools":{"name":"工具"},"Site":{"name":"收藏的网址"}}}},"excerpt":"","more":"<p>一直在关注<a href=\"http://blog.csdn.net/candycat1992\" target=\"_blank\" rel=\"external\">CandyCat的博客</a>，所以在第一时间买了她新出的《Unity Shader 入门精要》，看了好久才记得要做读书笔记…是不是可以换句话说书写的太精彩忘记了<br>目前为止，第6章快看完了，回顾第五章讲的基础，就是一个简单的定点片元着色器，代码及注释如下：</p>\n<pre><code class=\"cpp\">Shader &quot;Mine/5_SimpleShader&quot;\n{\n    Properties{\n        _Color (&quot;Color Tint&quot;, Color) = (1.0,1.0,1.0,1.0)\n    }\n    SubShader{\n        Pass{\n            CGPROGRAM\n                #pragma vertex vert\n                #pragma fragment frag\n\n                fixed4 _Color;\n                //input\n                struct a2v {\n                    float4 vertex : POSITION; // 用模型空间定点填充vertex\n                    float4 normal : NORMAL; // 用模型空间的法线填充\n                    float4 texcoord : TEXCOORD0; // 用第一套纹理填充\n                };\n\n                //vertex output\n                struct v2f {\n                    float4 pos : SV_POSITION; // 裁剪空间中的位置信息填充pos\n                    fixed3 color : COLOR0; // 储存颜色信息\n                };\n\n                v2f vert(a2v v) { //SV_POSITION意思是输出的是裁剪空间坐标\n                    v2f o;\n                    o.pos = mul(UNITY_MATRIX_MVP, v.vertex); //转换到裁剪空间,顶点着色器中必须包含一个 SV_POSITION,否则无法得到裁剪空间中的坐标\n                    o.color = v.normal * 0.5 + fixed3(0.5, 0.5, 0.5);//normal 范围（－1，1），color范围则成了（0，1）\n                    return o;\n                }\n\n                fixed4 frag(v2f i) : SV_Target { //SV_Target 把输出的颜色储存到默认帧缓冲\n                    return fixed4(i.color * _Color, 1.0);\n                }\n\n            ENDCG\n        }\n    }\n}\n</code></pre>\n<p>还有，以后记得自己实践并记录！</p>\n"},{"title":"Hello World Hexo","date":"2016-05-31T16:00:00.000Z","updated":"2017-10-24T16:00:00.000Z","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world-hexo.md","raw":"---\ntitle: Hello World Hexo\ndate: 2016-6-1\nupdated: 2017-10-25\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world-hexo","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cj9fm90tf000j2cob8v2qlkc2","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"external\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"external\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"external\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"external\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><pre class=\"line-numbers language-bash\"><code class=\"language-bash\">$ hexo new <span class=\"token string\">\"My New Post\"</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"external\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><pre class=\"line-numbers language-bash\"><code class=\"language-bash\">$ hexo server\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"external\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><pre class=\"line-numbers language-bash\"><code class=\"language-bash\">$ hexo generate\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"external\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><pre class=\"line-numbers language-bash\"><code class=\"language-bash\">$ hexo deploy\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"external\">Deployment</a></p>\n","site":{"data":{"gallery":{"美女":{"full_link":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1508912200438&di=d5b3eacf86d8f94c149c6fc68fe4da67&imgtype=0&src=http%3A%2F%2Fpic01.taopic.com%2F151014%2F234732-15101410452229-lp.jpg","thumb_link":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1508912200438&di=d5b3eacf86d8f94c149c6fc68fe4da67&imgtype=0&src=http%3A%2F%2Fpic01.taopic.com%2F151014%2F234732-15101410452229-lp.jpg","descr":"美女插画"}},"links":{"Github":{"link":"https://github.com/garsonlab","avatar":"https://avatars3.githubusercontent.com/u/13958934?s=460&v=4","descr":"My Github","type":"Blog"},"OnLineTools":{"link":"http://tool.lu/","avatar":"http://qn11.tool.lu/201710/15/103320SbM84Ql4tETjg49a_28x28.png","descr":"在线工具","type":"Tools"},"CMDMarkdown":{"link":"https://www.zybuluo.com/","avatar":"https://www.zybuluo.com/static/img/logo.png","descr":"Markdown在线编辑","type":"Tools"},"Hexo文档":{"link":"https://hexo.io/zh-cn/docs/","avatar":"https://hexo.io/logo.svg","descr":"Hexo中文官方文档","type":"Community"},"游戏蛮牛":{"link":"http://www.manew.com/forum.php","avatar":"http://www.manew.com/template/manew2016/images/logo.png","descr":"unity交流社区","type":"Unity"},"FairyGUI":{"link":"http://www.fairygui.com/","avatar":"http://www.fairygui.com/images/20170728151207.png","descr":"FairyGUI官方网站","type":"Site"}},"linktypes":{"Blog":{"name":"关注的博客"},"Unity":{"name":"Unity3D"},"Community":{"name":"浏览的社区"},"Tools":{"name":"工具"},"Site":{"name":"收藏的网址"}}}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"external\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"external\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"external\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"external\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><pre><code class=\"bash\">$ hexo new &quot;My New Post&quot;\n</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"external\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><pre><code class=\"bash\">$ hexo server\n</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"external\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><pre><code class=\"bash\">$ hexo generate\n</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"external\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><pre><code class=\"bash\">$ hexo deploy\n</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"external\">Deployment</a></p>\n"},{"title":"Hello World","date":"2016-06-03T16:00:00.000Z","_content":"\n从来没有写过博文，虽然从几年前就开始计划写自己的东西，或者起码把自己遇到的问题记录下来，然后某天自己可以再看看...于是，我把所有的问题归结为：懒！\n五年前（好吧一看时间感觉很久了——满满沧桑感。。。），2011年进入大学开始接触程序，无论哪种语言第一行必须是： \"Hello World !\" ，我认为这祸害了我，不管第一次做出来什么东西都有想说一句helloworld的冲动。偶然间听到、看到其他人说关于类似事情的时候，我也会想，等以后退休了练习书法，第一个写出来的是不是也会是Hello World，这是愚、悲还是专呢。。。\n一年零一个月前，参加完研究生复试通过，但还是一狠心一咬牙给放弃了，一个人拖着皮箱背着书包来到了这里，紧张、不安、彷徨、迷茫、害怕、无助充满了心中。。。好吧不堪回首，最主要的是发现自己词穷了，一年的程序经历，发现自己不会说话了，留给自己有感而发时再写吧","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\ndate: 2016-6-4\n---\n\n从来没有写过博文，虽然从几年前就开始计划写自己的东西，或者起码把自己遇到的问题记录下来，然后某天自己可以再看看...于是，我把所有的问题归结为：懒！\n五年前（好吧一看时间感觉很久了——满满沧桑感。。。），2011年进入大学开始接触程序，无论哪种语言第一行必须是： \"Hello World !\" ，我认为这祸害了我，不管第一次做出来什么东西都有想说一句helloworld的冲动。偶然间听到、看到其他人说关于类似事情的时候，我也会想，等以后退休了练习书法，第一个写出来的是不是也会是Hello World，这是愚、悲还是专呢。。。\n一年零一个月前，参加完研究生复试通过，但还是一狠心一咬牙给放弃了，一个人拖着皮箱背着书包来到了这里，紧张、不安、彷徨、迷茫、害怕、无助充满了心中。。。好吧不堪回首，最主要的是发现自己词穷了，一年的程序经历，发现自己不会说话了，留给自己有感而发时再写吧","slug":"hello-world","published":1,"updated":"2017-10-26T08:51:32.266Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj9fm90ti000l2cob654nloih","content":"<p>从来没有写过博文，虽然从几年前就开始计划写自己的东西，或者起码把自己遇到的问题记录下来，然后某天自己可以再看看…于是，我把所有的问题归结为：懒！<br>五年前（好吧一看时间感觉很久了——满满沧桑感。。。），2011年进入大学开始接触程序，无论哪种语言第一行必须是： “Hello World !” ，我认为这祸害了我，不管第一次做出来什么东西都有想说一句helloworld的冲动。偶然间听到、看到其他人说关于类似事情的时候，我也会想，等以后退休了练习书法，第一个写出来的是不是也会是Hello World，这是愚、悲还是专呢。。。<br>一年零一个月前，参加完研究生复试通过，但还是一狠心一咬牙给放弃了，一个人拖着皮箱背着书包来到了这里，紧张、不安、彷徨、迷茫、害怕、无助充满了心中。。。好吧不堪回首，最主要的是发现自己词穷了，一年的程序经历，发现自己不会说话了，留给自己有感而发时再写吧</p>\n","site":{"data":{"gallery":{"美女":{"full_link":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1508912200438&di=d5b3eacf86d8f94c149c6fc68fe4da67&imgtype=0&src=http%3A%2F%2Fpic01.taopic.com%2F151014%2F234732-15101410452229-lp.jpg","thumb_link":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1508912200438&di=d5b3eacf86d8f94c149c6fc68fe4da67&imgtype=0&src=http%3A%2F%2Fpic01.taopic.com%2F151014%2F234732-15101410452229-lp.jpg","descr":"美女插画"}},"links":{"Github":{"link":"https://github.com/garsonlab","avatar":"https://avatars3.githubusercontent.com/u/13958934?s=460&v=4","descr":"My Github","type":"Blog"},"OnLineTools":{"link":"http://tool.lu/","avatar":"http://qn11.tool.lu/201710/15/103320SbM84Ql4tETjg49a_28x28.png","descr":"在线工具","type":"Tools"},"CMDMarkdown":{"link":"https://www.zybuluo.com/","avatar":"https://www.zybuluo.com/static/img/logo.png","descr":"Markdown在线编辑","type":"Tools"},"Hexo文档":{"link":"https://hexo.io/zh-cn/docs/","avatar":"https://hexo.io/logo.svg","descr":"Hexo中文官方文档","type":"Community"},"游戏蛮牛":{"link":"http://www.manew.com/forum.php","avatar":"http://www.manew.com/template/manew2016/images/logo.png","descr":"unity交流社区","type":"Unity"},"FairyGUI":{"link":"http://www.fairygui.com/","avatar":"http://www.fairygui.com/images/20170728151207.png","descr":"FairyGUI官方网站","type":"Site"}},"linktypes":{"Blog":{"name":"关注的博客"},"Unity":{"name":"Unity3D"},"Community":{"name":"浏览的社区"},"Tools":{"name":"工具"},"Site":{"name":"收藏的网址"}}}},"excerpt":"","more":"<p>从来没有写过博文，虽然从几年前就开始计划写自己的东西，或者起码把自己遇到的问题记录下来，然后某天自己可以再看看…于是，我把所有的问题归结为：懒！<br>五年前（好吧一看时间感觉很久了——满满沧桑感。。。），2011年进入大学开始接触程序，无论哪种语言第一行必须是： “Hello World !” ，我认为这祸害了我，不管第一次做出来什么东西都有想说一句helloworld的冲动。偶然间听到、看到其他人说关于类似事情的时候，我也会想，等以后退休了练习书法，第一个写出来的是不是也会是Hello World，这是愚、悲还是专呢。。。<br>一年零一个月前，参加完研究生复试通过，但还是一狠心一咬牙给放弃了，一个人拖着皮箱背着书包来到了这里，紧张、不安、彷徨、迷茫、害怕、无助充满了心中。。。好吧不堪回首，最主要的是发现自己词穷了，一年的程序经历，发现自己不会说话了，留给自己有感而发时再写吧</p>\n"},{"title":"unity点选构建Mesh并保存OBJ","date":"2016-06-07T16:00:00.000Z","_content":"\n最近有一份需求，就是让策划任意选择可一片区域，表明是有某种用途的。埋头写了两头，试了三四种方法，最终不得已用小方格来代替，并最终构建mesh保存下来，这样做程序的就很方便用了。我们的目标就是没有蛀牙大笑oh，应该是累死别人，轻松自己！！！\n\n## 简单shader编写\n写一个Shader的目的是来显示我们的所编辑的内容，具体代码如下：\n``` cpp\nShader \"Custom/BlockShader\" {\n\tProperties {\n\t\t_MainTex (\"Base (RGB)\", 2D) = \"white\" {}\n\t\t_Size (\"Size\",Vector) = (64,32,0,0) //在面板上显示长多少格，宽多少格\n\t\t_Color (\"Color\", Color) = (0,0,0,0.5)\n\t\t_RimColor (\"Rim Color\", Color) = (1,1,0,1)\n\t\t_RimPower (\"Rim Power\", Range(0,0.2)) = 0.01\n\t\t_HitPoint (\"Hit Point\",Vector) = (0.0,1,0.0,0.5)//鼠标点击点\n\t\t_SelectColor (\"Select Color\",Color) = (0,1,0,1)//选中颜色\n\t\t_HitColor (\"Already hit Color\", Color) = (0.2,0.8,0.9,0.5)\n\t}\n\tSubShader {\n\t\tTags { \"Queue\"=\"Transparent\" }\n\t\t\n\t\tCGPROGRAM\n\t\t#pragma surface surf Lambert alpha\n\t\t#pragma target 3.0\n\n\t\tsampler2D _MainTex;\n\t\thalf4 _Size;\n\t\tfixed4 _Color;\n\t\tfixed4 _RimColor;\n\t\tfloat _RimPower;\n\t\tfloat4 _HitPoint;\n\t\tfixed4 _SelectColor;\n\t\tfixed4 _HitColor;\n\n\t\tstruct Input {\n\t\t\tfloat2 uv_MainTex;\n\t\t};\n\n\t\tvoid surf (Input IN, inout SurfaceOutput o) {\n\t\t\tfloat2 uv = IN.uv_MainTex;\n\t\t\tfixed4 c = _Color;\n\t\t\tfloat radiox = 1.0 / (_Size.x * 2);//每格大小的一半\n\t\t\tfloat radioy = 1.0 / (_Size.y * 2);\n\n\t\t\tfloat nx = floor(uv.x/(radiox * 2)) * radiox * 2 + radiox;//找到格的中心点\n\t\t\tfloat ny = floor(uv.y/(radioy * 2)) * radioy * 2 + radioy;\n\t\t\tfixed4 tc = tex2D (_MainTex, float2(nx,ny) );\n\t\t\tif(tc.g > 0.85) //因为选中我设置为了绿色（0,1,0,1）\n\t\t\t{\n\t\t\t\tc = _HitColor;\n\t\t\t\t//if(uv.x >= nx-radiox && uv.x <nx+ radiox && uv.y >= ny-radioy && uv.y <= ny+radioy)\n\t\t\t\t//{ \n\t\t\t\t//\tc = _HitColor;\n\t\t\t\t//}\n\t\t\t}\n\n\n\t\t\tif(uv.x >= _HitPoint.x-radiox && uv.x <_HitPoint.x+ radiox && uv.y >= _HitPoint.y-radioy && uv.y <= _HitPoint.y+radioy)\n\t\t\t{ \n\t\t\t\tc = _SelectColor;//选中颜色\n\t\t\t}\n\n\t\t\tif(fmod(uv.x ,(radiox * 2)) < (radiox * 2) * _RimPower)//边框\n\t\t\t{\n\t\t\t\tc = _RimColor;\n\t\t\t}\n\t\t\tif(fmod(uv.y ,(radioy * 2)) < (radioy * 2) * _RimPower)\n\t\t\t{\n\t\t\t\tc = _RimColor;\n\t\t\t}\n\n\t\t\to.Albedo = c.rgb;\n\t\t\to.Alpha = 0.5;\n\t\t}\n\t\tENDCG\n\t} \n\tFallBack \"Diffuse\"\n}\n\n```\n\n我知道，以上写的很粗糙。。。但是，谁让我是pc上用的呢，谁还管效率是毛线\n下一步，需要每套的脚本控制\n\n## 编写控制脚本\n主要是为了运行时，通过点击生成方格\n\n``` csharp\nusing System.Collections.Generic;\nusing UnityEngine;\n\n/**\n * \n * 用于编辑器美术使用脚本，功能为画地形方块\n * \n */\npublic class TerrianBlockControl : MonoBehaviour\n{\n    public int width;\n    public int height;\n    public Texture2D texture;\n#if UNITY_EDITOR\n    private Material material;\n    private MeshRenderer meshRenderer;\n    private RaycastHit hit;\n    private float ratioW;\n    private float ratioH;\n    private int[,] matrix;\n\n    void Start()\n    {\n        meshRenderer = GetComponent<MeshRenderer>();\n        material = meshRenderer.material;\n        texture = new Texture2D(width * 3, height * 3);\n\n        material.SetTexture(\"_MainTex\", texture);\n        ratioW = 1.0f/width;\n        ratioH = 1.0f/height;\n        material.SetVector(\"_Size\", new Vector4(width, height, 0, 0));\n        matrix = new int[width,height];\n        MatrixInit();\n    }\n\n\n\n    public void ChangeSize(int x, int y)\n    {\n        width = x;\n        height = y;\n        ratioW = 1.0f / width;\n        ratioH = 1.0f / height;\n        matrix = new int[width,height];\n        MatrixInit();\n    }\n\n    public void Update()\n    {\n        Ray ray = Camera.main.ScreenPointToRay(Input.mousePosition);\n        if (Physics.Raycast(ray, out hit))\n        {//算出每个方格的正中心坐标\n            float x = Mathf.FloorToInt(hit.textureCoord.x/ratioW)*ratioW + ratioW*0.5f;\n            float y = Mathf.FloorToInt(hit.textureCoord.y / ratioH) * ratioH + ratioH * 0.5f;\n            material.SetVector(\"_HitPoint\",new Vector4(x,y,0,0));\n        }\n        if (Input.GetMouseButtonDown(0))\n        {//算出所在格子的坐标\n            int x = Mathf.FloorToInt(hit.textureCoord.x/ratioW) * 3 + 1;\n            int y = Mathf.FloorToInt(hit.textureCoord.y/ratioH) * 3 + 1;\n            Color  c = texture.GetPixel(x, y);\n            if (c.g >= 0.9f)\n            {\n                texture.SetPixel(x, y, Color.black);\n                matrix[(x - 1) / 3, (y - 1) / 3] = 0;\n            }\n            else\n            {\n                texture.SetPixel(x, y, Color.green);\n                matrix[(x - 1) / 3, (y - 1) / 3] = 1;\n            }\n            texture.Apply(true);\n            material.SetTexture(\"_MainTex\",texture);\n        }\n    }\n\n    void MatrixInit()\n    {\n        for (int i = 0; i < width; i++)\n        {\n            for (int j = 0; j < height; j++)\n            {\n                matrix[i, j] = 0;\n            }\n        }\n    }\n\n    List<rect> rects;\n    [ContextMenu(\"Save\")]\n    public GameObject Save()\n    {\n        rects = new List<rect>();\n        for (int i = 0; i < width; i++) //合并，把我们已经画好的方格进行合并\n        {\n            for (int j = 0; j < height; j++)\n            {\n                if (matrix[i, j] == 1)\n                {\n                    rect r = new rect();\n                    r.dl = new Vector3(i,j,0);\n                    r.dr = new Vector3(i+1,j,0);\n                    r.ul = new Vector3(i,j+1,0);\n                    r.ur = new Vector3(i+1,j+1);\n                    r.length = 1;\n                    matrix[i, j] = 0;\n                    \n\n                    for (int k = i+1; k < width; k++) //在width方向上进行合并\n                    {\n                        if (matrix[k, j] == 1)\n                        {\n                            r.dr=new Vector3(k+1,j,0);\n                            r.ur = new Vector3(k+1,j+1,0);\n                            matrix[k, j] = 0;\n                            r.length++;\n                        }\n                        else\n                        {\n                            break;\n                        }\n                    }\n\n                    for (int k = i-1; k >= 0; k--)\n                    {\n                        if (matrix[k, j] == 1)\n                        {\n                            r.dl = new Vector3(k,j,0);\n                            r.ul = new Vector3(k,j+1,0);\n                            matrix[k, j] = 0;\n                            r.length++;\n                        }\n                        else\n                        {\n                            break;\n                        }\n                    }\n                    rects.Add(r);\n                }\n            }\n        }\n        \n        for (int i = 0; i < rects.Count; i++) //把合并过的，相邻的且大小相等的再合并\n        {\n            if (!rects[i].used && rects[i].length != 0)\n            {\n                for (int j = 0; j < rects.Count; j++)\n                {//没有合并过  不是自身  \n                    if (!rects[j].used && i != j && rects[j].length != 0)\n                    {\n                        if (rects[i].length == rects[j].length)\n                        {\n                            if (rects[i].dl.x == rects[j].dl.x)\n                            {\n                                if (rects[i].ul.y - rects[j].ul.y == 1)\n                                {\n                                    rects[i].dl = rects[j].dl;\n                                    rects[i].dr = rects[j].dr;\n                                    \n                                    rects[i].used = true;\n                                    rects[j].length = 0;\n                                }\n                                if (rects[i].ul.y - rects[j].ul.y == -1)\n                                {\n                                    rects[i].ul = rects[j].ul;\n                                    rects[i].ur = rects[j].ur;\n\n                                    rects[i].used = true;\n                                    rects[j].length = 0;\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n\n            if (rects[i].length != 0 && rects[i].ul.y - rects[i].dl.y == 1)\n                rects[i].used = true;\n        }\n\n        return creat(rects);\n    }\n\n    class rect\n    {\n        public Vector3 dl;\n        public Vector3 dr;\n        public Vector3 ul;\n        public Vector3 ur;\n        public int length;\n        public bool used;\n    }\n//创建mesh\n    GameObject creat(List<rect> rects_Old )\n    {\n        List<rect> rects = new List<rect>();\n        foreach (var rr in rects_Old)\n        {\n            if(rr.used)\n                rects.Add(rr);\n        }\n        GameObject mp = GameObject.Find(\"MaskParent\");\n        if(mp == null)\n            mp = new GameObject(\"MaskParent\");\n        mp.transform.position = Vector3.zero;\n\n        GameObject go = new GameObject(transform.name);\n        go.transform.parent = mp.transform;\n        go.transform.localPosition = Vector3.zero;\n        MeshFilter mf = go.AddComponent<MeshFilter>();\n        MeshRenderer mr = go.AddComponent<MeshRenderer>();\n        mr.material = new Material(Shader.Find(\"Diffuse\"));\n\n        Mesh mesh = new Mesh();\n        Vector3[] vectices = new Vector3[rects.Count*4];\n        int[] trangles = new int[rects.Count * 6];\n\n        Vector3 startPos = transform.position;\n\n        float scalex = transform.localScale.x;\n        float scaley = transform.localScale.y;\n        startPos.x -= scalex * 0.5f;\n        startPos.z -= scaley * 0.5f;\n\n        int len = 0;\n        for (int i = 0; i < rects.Count; i++)\n        {//添加mesh的Vectices\n            rect r = rects[i];\n            Vector3 dl = new Vector3(startPos.x + ratioW * r.dl.x * scalex, startPos.z + ratioH * r.dl.y * scaley, 0);\n\n            Vector3 dr = new Vector3(startPos.x + ratioW * r.dr.x * scalex, startPos.z + ratioH * r.dr.y * scaley, 0);\n\n            Vector3 ul = new Vector3(startPos.x + ratioW * r.ul.x * scalex, startPos.z + ratioH * r.ul.y * scaley, 0);\n\n            Vector3 ur = new Vector3(startPos.x + ratioW * r.ur.x * scalex, startPos.z + ratioH * r.ur.y * scaley, 0);\n\n\n            vectices[i*4] = dl;\n            vectices[i * 4 + 1] = dr;\n            vectices[i * 4 + 2] = ul;\n            vectices[i * 4 + 3] = ur;//根据上面的点顺时针画三角形\n            trangles[i*6] = i*4;\n            trangles[i * 6 + 1] = i * 4 +2;\n            trangles[i * 6 + 2] = i * 4 +1;\n            trangles[i * 6 + 3] = i * 4 +1;\n            trangles[i * 6 + 4] = i * 4 +2;\n            trangles[i * 6 + 5] = i * 4 +3;\n        }\n\n        mesh.vertices = vectices;\n        mesh.triangles = trangles;\n        mesh.RecalculateNormals();\n        mesh.RecalculateBounds();\n        mf.mesh = mesh;\n\n        return go;\n    }\n\n#endif\n}\n\n```\n\n根据以上两步能得到画好的mesh图形，还需要保存。\n\n## 保存自创Mesh\n\n这个很蛋疼，因为在运行状态下，原以为保存成预制没事，然后停止后还是尘归尘土归土。。。最后找了很久，感谢[这位的博客](http://blog.csdn.net/awnuxcvbn/article/details/50737192)帮助，成功导出成OBJ文件，在unity中生成FBX.\n\n具体代码如下：\n``` csharp\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Text;\nusing UnityEngine;\npublic class ObjExporter\n{\n    //\n    // Static Methods\n    //\n    public static void MeshToFile(MeshFilter mf, string filename, float scale)\n    {\n        using (StreamWriter streamWriter = new StreamWriter(filename))\n        {\n            streamWriter.Write(ObjExporter.MeshToString(mf, scale));\n        }\n    }\n\n    public static string MeshToString(MeshFilter mf, float scale)\n    {\n        Mesh mesh = mf.mesh;\n        Material[] sharedMaterials = mf.GetComponent<Renderer>().sharedMaterials;\n        Vector2 textureOffset = mf.GetComponent<Renderer>().material.GetTextureOffset(\"_MainTex\");\n        Vector2 textureScale = mf.GetComponent<Renderer>().material.GetTextureScale(\"_MainTex\");\n        StringBuilder stringBuilder = new StringBuilder();\n        stringBuilder.Append(\"mtllib design.mtl\").Append(\"\\n\");\n        stringBuilder.Append(\"g \").Append(mf.name).Append(\"\\n\");\n        Vector3[] vertices = mesh.vertices;\n        for (int i = 0; i < vertices.Length; i++)\n        {\n            Vector3 vector = vertices[i];\n            stringBuilder.Append(string.Format(\"v {0} {1} {2}\\n\", vector.x * scale, vector.z * scale, vector.y * scale));\n        }\n        stringBuilder.Append(\"\\n\");\n        Dictionary<int, int> dictionary = new Dictionary<int, int>();\n        if (mesh.subMeshCount > 1)\n        {\n            int[] triangles = mesh.GetTriangles(1);\n            for (int j = 0; j < triangles.Length; j += 3)\n            {\n                if (!dictionary.ContainsKey(triangles[j]))\n                {\n                    dictionary.Add(triangles[j], 1);\n                }\n                if (!dictionary.ContainsKey(triangles[j + 1]))\n                {\n                    dictionary.Add(triangles[j + 1], 1);\n                }\n                if (!dictionary.ContainsKey(triangles[j + 2]))\n                {\n                    dictionary.Add(triangles[j + 2], 1);\n                }\n            }\n        }\n        for (int num = 0; num != mesh.uv.Length; num++)\n        {\n            Vector2 vector2 = Vector2.Scale(mesh.uv[num], textureScale) + textureOffset;\n            if (dictionary.ContainsKey(num))\n            {\n                stringBuilder.Append(string.Format(\"vt {0} {1}\\n\", mesh.uv[num].x, mesh.uv[num].y));\n            }\n            else\n            {\n                stringBuilder.Append(string.Format(\"vt {0} {1}\\n\", vector2.x, vector2.y));\n            }\n        }\n        for (int k = 0; k < mesh.subMeshCount; k++)\n        {\n            stringBuilder.Append(\"\\n\");\n            if (k == 0)\n            {\n                stringBuilder.Append(\"usemtl \").Append(\"Material_design\").Append(\"\\n\");\n            }\n            if (k == 1)\n            {\n                stringBuilder.Append(\"usemtl \").Append(\"Material_logo\").Append(\"\\n\");\n            }\n            int[] triangles2 = mesh.GetTriangles(k);\n            for (int l = 0; l < triangles2.Length; l += 3)\n            {\n                stringBuilder.Append(string.Format(\"f {0}/{0} {1}/{1} {2}/{2}\\n\", triangles2[l] + 1, triangles2[l + 1] + 1, triangles2[l + 2] + 1));\n            }\n        }\n        return stringBuilder.ToString();\n    }\n}\n\n```","source":"_posts/unity-built-mesh-by-click.md","raw":"---\ntitle: unity点选构建Mesh并保存OBJ\ndate: 2016-6-8\ntags:\n- Unity\n- Mesh\ncategories: Unity\n---\n\n最近有一份需求，就是让策划任意选择可一片区域，表明是有某种用途的。埋头写了两头，试了三四种方法，最终不得已用小方格来代替，并最终构建mesh保存下来，这样做程序的就很方便用了。我们的目标就是没有蛀牙大笑oh，应该是累死别人，轻松自己！！！\n\n## 简单shader编写\n写一个Shader的目的是来显示我们的所编辑的内容，具体代码如下：\n``` cpp\nShader \"Custom/BlockShader\" {\n\tProperties {\n\t\t_MainTex (\"Base (RGB)\", 2D) = \"white\" {}\n\t\t_Size (\"Size\",Vector) = (64,32,0,0) //在面板上显示长多少格，宽多少格\n\t\t_Color (\"Color\", Color) = (0,0,0,0.5)\n\t\t_RimColor (\"Rim Color\", Color) = (1,1,0,1)\n\t\t_RimPower (\"Rim Power\", Range(0,0.2)) = 0.01\n\t\t_HitPoint (\"Hit Point\",Vector) = (0.0,1,0.0,0.5)//鼠标点击点\n\t\t_SelectColor (\"Select Color\",Color) = (0,1,0,1)//选中颜色\n\t\t_HitColor (\"Already hit Color\", Color) = (0.2,0.8,0.9,0.5)\n\t}\n\tSubShader {\n\t\tTags { \"Queue\"=\"Transparent\" }\n\t\t\n\t\tCGPROGRAM\n\t\t#pragma surface surf Lambert alpha\n\t\t#pragma target 3.0\n\n\t\tsampler2D _MainTex;\n\t\thalf4 _Size;\n\t\tfixed4 _Color;\n\t\tfixed4 _RimColor;\n\t\tfloat _RimPower;\n\t\tfloat4 _HitPoint;\n\t\tfixed4 _SelectColor;\n\t\tfixed4 _HitColor;\n\n\t\tstruct Input {\n\t\t\tfloat2 uv_MainTex;\n\t\t};\n\n\t\tvoid surf (Input IN, inout SurfaceOutput o) {\n\t\t\tfloat2 uv = IN.uv_MainTex;\n\t\t\tfixed4 c = _Color;\n\t\t\tfloat radiox = 1.0 / (_Size.x * 2);//每格大小的一半\n\t\t\tfloat radioy = 1.0 / (_Size.y * 2);\n\n\t\t\tfloat nx = floor(uv.x/(radiox * 2)) * radiox * 2 + radiox;//找到格的中心点\n\t\t\tfloat ny = floor(uv.y/(radioy * 2)) * radioy * 2 + radioy;\n\t\t\tfixed4 tc = tex2D (_MainTex, float2(nx,ny) );\n\t\t\tif(tc.g > 0.85) //因为选中我设置为了绿色（0,1,0,1）\n\t\t\t{\n\t\t\t\tc = _HitColor;\n\t\t\t\t//if(uv.x >= nx-radiox && uv.x <nx+ radiox && uv.y >= ny-radioy && uv.y <= ny+radioy)\n\t\t\t\t//{ \n\t\t\t\t//\tc = _HitColor;\n\t\t\t\t//}\n\t\t\t}\n\n\n\t\t\tif(uv.x >= _HitPoint.x-radiox && uv.x <_HitPoint.x+ radiox && uv.y >= _HitPoint.y-radioy && uv.y <= _HitPoint.y+radioy)\n\t\t\t{ \n\t\t\t\tc = _SelectColor;//选中颜色\n\t\t\t}\n\n\t\t\tif(fmod(uv.x ,(radiox * 2)) < (radiox * 2) * _RimPower)//边框\n\t\t\t{\n\t\t\t\tc = _RimColor;\n\t\t\t}\n\t\t\tif(fmod(uv.y ,(radioy * 2)) < (radioy * 2) * _RimPower)\n\t\t\t{\n\t\t\t\tc = _RimColor;\n\t\t\t}\n\n\t\t\to.Albedo = c.rgb;\n\t\t\to.Alpha = 0.5;\n\t\t}\n\t\tENDCG\n\t} \n\tFallBack \"Diffuse\"\n}\n\n```\n\n我知道，以上写的很粗糙。。。但是，谁让我是pc上用的呢，谁还管效率是毛线\n下一步，需要每套的脚本控制\n\n## 编写控制脚本\n主要是为了运行时，通过点击生成方格\n\n``` csharp\nusing System.Collections.Generic;\nusing UnityEngine;\n\n/**\n * \n * 用于编辑器美术使用脚本，功能为画地形方块\n * \n */\npublic class TerrianBlockControl : MonoBehaviour\n{\n    public int width;\n    public int height;\n    public Texture2D texture;\n#if UNITY_EDITOR\n    private Material material;\n    private MeshRenderer meshRenderer;\n    private RaycastHit hit;\n    private float ratioW;\n    private float ratioH;\n    private int[,] matrix;\n\n    void Start()\n    {\n        meshRenderer = GetComponent<MeshRenderer>();\n        material = meshRenderer.material;\n        texture = new Texture2D(width * 3, height * 3);\n\n        material.SetTexture(\"_MainTex\", texture);\n        ratioW = 1.0f/width;\n        ratioH = 1.0f/height;\n        material.SetVector(\"_Size\", new Vector4(width, height, 0, 0));\n        matrix = new int[width,height];\n        MatrixInit();\n    }\n\n\n\n    public void ChangeSize(int x, int y)\n    {\n        width = x;\n        height = y;\n        ratioW = 1.0f / width;\n        ratioH = 1.0f / height;\n        matrix = new int[width,height];\n        MatrixInit();\n    }\n\n    public void Update()\n    {\n        Ray ray = Camera.main.ScreenPointToRay(Input.mousePosition);\n        if (Physics.Raycast(ray, out hit))\n        {//算出每个方格的正中心坐标\n            float x = Mathf.FloorToInt(hit.textureCoord.x/ratioW)*ratioW + ratioW*0.5f;\n            float y = Mathf.FloorToInt(hit.textureCoord.y / ratioH) * ratioH + ratioH * 0.5f;\n            material.SetVector(\"_HitPoint\",new Vector4(x,y,0,0));\n        }\n        if (Input.GetMouseButtonDown(0))\n        {//算出所在格子的坐标\n            int x = Mathf.FloorToInt(hit.textureCoord.x/ratioW) * 3 + 1;\n            int y = Mathf.FloorToInt(hit.textureCoord.y/ratioH) * 3 + 1;\n            Color  c = texture.GetPixel(x, y);\n            if (c.g >= 0.9f)\n            {\n                texture.SetPixel(x, y, Color.black);\n                matrix[(x - 1) / 3, (y - 1) / 3] = 0;\n            }\n            else\n            {\n                texture.SetPixel(x, y, Color.green);\n                matrix[(x - 1) / 3, (y - 1) / 3] = 1;\n            }\n            texture.Apply(true);\n            material.SetTexture(\"_MainTex\",texture);\n        }\n    }\n\n    void MatrixInit()\n    {\n        for (int i = 0; i < width; i++)\n        {\n            for (int j = 0; j < height; j++)\n            {\n                matrix[i, j] = 0;\n            }\n        }\n    }\n\n    List<rect> rects;\n    [ContextMenu(\"Save\")]\n    public GameObject Save()\n    {\n        rects = new List<rect>();\n        for (int i = 0; i < width; i++) //合并，把我们已经画好的方格进行合并\n        {\n            for (int j = 0; j < height; j++)\n            {\n                if (matrix[i, j] == 1)\n                {\n                    rect r = new rect();\n                    r.dl = new Vector3(i,j,0);\n                    r.dr = new Vector3(i+1,j,0);\n                    r.ul = new Vector3(i,j+1,0);\n                    r.ur = new Vector3(i+1,j+1);\n                    r.length = 1;\n                    matrix[i, j] = 0;\n                    \n\n                    for (int k = i+1; k < width; k++) //在width方向上进行合并\n                    {\n                        if (matrix[k, j] == 1)\n                        {\n                            r.dr=new Vector3(k+1,j,0);\n                            r.ur = new Vector3(k+1,j+1,0);\n                            matrix[k, j] = 0;\n                            r.length++;\n                        }\n                        else\n                        {\n                            break;\n                        }\n                    }\n\n                    for (int k = i-1; k >= 0; k--)\n                    {\n                        if (matrix[k, j] == 1)\n                        {\n                            r.dl = new Vector3(k,j,0);\n                            r.ul = new Vector3(k,j+1,0);\n                            matrix[k, j] = 0;\n                            r.length++;\n                        }\n                        else\n                        {\n                            break;\n                        }\n                    }\n                    rects.Add(r);\n                }\n            }\n        }\n        \n        for (int i = 0; i < rects.Count; i++) //把合并过的，相邻的且大小相等的再合并\n        {\n            if (!rects[i].used && rects[i].length != 0)\n            {\n                for (int j = 0; j < rects.Count; j++)\n                {//没有合并过  不是自身  \n                    if (!rects[j].used && i != j && rects[j].length != 0)\n                    {\n                        if (rects[i].length == rects[j].length)\n                        {\n                            if (rects[i].dl.x == rects[j].dl.x)\n                            {\n                                if (rects[i].ul.y - rects[j].ul.y == 1)\n                                {\n                                    rects[i].dl = rects[j].dl;\n                                    rects[i].dr = rects[j].dr;\n                                    \n                                    rects[i].used = true;\n                                    rects[j].length = 0;\n                                }\n                                if (rects[i].ul.y - rects[j].ul.y == -1)\n                                {\n                                    rects[i].ul = rects[j].ul;\n                                    rects[i].ur = rects[j].ur;\n\n                                    rects[i].used = true;\n                                    rects[j].length = 0;\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n\n            if (rects[i].length != 0 && rects[i].ul.y - rects[i].dl.y == 1)\n                rects[i].used = true;\n        }\n\n        return creat(rects);\n    }\n\n    class rect\n    {\n        public Vector3 dl;\n        public Vector3 dr;\n        public Vector3 ul;\n        public Vector3 ur;\n        public int length;\n        public bool used;\n    }\n//创建mesh\n    GameObject creat(List<rect> rects_Old )\n    {\n        List<rect> rects = new List<rect>();\n        foreach (var rr in rects_Old)\n        {\n            if(rr.used)\n                rects.Add(rr);\n        }\n        GameObject mp = GameObject.Find(\"MaskParent\");\n        if(mp == null)\n            mp = new GameObject(\"MaskParent\");\n        mp.transform.position = Vector3.zero;\n\n        GameObject go = new GameObject(transform.name);\n        go.transform.parent = mp.transform;\n        go.transform.localPosition = Vector3.zero;\n        MeshFilter mf = go.AddComponent<MeshFilter>();\n        MeshRenderer mr = go.AddComponent<MeshRenderer>();\n        mr.material = new Material(Shader.Find(\"Diffuse\"));\n\n        Mesh mesh = new Mesh();\n        Vector3[] vectices = new Vector3[rects.Count*4];\n        int[] trangles = new int[rects.Count * 6];\n\n        Vector3 startPos = transform.position;\n\n        float scalex = transform.localScale.x;\n        float scaley = transform.localScale.y;\n        startPos.x -= scalex * 0.5f;\n        startPos.z -= scaley * 0.5f;\n\n        int len = 0;\n        for (int i = 0; i < rects.Count; i++)\n        {//添加mesh的Vectices\n            rect r = rects[i];\n            Vector3 dl = new Vector3(startPos.x + ratioW * r.dl.x * scalex, startPos.z + ratioH * r.dl.y * scaley, 0);\n\n            Vector3 dr = new Vector3(startPos.x + ratioW * r.dr.x * scalex, startPos.z + ratioH * r.dr.y * scaley, 0);\n\n            Vector3 ul = new Vector3(startPos.x + ratioW * r.ul.x * scalex, startPos.z + ratioH * r.ul.y * scaley, 0);\n\n            Vector3 ur = new Vector3(startPos.x + ratioW * r.ur.x * scalex, startPos.z + ratioH * r.ur.y * scaley, 0);\n\n\n            vectices[i*4] = dl;\n            vectices[i * 4 + 1] = dr;\n            vectices[i * 4 + 2] = ul;\n            vectices[i * 4 + 3] = ur;//根据上面的点顺时针画三角形\n            trangles[i*6] = i*4;\n            trangles[i * 6 + 1] = i * 4 +2;\n            trangles[i * 6 + 2] = i * 4 +1;\n            trangles[i * 6 + 3] = i * 4 +1;\n            trangles[i * 6 + 4] = i * 4 +2;\n            trangles[i * 6 + 5] = i * 4 +3;\n        }\n\n        mesh.vertices = vectices;\n        mesh.triangles = trangles;\n        mesh.RecalculateNormals();\n        mesh.RecalculateBounds();\n        mf.mesh = mesh;\n\n        return go;\n    }\n\n#endif\n}\n\n```\n\n根据以上两步能得到画好的mesh图形，还需要保存。\n\n## 保存自创Mesh\n\n这个很蛋疼，因为在运行状态下，原以为保存成预制没事，然后停止后还是尘归尘土归土。。。最后找了很久，感谢[这位的博客](http://blog.csdn.net/awnuxcvbn/article/details/50737192)帮助，成功导出成OBJ文件，在unity中生成FBX.\n\n具体代码如下：\n``` csharp\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Text;\nusing UnityEngine;\npublic class ObjExporter\n{\n    //\n    // Static Methods\n    //\n    public static void MeshToFile(MeshFilter mf, string filename, float scale)\n    {\n        using (StreamWriter streamWriter = new StreamWriter(filename))\n        {\n            streamWriter.Write(ObjExporter.MeshToString(mf, scale));\n        }\n    }\n\n    public static string MeshToString(MeshFilter mf, float scale)\n    {\n        Mesh mesh = mf.mesh;\n        Material[] sharedMaterials = mf.GetComponent<Renderer>().sharedMaterials;\n        Vector2 textureOffset = mf.GetComponent<Renderer>().material.GetTextureOffset(\"_MainTex\");\n        Vector2 textureScale = mf.GetComponent<Renderer>().material.GetTextureScale(\"_MainTex\");\n        StringBuilder stringBuilder = new StringBuilder();\n        stringBuilder.Append(\"mtllib design.mtl\").Append(\"\\n\");\n        stringBuilder.Append(\"g \").Append(mf.name).Append(\"\\n\");\n        Vector3[] vertices = mesh.vertices;\n        for (int i = 0; i < vertices.Length; i++)\n        {\n            Vector3 vector = vertices[i];\n            stringBuilder.Append(string.Format(\"v {0} {1} {2}\\n\", vector.x * scale, vector.z * scale, vector.y * scale));\n        }\n        stringBuilder.Append(\"\\n\");\n        Dictionary<int, int> dictionary = new Dictionary<int, int>();\n        if (mesh.subMeshCount > 1)\n        {\n            int[] triangles = mesh.GetTriangles(1);\n            for (int j = 0; j < triangles.Length; j += 3)\n            {\n                if (!dictionary.ContainsKey(triangles[j]))\n                {\n                    dictionary.Add(triangles[j], 1);\n                }\n                if (!dictionary.ContainsKey(triangles[j + 1]))\n                {\n                    dictionary.Add(triangles[j + 1], 1);\n                }\n                if (!dictionary.ContainsKey(triangles[j + 2]))\n                {\n                    dictionary.Add(triangles[j + 2], 1);\n                }\n            }\n        }\n        for (int num = 0; num != mesh.uv.Length; num++)\n        {\n            Vector2 vector2 = Vector2.Scale(mesh.uv[num], textureScale) + textureOffset;\n            if (dictionary.ContainsKey(num))\n            {\n                stringBuilder.Append(string.Format(\"vt {0} {1}\\n\", mesh.uv[num].x, mesh.uv[num].y));\n            }\n            else\n            {\n                stringBuilder.Append(string.Format(\"vt {0} {1}\\n\", vector2.x, vector2.y));\n            }\n        }\n        for (int k = 0; k < mesh.subMeshCount; k++)\n        {\n            stringBuilder.Append(\"\\n\");\n            if (k == 0)\n            {\n                stringBuilder.Append(\"usemtl \").Append(\"Material_design\").Append(\"\\n\");\n            }\n            if (k == 1)\n            {\n                stringBuilder.Append(\"usemtl \").Append(\"Material_logo\").Append(\"\\n\");\n            }\n            int[] triangles2 = mesh.GetTriangles(k);\n            for (int l = 0; l < triangles2.Length; l += 3)\n            {\n                stringBuilder.Append(string.Format(\"f {0}/{0} {1}/{1} {2}/{2}\\n\", triangles2[l] + 1, triangles2[l + 1] + 1, triangles2[l + 2] + 1));\n            }\n        }\n        return stringBuilder.ToString();\n    }\n}\n\n```","slug":"unity-built-mesh-by-click","published":1,"updated":"2017-10-26T09:06:14.204Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj9fm90tk000q2cob2arza37u","content":"<p>最近有一份需求，就是让策划任意选择可一片区域，表明是有某种用途的。埋头写了两头，试了三四种方法，最终不得已用小方格来代替，并最终构建mesh保存下来，这样做程序的就很方便用了。我们的目标就是没有蛀牙大笑oh，应该是累死别人，轻松自己！！！</p>\n<h2 id=\"简单shader编写\"><a href=\"#简单shader编写\" class=\"headerlink\" title=\"简单shader编写\"></a>简单shader编写</h2><p>写一个Shader的目的是来显示我们的所编辑的内容，具体代码如下：</p>\n<pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\">Shader <span class=\"token string\">\"Custom/BlockShader\"</span> <span class=\"token punctuation\">{</span>\n    Properties <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">_MainTex</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"Base (RGB)\"</span><span class=\"token punctuation\">,</span> 2D<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"white\"</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n        <span class=\"token function\">_Size</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"Size\"</span><span class=\"token punctuation\">,</span>Vector<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">64</span><span class=\"token punctuation\">,</span><span class=\"token number\">32</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\">//在面板上显示长多少格，宽多少格</span>\n        <span class=\"token function\">_Color</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"Color\"</span><span class=\"token punctuation\">,</span> Color<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span>\n        <span class=\"token function\">_RimColor</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"Rim Color\"</span><span class=\"token punctuation\">,</span> Color<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        <span class=\"token function\">_RimPower</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"Rim Power\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">Range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0.2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">0.01</span>\n        <span class=\"token function\">_HitPoint</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"Hit Point\"</span><span class=\"token punctuation\">,</span>Vector<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span><span class=\"token comment\" spellcheck=\"true\">//鼠标点击点</span>\n        <span class=\"token function\">_SelectColor</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"Select Color\"</span><span class=\"token punctuation\">,</span>Color<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token comment\" spellcheck=\"true\">//选中颜色</span>\n        <span class=\"token function\">_HitColor</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"Already hit Color\"</span><span class=\"token punctuation\">,</span> Color<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0.2</span><span class=\"token punctuation\">,</span><span class=\"token number\">0.8</span><span class=\"token punctuation\">,</span><span class=\"token number\">0.9</span><span class=\"token punctuation\">,</span><span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    SubShader <span class=\"token punctuation\">{</span>\n        Tags <span class=\"token punctuation\">{</span> <span class=\"token string\">\"Queue\"</span><span class=\"token operator\">=</span><span class=\"token string\">\"Transparent\"</span> <span class=\"token punctuation\">}</span>\n\n        CGPROGRAM\n        <span class=\"token macro property\">#<span class=\"token directive keyword\">pragma</span> surface surf Lambert alpha</span>\n        <span class=\"token macro property\">#<span class=\"token directive keyword\">pragma</span> target 3.0</span>\n\n        sampler2D _MainTex<span class=\"token punctuation\">;</span>\n        half4 _Size<span class=\"token punctuation\">;</span>\n        fixed4 _Color<span class=\"token punctuation\">;</span>\n        fixed4 _RimColor<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">float</span> _RimPower<span class=\"token punctuation\">;</span>\n        float4 _HitPoint<span class=\"token punctuation\">;</span>\n        fixed4 _SelectColor<span class=\"token punctuation\">;</span>\n        fixed4 _HitColor<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">struct</span> Input <span class=\"token punctuation\">{</span>\n            float2 uv_MainTex<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">void</span> <span class=\"token function\">surf</span> <span class=\"token punctuation\">(</span>Input IN<span class=\"token punctuation\">,</span> inout SurfaceOutput o<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            float2 uv <span class=\"token operator\">=</span> IN<span class=\"token punctuation\">.</span>uv_MainTex<span class=\"token punctuation\">;</span>\n            fixed4 c <span class=\"token operator\">=</span> _Color<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">float</span> radiox <span class=\"token operator\">=</span> <span class=\"token number\">1.0</span> <span class=\"token operator\">/</span> <span class=\"token punctuation\">(</span>_Size<span class=\"token punctuation\">.</span>x <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//每格大小的一半</span>\n            <span class=\"token keyword\">float</span> radioy <span class=\"token operator\">=</span> <span class=\"token number\">1.0</span> <span class=\"token operator\">/</span> <span class=\"token punctuation\">(</span>_Size<span class=\"token punctuation\">.</span>y <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">float</span> nx <span class=\"token operator\">=</span> <span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>uv<span class=\"token punctuation\">.</span>x<span class=\"token operator\">/</span><span class=\"token punctuation\">(</span>radiox <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> radiox <span class=\"token operator\">*</span> <span class=\"token number\">2</span> <span class=\"token operator\">+</span> radiox<span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//找到格的中心点</span>\n            <span class=\"token keyword\">float</span> ny <span class=\"token operator\">=</span> <span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>uv<span class=\"token punctuation\">.</span>y<span class=\"token operator\">/</span><span class=\"token punctuation\">(</span>radioy <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> radioy <span class=\"token operator\">*</span> <span class=\"token number\">2</span> <span class=\"token operator\">+</span> radioy<span class=\"token punctuation\">;</span>\n            fixed4 tc <span class=\"token operator\">=</span> <span class=\"token function\">tex2D</span> <span class=\"token punctuation\">(</span>_MainTex<span class=\"token punctuation\">,</span> <span class=\"token function\">float2</span><span class=\"token punctuation\">(</span>nx<span class=\"token punctuation\">,</span>ny<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>tc<span class=\"token punctuation\">.</span>g <span class=\"token operator\">></span> <span class=\"token number\">0.85</span><span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\">//因为选中我设置为了绿色（0,1,0,1）</span>\n            <span class=\"token punctuation\">{</span>\n                c <span class=\"token operator\">=</span> _HitColor<span class=\"token punctuation\">;</span>\n                <span class=\"token comment\" spellcheck=\"true\">//if(uv.x >= nx-radiox &amp;&amp; uv.x &lt;nx+ radiox &amp;&amp; uv.y >= ny-radioy &amp;&amp; uv.y &lt;= ny+radioy)</span>\n                <span class=\"token comment\" spellcheck=\"true\">//{ </span>\n                <span class=\"token comment\" spellcheck=\"true\">//    c = _HitColor;</span>\n                <span class=\"token comment\" spellcheck=\"true\">//}</span>\n            <span class=\"token punctuation\">}</span>\n\n\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>uv<span class=\"token punctuation\">.</span>x <span class=\"token operator\">>=</span> _HitPoint<span class=\"token punctuation\">.</span>x<span class=\"token operator\">-</span>radiox <span class=\"token operator\">&amp;&amp;</span> uv<span class=\"token punctuation\">.</span>x <span class=\"token operator\">&lt;</span>_HitPoint<span class=\"token punctuation\">.</span>x<span class=\"token operator\">+</span> radiox <span class=\"token operator\">&amp;&amp;</span> uv<span class=\"token punctuation\">.</span>y <span class=\"token operator\">>=</span> _HitPoint<span class=\"token punctuation\">.</span>y<span class=\"token operator\">-</span>radioy <span class=\"token operator\">&amp;&amp;</span> uv<span class=\"token punctuation\">.</span>y <span class=\"token operator\">&lt;=</span> _HitPoint<span class=\"token punctuation\">.</span>y<span class=\"token operator\">+</span>radioy<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span> \n                c <span class=\"token operator\">=</span> _SelectColor<span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//选中颜色</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">fmod</span><span class=\"token punctuation\">(</span>uv<span class=\"token punctuation\">.</span>x <span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span>radiox <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token punctuation\">(</span>radiox <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> _RimPower<span class=\"token punctuation\">)</span><span class=\"token comment\" spellcheck=\"true\">//边框</span>\n            <span class=\"token punctuation\">{</span>\n                c <span class=\"token operator\">=</span> _RimColor<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">fmod</span><span class=\"token punctuation\">(</span>uv<span class=\"token punctuation\">.</span>y <span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span>radioy <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token punctuation\">(</span>radioy <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> _RimPower<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                c <span class=\"token operator\">=</span> _RimColor<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            o<span class=\"token punctuation\">.</span>Albedo <span class=\"token operator\">=</span> c<span class=\"token punctuation\">.</span>rgb<span class=\"token punctuation\">;</span>\n            o<span class=\"token punctuation\">.</span>Alpha <span class=\"token operator\">=</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        ENDCG\n    <span class=\"token punctuation\">}</span> \n    FallBack <span class=\"token string\">\"Diffuse\"</span>\n<span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>我知道，以上写的很粗糙。。。但是，谁让我是pc上用的呢，谁还管效率是毛线<br>下一步，需要每套的脚本控制</p>\n<h2 id=\"编写控制脚本\"><a href=\"#编写控制脚本\" class=\"headerlink\" title=\"编写控制脚本\"></a>编写控制脚本</h2><p>主要是为了运行时，通过点击生成方格</p>\n<pre class=\"line-numbers language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">using</span> System<span class=\"token punctuation\">.</span>Collections<span class=\"token punctuation\">.</span>Generic<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> UnityEngine<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/**\n * \n * 用于编辑器美术使用脚本，功能为画地形方块\n * \n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TerrianBlockControl</span> <span class=\"token punctuation\">:</span> MonoBehaviour\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> width<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> height<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> Texture2D texture<span class=\"token punctuation\">;</span>\n<span class=\"token preprocessor property\">#<span class=\"token directive keyword\">if</span> UNITY_EDITOR</span>\n    <span class=\"token keyword\">private</span> Material material<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> MeshRenderer meshRenderer<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> RaycastHit hit<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">float</span> ratioW<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">float</span> ratioH<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">]</span> matrix<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">void</span> <span class=\"token function\">Start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        meshRenderer <span class=\"token operator\">=</span> <span class=\"token generic-method function\">GetComponent<span class=\"token punctuation\">&lt;</span>MeshRenderer<span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        material <span class=\"token operator\">=</span> meshRenderer<span class=\"token punctuation\">.</span>material<span class=\"token punctuation\">;</span>\n        texture <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Texture2D</span><span class=\"token punctuation\">(</span>width <span class=\"token operator\">*</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> height <span class=\"token operator\">*</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        material<span class=\"token punctuation\">.</span><span class=\"token function\">SetTexture</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"_MainTex\"</span><span class=\"token punctuation\">,</span> texture<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        ratioW <span class=\"token operator\">=</span> <span class=\"token number\">1.0f</span><span class=\"token operator\">/</span>width<span class=\"token punctuation\">;</span>\n        ratioH <span class=\"token operator\">=</span> <span class=\"token number\">1.0f</span><span class=\"token operator\">/</span>height<span class=\"token punctuation\">;</span>\n        material<span class=\"token punctuation\">.</span><span class=\"token function\">SetVector</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"_Size\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Vector4</span><span class=\"token punctuation\">(</span>width<span class=\"token punctuation\">,</span> height<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        matrix <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">int</span><span class=\"token punctuation\">[</span>width<span class=\"token punctuation\">,</span>height<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">MatrixInit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">ChangeSize</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        width <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span>\n        height <span class=\"token operator\">=</span> y<span class=\"token punctuation\">;</span>\n        ratioW <span class=\"token operator\">=</span> <span class=\"token number\">1.0f</span> <span class=\"token operator\">/</span> width<span class=\"token punctuation\">;</span>\n        ratioH <span class=\"token operator\">=</span> <span class=\"token number\">1.0f</span> <span class=\"token operator\">/</span> height<span class=\"token punctuation\">;</span>\n        matrix <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">int</span><span class=\"token punctuation\">[</span>width<span class=\"token punctuation\">,</span>height<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">MatrixInit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">Update</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        Ray ray <span class=\"token operator\">=</span> Camera<span class=\"token punctuation\">.</span>main<span class=\"token punctuation\">.</span><span class=\"token function\">ScreenPointToRay</span><span class=\"token punctuation\">(</span>Input<span class=\"token punctuation\">.</span>mousePosition<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Physics<span class=\"token punctuation\">.</span><span class=\"token function\">Raycast</span><span class=\"token punctuation\">(</span>ray<span class=\"token punctuation\">,</span> <span class=\"token keyword\">out</span> hit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span><span class=\"token comment\" spellcheck=\"true\">//算出每个方格的正中心坐标</span>\n            <span class=\"token keyword\">float</span> x <span class=\"token operator\">=</span> Mathf<span class=\"token punctuation\">.</span><span class=\"token function\">FloorToInt</span><span class=\"token punctuation\">(</span>hit<span class=\"token punctuation\">.</span>textureCoord<span class=\"token punctuation\">.</span>x<span class=\"token operator\">/</span>ratioW<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>ratioW <span class=\"token operator\">+</span> ratioW<span class=\"token operator\">*</span><span class=\"token number\">0.5f</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">float</span> y <span class=\"token operator\">=</span> Mathf<span class=\"token punctuation\">.</span><span class=\"token function\">FloorToInt</span><span class=\"token punctuation\">(</span>hit<span class=\"token punctuation\">.</span>textureCoord<span class=\"token punctuation\">.</span>y <span class=\"token operator\">/</span> ratioH<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> ratioH <span class=\"token operator\">+</span> ratioH <span class=\"token operator\">*</span> <span class=\"token number\">0.5f</span><span class=\"token punctuation\">;</span>\n            material<span class=\"token punctuation\">.</span><span class=\"token function\">SetVector</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"_HitPoint\"</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Vector4</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Input<span class=\"token punctuation\">.</span><span class=\"token function\">GetMouseButtonDown</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span><span class=\"token comment\" spellcheck=\"true\">//算出所在格子的坐标</span>\n            <span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> Mathf<span class=\"token punctuation\">.</span><span class=\"token function\">FloorToInt</span><span class=\"token punctuation\">(</span>hit<span class=\"token punctuation\">.</span>textureCoord<span class=\"token punctuation\">.</span>x<span class=\"token operator\">/</span>ratioW<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">3</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">int</span> y <span class=\"token operator\">=</span> Mathf<span class=\"token punctuation\">.</span><span class=\"token function\">FloorToInt</span><span class=\"token punctuation\">(</span>hit<span class=\"token punctuation\">.</span>textureCoord<span class=\"token punctuation\">.</span>y<span class=\"token operator\">/</span>ratioH<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">3</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            Color  c <span class=\"token operator\">=</span> texture<span class=\"token punctuation\">.</span><span class=\"token function\">GetPixel</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">.</span>g <span class=\"token operator\">>=</span> <span class=\"token number\">0.9f</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                texture<span class=\"token punctuation\">.</span><span class=\"token function\">SetPixel</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> Color<span class=\"token punctuation\">.</span>black<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                matrix<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>y <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">else</span>\n            <span class=\"token punctuation\">{</span>\n                texture<span class=\"token punctuation\">.</span><span class=\"token function\">SetPixel</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> Color<span class=\"token punctuation\">.</span>green<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                matrix<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>y <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            texture<span class=\"token punctuation\">.</span><span class=\"token function\">Apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            material<span class=\"token punctuation\">.</span><span class=\"token function\">SetTexture</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"_MainTex\"</span><span class=\"token punctuation\">,</span>texture<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">void</span> <span class=\"token function\">MatrixInit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> width<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> height<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                matrix<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    List<span class=\"token operator\">&lt;</span>rect<span class=\"token operator\">></span> rects<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">[</span><span class=\"token function\">ContextMenu</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Save\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">public</span> GameObject <span class=\"token function\">Save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        rects <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">List</span><span class=\"token operator\">&lt;</span>rect<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> width<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\">//合并，把我们已经画好的方格进行合并</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> height<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>matrix<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">{</span>\n                    rect r <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">rect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    r<span class=\"token punctuation\">.</span>dl <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Vector3</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span>j<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    r<span class=\"token punctuation\">.</span>dr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Vector3</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>j<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    r<span class=\"token punctuation\">.</span>ul <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Vector3</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    r<span class=\"token punctuation\">.</span>ur <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Vector3</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    r<span class=\"token punctuation\">.</span>length <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n                    matrix<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n\n                    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> k <span class=\"token operator\">=</span> i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> k <span class=\"token operator\">&lt;</span> width<span class=\"token punctuation\">;</span> k<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\">//在width方向上进行合并</span>\n                    <span class=\"token punctuation\">{</span>\n                        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>matrix<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n                        <span class=\"token punctuation\">{</span>\n                            r<span class=\"token punctuation\">.</span>dr<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Vector3</span><span class=\"token punctuation\">(</span>k<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>j<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                            r<span class=\"token punctuation\">.</span>ur <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Vector3</span><span class=\"token punctuation\">(</span>k<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                            matrix<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n                            r<span class=\"token punctuation\">.</span>length<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token punctuation\">}</span>\n                        <span class=\"token keyword\">else</span>\n                        <span class=\"token punctuation\">{</span>\n                            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token punctuation\">}</span>\n                    <span class=\"token punctuation\">}</span>\n\n                    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> k <span class=\"token operator\">=</span> i<span class=\"token number\">-1</span><span class=\"token punctuation\">;</span> k <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> k<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">{</span>\n                        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>matrix<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n                        <span class=\"token punctuation\">{</span>\n                            r<span class=\"token punctuation\">.</span>dl <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Vector3</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">,</span>j<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                            r<span class=\"token punctuation\">.</span>ul <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Vector3</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">,</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                            matrix<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n                            r<span class=\"token punctuation\">.</span>length<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token punctuation\">}</span>\n                        <span class=\"token keyword\">else</span>\n                        <span class=\"token punctuation\">{</span>\n                            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token punctuation\">}</span>\n                    <span class=\"token punctuation\">}</span>\n                    rects<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> rects<span class=\"token punctuation\">.</span>Count<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\">//把合并过的，相邻的且大小相等的再合并</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>rects<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>used <span class=\"token operator\">&amp;&amp;</span> rects<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>length <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> rects<span class=\"token punctuation\">.</span>Count<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">{</span><span class=\"token comment\" spellcheck=\"true\">//没有合并过  不是自身  </span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>rects<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>used <span class=\"token operator\">&amp;&amp;</span> i <span class=\"token operator\">!=</span> j <span class=\"token operator\">&amp;&amp;</span> rects<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>length <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">{</span>\n                        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>rects<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> rects<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span>\n                        <span class=\"token punctuation\">{</span>\n                            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>rects<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>dl<span class=\"token punctuation\">.</span>x <span class=\"token operator\">==</span> rects<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>dl<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">)</span>\n                            <span class=\"token punctuation\">{</span>\n                                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>rects<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>ul<span class=\"token punctuation\">.</span>y <span class=\"token operator\">-</span> rects<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>ul<span class=\"token punctuation\">.</span>y <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n                                <span class=\"token punctuation\">{</span>\n                                    rects<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>dl <span class=\"token operator\">=</span> rects<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>dl<span class=\"token punctuation\">;</span>\n                                    rects<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>dr <span class=\"token operator\">=</span> rects<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>dr<span class=\"token punctuation\">;</span>\n\n                                    rects<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>used <span class=\"token operator\">=</span> <span class=\"token keyword\">true</span><span class=\"token punctuation\">;</span>\n                                    rects<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>length <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n                                <span class=\"token punctuation\">}</span>\n                                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>rects<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>ul<span class=\"token punctuation\">.</span>y <span class=\"token operator\">-</span> rects<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>ul<span class=\"token punctuation\">.</span>y <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n                                <span class=\"token punctuation\">{</span>\n                                    rects<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>ul <span class=\"token operator\">=</span> rects<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>ul<span class=\"token punctuation\">;</span>\n                                    rects<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>ur <span class=\"token operator\">=</span> rects<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>ur<span class=\"token punctuation\">;</span>\n\n                                    rects<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>used <span class=\"token operator\">=</span> <span class=\"token keyword\">true</span><span class=\"token punctuation\">;</span>\n                                    rects<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>length <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n                                <span class=\"token punctuation\">}</span>\n                            <span class=\"token punctuation\">}</span>\n                        <span class=\"token punctuation\">}</span>\n                    <span class=\"token punctuation\">}</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>rects<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>length <span class=\"token operator\">!=</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> rects<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>ul<span class=\"token punctuation\">.</span>y <span class=\"token operator\">-</span> rects<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>dl<span class=\"token punctuation\">.</span>y <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n                rects<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>used <span class=\"token operator\">=</span> <span class=\"token keyword\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token function\">creat</span><span class=\"token punctuation\">(</span>rects<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">rect</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">public</span> Vector3 dl<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">public</span> Vector3 dr<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">public</span> Vector3 ul<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">public</span> Vector3 ur<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> length<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">bool</span> used<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token comment\" spellcheck=\"true\">//创建mesh</span>\n    GameObject <span class=\"token function\">creat</span><span class=\"token punctuation\">(</span>List<span class=\"token operator\">&lt;</span>rect<span class=\"token operator\">></span> rects_Old <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        List<span class=\"token operator\">&lt;</span>rect<span class=\"token operator\">></span> rects <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">List</span><span class=\"token operator\">&lt;</span>rect<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> rr <span class=\"token keyword\">in</span> rects_Old<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>rr<span class=\"token punctuation\">.</span>used<span class=\"token punctuation\">)</span>\n                rects<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>rr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        GameObject mp <span class=\"token operator\">=</span> GameObject<span class=\"token punctuation\">.</span><span class=\"token function\">Find</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"MaskParent\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>mp <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n            mp <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">GameObject</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"MaskParent\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        mp<span class=\"token punctuation\">.</span>transform<span class=\"token punctuation\">.</span>position <span class=\"token operator\">=</span> Vector3<span class=\"token punctuation\">.</span>zero<span class=\"token punctuation\">;</span>\n\n        GameObject go <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">GameObject</span><span class=\"token punctuation\">(</span>transform<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        go<span class=\"token punctuation\">.</span>transform<span class=\"token punctuation\">.</span>parent <span class=\"token operator\">=</span> mp<span class=\"token punctuation\">.</span>transform<span class=\"token punctuation\">;</span>\n        go<span class=\"token punctuation\">.</span>transform<span class=\"token punctuation\">.</span>localPosition <span class=\"token operator\">=</span> Vector3<span class=\"token punctuation\">.</span>zero<span class=\"token punctuation\">;</span>\n        MeshFilter mf <span class=\"token operator\">=</span> go<span class=\"token punctuation\">.</span><span class=\"token generic-method function\">AddComponent<span class=\"token punctuation\">&lt;</span>MeshFilter<span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        MeshRenderer mr <span class=\"token operator\">=</span> go<span class=\"token punctuation\">.</span><span class=\"token generic-method function\">AddComponent<span class=\"token punctuation\">&lt;</span>MeshRenderer<span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        mr<span class=\"token punctuation\">.</span>material <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Material</span><span class=\"token punctuation\">(</span>Shader<span class=\"token punctuation\">.</span><span class=\"token function\">Find</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Diffuse\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        Mesh mesh <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Mesh</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        Vector3<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> vectices <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Vector3</span><span class=\"token punctuation\">[</span>rects<span class=\"token punctuation\">.</span>Count<span class=\"token operator\">*</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> trangles <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">int</span><span class=\"token punctuation\">[</span>rects<span class=\"token punctuation\">.</span>Count <span class=\"token operator\">*</span> <span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n        Vector3 startPos <span class=\"token operator\">=</span> transform<span class=\"token punctuation\">.</span>position<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">float</span> scalex <span class=\"token operator\">=</span> transform<span class=\"token punctuation\">.</span>localScale<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">float</span> scaley <span class=\"token operator\">=</span> transform<span class=\"token punctuation\">.</span>localScale<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">;</span>\n        startPos<span class=\"token punctuation\">.</span>x <span class=\"token operator\">-</span><span class=\"token operator\">=</span> scalex <span class=\"token operator\">*</span> <span class=\"token number\">0.5f</span><span class=\"token punctuation\">;</span>\n        startPos<span class=\"token punctuation\">.</span>z <span class=\"token operator\">-</span><span class=\"token operator\">=</span> scaley <span class=\"token operator\">*</span> <span class=\"token number\">0.5f</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">int</span> len <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> rects<span class=\"token punctuation\">.</span>Count<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span><span class=\"token comment\" spellcheck=\"true\">//添加mesh的Vectices</span>\n            rect r <span class=\"token operator\">=</span> rects<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            Vector3 dl <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Vector3</span><span class=\"token punctuation\">(</span>startPos<span class=\"token punctuation\">.</span>x <span class=\"token operator\">+</span> ratioW <span class=\"token operator\">*</span> r<span class=\"token punctuation\">.</span>dl<span class=\"token punctuation\">.</span>x <span class=\"token operator\">*</span> scalex<span class=\"token punctuation\">,</span> startPos<span class=\"token punctuation\">.</span>z <span class=\"token operator\">+</span> ratioH <span class=\"token operator\">*</span> r<span class=\"token punctuation\">.</span>dl<span class=\"token punctuation\">.</span>y <span class=\"token operator\">*</span> scaley<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            Vector3 dr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Vector3</span><span class=\"token punctuation\">(</span>startPos<span class=\"token punctuation\">.</span>x <span class=\"token operator\">+</span> ratioW <span class=\"token operator\">*</span> r<span class=\"token punctuation\">.</span>dr<span class=\"token punctuation\">.</span>x <span class=\"token operator\">*</span> scalex<span class=\"token punctuation\">,</span> startPos<span class=\"token punctuation\">.</span>z <span class=\"token operator\">+</span> ratioH <span class=\"token operator\">*</span> r<span class=\"token punctuation\">.</span>dr<span class=\"token punctuation\">.</span>y <span class=\"token operator\">*</span> scaley<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            Vector3 ul <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Vector3</span><span class=\"token punctuation\">(</span>startPos<span class=\"token punctuation\">.</span>x <span class=\"token operator\">+</span> ratioW <span class=\"token operator\">*</span> r<span class=\"token punctuation\">.</span>ul<span class=\"token punctuation\">.</span>x <span class=\"token operator\">*</span> scalex<span class=\"token punctuation\">,</span> startPos<span class=\"token punctuation\">.</span>z <span class=\"token operator\">+</span> ratioH <span class=\"token operator\">*</span> r<span class=\"token punctuation\">.</span>ul<span class=\"token punctuation\">.</span>y <span class=\"token operator\">*</span> scaley<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            Vector3 ur <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Vector3</span><span class=\"token punctuation\">(</span>startPos<span class=\"token punctuation\">.</span>x <span class=\"token operator\">+</span> ratioW <span class=\"token operator\">*</span> r<span class=\"token punctuation\">.</span>ur<span class=\"token punctuation\">.</span>x <span class=\"token operator\">*</span> scalex<span class=\"token punctuation\">,</span> startPos<span class=\"token punctuation\">.</span>z <span class=\"token operator\">+</span> ratioH <span class=\"token operator\">*</span> r<span class=\"token punctuation\">.</span>ur<span class=\"token punctuation\">.</span>y <span class=\"token operator\">*</span> scaley<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n            vectices<span class=\"token punctuation\">[</span>i<span class=\"token operator\">*</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> dl<span class=\"token punctuation\">;</span>\n            vectices<span class=\"token punctuation\">[</span>i <span class=\"token operator\">*</span> <span class=\"token number\">4</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> dr<span class=\"token punctuation\">;</span>\n            vectices<span class=\"token punctuation\">[</span>i <span class=\"token operator\">*</span> <span class=\"token number\">4</span> <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> ul<span class=\"token punctuation\">;</span>\n            vectices<span class=\"token punctuation\">[</span>i <span class=\"token operator\">*</span> <span class=\"token number\">4</span> <span class=\"token operator\">+</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> ur<span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//根据上面的点顺时针画三角形</span>\n            trangles<span class=\"token punctuation\">[</span>i<span class=\"token operator\">*</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> i<span class=\"token operator\">*</span><span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\n            trangles<span class=\"token punctuation\">[</span>i <span class=\"token operator\">*</span> <span class=\"token number\">6</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> i <span class=\"token operator\">*</span> <span class=\"token number\">4</span> <span class=\"token operator\">+</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n            trangles<span class=\"token punctuation\">[</span>i <span class=\"token operator\">*</span> <span class=\"token number\">6</span> <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> i <span class=\"token operator\">*</span> <span class=\"token number\">4</span> <span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            trangles<span class=\"token punctuation\">[</span>i <span class=\"token operator\">*</span> <span class=\"token number\">6</span> <span class=\"token operator\">+</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> i <span class=\"token operator\">*</span> <span class=\"token number\">4</span> <span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            trangles<span class=\"token punctuation\">[</span>i <span class=\"token operator\">*</span> <span class=\"token number\">6</span> <span class=\"token operator\">+</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> i <span class=\"token operator\">*</span> <span class=\"token number\">4</span> <span class=\"token operator\">+</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n            trangles<span class=\"token punctuation\">[</span>i <span class=\"token operator\">*</span> <span class=\"token number\">6</span> <span class=\"token operator\">+</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> i <span class=\"token operator\">*</span> <span class=\"token number\">4</span> <span class=\"token operator\">+</span><span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        mesh<span class=\"token punctuation\">.</span>vertices <span class=\"token operator\">=</span> vectices<span class=\"token punctuation\">;</span>\n        mesh<span class=\"token punctuation\">.</span>triangles <span class=\"token operator\">=</span> trangles<span class=\"token punctuation\">;</span>\n        mesh<span class=\"token punctuation\">.</span><span class=\"token function\">RecalculateNormals</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        mesh<span class=\"token punctuation\">.</span><span class=\"token function\">RecalculateBounds</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        mf<span class=\"token punctuation\">.</span>mesh <span class=\"token operator\">=</span> mesh<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">return</span> go<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token preprocessor property\">#<span class=\"token directive keyword\">endif</span></span>\n<span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>根据以上两步能得到画好的mesh图形，还需要保存。</p>\n<h2 id=\"保存自创Mesh\"><a href=\"#保存自创Mesh\" class=\"headerlink\" title=\"保存自创Mesh\"></a>保存自创Mesh</h2><p>这个很蛋疼，因为在运行状态下，原以为保存成预制没事，然后停止后还是尘归尘土归土。。。最后找了很久，感谢<a href=\"http://blog.csdn.net/awnuxcvbn/article/details/50737192\" target=\"_blank\" rel=\"external\">这位的博客</a>帮助，成功导出成OBJ文件，在unity中生成FBX.</p>\n<p>具体代码如下：</p>\n<pre class=\"line-numbers language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">using</span> System<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> System<span class=\"token punctuation\">.</span>Collections<span class=\"token punctuation\">.</span>Generic<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> System<span class=\"token punctuation\">.</span>IO<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> System<span class=\"token punctuation\">.</span>Text<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> UnityEngine<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ObjExporter</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\" spellcheck=\"true\">//</span>\n    <span class=\"token comment\" spellcheck=\"true\">// Static Methods</span>\n    <span class=\"token comment\" spellcheck=\"true\">//</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">MeshToFile</span><span class=\"token punctuation\">(</span>MeshFilter mf<span class=\"token punctuation\">,</span> <span class=\"token keyword\">string</span> filename<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> scale<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">using</span> <span class=\"token punctuation\">(</span>StreamWriter streamWriter <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StreamWriter</span><span class=\"token punctuation\">(</span>filename<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            streamWriter<span class=\"token punctuation\">.</span><span class=\"token function\">Write</span><span class=\"token punctuation\">(</span>ObjExporter<span class=\"token punctuation\">.</span><span class=\"token function\">MeshToString</span><span class=\"token punctuation\">(</span>mf<span class=\"token punctuation\">,</span> scale<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">string</span> <span class=\"token function\">MeshToString</span><span class=\"token punctuation\">(</span>MeshFilter mf<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> scale<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        Mesh mesh <span class=\"token operator\">=</span> mf<span class=\"token punctuation\">.</span>mesh<span class=\"token punctuation\">;</span>\n        Material<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> sharedMaterials <span class=\"token operator\">=</span> mf<span class=\"token punctuation\">.</span><span class=\"token generic-method function\">GetComponent<span class=\"token punctuation\">&lt;</span>Renderer<span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>sharedMaterials<span class=\"token punctuation\">;</span>\n        Vector2 textureOffset <span class=\"token operator\">=</span> mf<span class=\"token punctuation\">.</span><span class=\"token generic-method function\">GetComponent<span class=\"token punctuation\">&lt;</span>Renderer<span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>material<span class=\"token punctuation\">.</span><span class=\"token function\">GetTextureOffset</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"_MainTex\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        Vector2 textureScale <span class=\"token operator\">=</span> mf<span class=\"token punctuation\">.</span><span class=\"token generic-method function\">GetComponent<span class=\"token punctuation\">&lt;</span>Renderer<span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>material<span class=\"token punctuation\">.</span><span class=\"token function\">GetTextureScale</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"_MainTex\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        StringBuilder stringBuilder <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        stringBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">Append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mtllib design.mtl\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        stringBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">Append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"g \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Append</span><span class=\"token punctuation\">(</span>mf<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        Vector3<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> vertices <span class=\"token operator\">=</span> mesh<span class=\"token punctuation\">.</span>vertices<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> vertices<span class=\"token punctuation\">.</span>Length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            Vector3 vector <span class=\"token operator\">=</span> vertices<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            stringBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">Append</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">.</span><span class=\"token function\">Format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"v {0} {1} {2}\\n\"</span><span class=\"token punctuation\">,</span> vector<span class=\"token punctuation\">.</span>x <span class=\"token operator\">*</span> scale<span class=\"token punctuation\">,</span> vector<span class=\"token punctuation\">.</span>z <span class=\"token operator\">*</span> scale<span class=\"token punctuation\">,</span> vector<span class=\"token punctuation\">.</span>y <span class=\"token operator\">*</span> scale<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        stringBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">Append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        Dictionary<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">></span> dictionary <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Dictionary</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>mesh<span class=\"token punctuation\">.</span>subMeshCount <span class=\"token operator\">></span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> triangles <span class=\"token operator\">=</span> mesh<span class=\"token punctuation\">.</span><span class=\"token function\">GetTriangles</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> triangles<span class=\"token punctuation\">.</span>Length<span class=\"token punctuation\">;</span> j <span class=\"token operator\">+</span><span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>dictionary<span class=\"token punctuation\">.</span><span class=\"token function\">ContainsKey</span><span class=\"token punctuation\">(</span>triangles<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">{</span>\n                    dictionary<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>triangles<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>dictionary<span class=\"token punctuation\">.</span><span class=\"token function\">ContainsKey</span><span class=\"token punctuation\">(</span>triangles<span class=\"token punctuation\">[</span>j <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">{</span>\n                    dictionary<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>triangles<span class=\"token punctuation\">[</span>j <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>dictionary<span class=\"token punctuation\">.</span><span class=\"token function\">ContainsKey</span><span class=\"token punctuation\">(</span>triangles<span class=\"token punctuation\">[</span>j <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">{</span>\n                    dictionary<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>triangles<span class=\"token punctuation\">[</span>j <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> num <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> num <span class=\"token operator\">!=</span> mesh<span class=\"token punctuation\">.</span>uv<span class=\"token punctuation\">.</span>Length<span class=\"token punctuation\">;</span> num<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            Vector2 vector2 <span class=\"token operator\">=</span> Vector2<span class=\"token punctuation\">.</span><span class=\"token function\">Scale</span><span class=\"token punctuation\">(</span>mesh<span class=\"token punctuation\">.</span>uv<span class=\"token punctuation\">[</span>num<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> textureScale<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> textureOffset<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>dictionary<span class=\"token punctuation\">.</span><span class=\"token function\">ContainsKey</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                stringBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">Append</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">.</span><span class=\"token function\">Format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"vt {0} {1}\\n\"</span><span class=\"token punctuation\">,</span> mesh<span class=\"token punctuation\">.</span>uv<span class=\"token punctuation\">[</span>num<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">,</span> mesh<span class=\"token punctuation\">.</span>uv<span class=\"token punctuation\">[</span>num<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">else</span>\n            <span class=\"token punctuation\">{</span>\n                stringBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">Append</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">.</span><span class=\"token function\">Format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"vt {0} {1}\\n\"</span><span class=\"token punctuation\">,</span> vector2<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">,</span> vector2<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> k <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> k <span class=\"token operator\">&lt;</span> mesh<span class=\"token punctuation\">.</span>subMeshCount<span class=\"token punctuation\">;</span> k<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            stringBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">Append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>k <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                stringBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">Append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"usemtl \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Material_design\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>k <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                stringBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">Append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"usemtl \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Material_logo\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> triangles2 <span class=\"token operator\">=</span> mesh<span class=\"token punctuation\">.</span><span class=\"token function\">GetTriangles</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> l <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> l <span class=\"token operator\">&lt;</span> triangles2<span class=\"token punctuation\">.</span>Length<span class=\"token punctuation\">;</span> l <span class=\"token operator\">+</span><span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                stringBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">Append</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">.</span><span class=\"token function\">Format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"f {0}/{0} {1}/{1} {2}/{2}\\n\"</span><span class=\"token punctuation\">,</span> triangles2<span class=\"token punctuation\">[</span>l<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> triangles2<span class=\"token punctuation\">[</span>l <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> triangles2<span class=\"token punctuation\">[</span>l <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> stringBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{"gallery":{"美女":{"full_link":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1508912200438&di=d5b3eacf86d8f94c149c6fc68fe4da67&imgtype=0&src=http%3A%2F%2Fpic01.taopic.com%2F151014%2F234732-15101410452229-lp.jpg","thumb_link":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1508912200438&di=d5b3eacf86d8f94c149c6fc68fe4da67&imgtype=0&src=http%3A%2F%2Fpic01.taopic.com%2F151014%2F234732-15101410452229-lp.jpg","descr":"美女插画"}},"links":{"Github":{"link":"https://github.com/garsonlab","avatar":"https://avatars3.githubusercontent.com/u/13958934?s=460&v=4","descr":"My Github","type":"Blog"},"OnLineTools":{"link":"http://tool.lu/","avatar":"http://qn11.tool.lu/201710/15/103320SbM84Ql4tETjg49a_28x28.png","descr":"在线工具","type":"Tools"},"CMDMarkdown":{"link":"https://www.zybuluo.com/","avatar":"https://www.zybuluo.com/static/img/logo.png","descr":"Markdown在线编辑","type":"Tools"},"Hexo文档":{"link":"https://hexo.io/zh-cn/docs/","avatar":"https://hexo.io/logo.svg","descr":"Hexo中文官方文档","type":"Community"},"游戏蛮牛":{"link":"http://www.manew.com/forum.php","avatar":"http://www.manew.com/template/manew2016/images/logo.png","descr":"unity交流社区","type":"Unity"},"FairyGUI":{"link":"http://www.fairygui.com/","avatar":"http://www.fairygui.com/images/20170728151207.png","descr":"FairyGUI官方网站","type":"Site"}},"linktypes":{"Blog":{"name":"关注的博客"},"Unity":{"name":"Unity3D"},"Community":{"name":"浏览的社区"},"Tools":{"name":"工具"},"Site":{"name":"收藏的网址"}}}},"excerpt":"","more":"<p>最近有一份需求，就是让策划任意选择可一片区域，表明是有某种用途的。埋头写了两头，试了三四种方法，最终不得已用小方格来代替，并最终构建mesh保存下来，这样做程序的就很方便用了。我们的目标就是没有蛀牙大笑oh，应该是累死别人，轻松自己！！！</p>\n<h2 id=\"简单shader编写\"><a href=\"#简单shader编写\" class=\"headerlink\" title=\"简单shader编写\"></a>简单shader编写</h2><p>写一个Shader的目的是来显示我们的所编辑的内容，具体代码如下：</p>\n<pre><code class=\"cpp\">Shader &quot;Custom/BlockShader&quot; {\n    Properties {\n        _MainTex (&quot;Base (RGB)&quot;, 2D) = &quot;white&quot; {}\n        _Size (&quot;Size&quot;,Vector) = (64,32,0,0) //在面板上显示长多少格，宽多少格\n        _Color (&quot;Color&quot;, Color) = (0,0,0,0.5)\n        _RimColor (&quot;Rim Color&quot;, Color) = (1,1,0,1)\n        _RimPower (&quot;Rim Power&quot;, Range(0,0.2)) = 0.01\n        _HitPoint (&quot;Hit Point&quot;,Vector) = (0.0,1,0.0,0.5)//鼠标点击点\n        _SelectColor (&quot;Select Color&quot;,Color) = (0,1,0,1)//选中颜色\n        _HitColor (&quot;Already hit Color&quot;, Color) = (0.2,0.8,0.9,0.5)\n    }\n    SubShader {\n        Tags { &quot;Queue&quot;=&quot;Transparent&quot; }\n\n        CGPROGRAM\n        #pragma surface surf Lambert alpha\n        #pragma target 3.0\n\n        sampler2D _MainTex;\n        half4 _Size;\n        fixed4 _Color;\n        fixed4 _RimColor;\n        float _RimPower;\n        float4 _HitPoint;\n        fixed4 _SelectColor;\n        fixed4 _HitColor;\n\n        struct Input {\n            float2 uv_MainTex;\n        };\n\n        void surf (Input IN, inout SurfaceOutput o) {\n            float2 uv = IN.uv_MainTex;\n            fixed4 c = _Color;\n            float radiox = 1.0 / (_Size.x * 2);//每格大小的一半\n            float radioy = 1.0 / (_Size.y * 2);\n\n            float nx = floor(uv.x/(radiox * 2)) * radiox * 2 + radiox;//找到格的中心点\n            float ny = floor(uv.y/(radioy * 2)) * radioy * 2 + radioy;\n            fixed4 tc = tex2D (_MainTex, float2(nx,ny) );\n            if(tc.g &gt; 0.85) //因为选中我设置为了绿色（0,1,0,1）\n            {\n                c = _HitColor;\n                //if(uv.x &gt;= nx-radiox &amp;&amp; uv.x &lt;nx+ radiox &amp;&amp; uv.y &gt;= ny-radioy &amp;&amp; uv.y &lt;= ny+radioy)\n                //{ \n                //    c = _HitColor;\n                //}\n            }\n\n\n            if(uv.x &gt;= _HitPoint.x-radiox &amp;&amp; uv.x &lt;_HitPoint.x+ radiox &amp;&amp; uv.y &gt;= _HitPoint.y-radioy &amp;&amp; uv.y &lt;= _HitPoint.y+radioy)\n            { \n                c = _SelectColor;//选中颜色\n            }\n\n            if(fmod(uv.x ,(radiox * 2)) &lt; (radiox * 2) * _RimPower)//边框\n            {\n                c = _RimColor;\n            }\n            if(fmod(uv.y ,(radioy * 2)) &lt; (radioy * 2) * _RimPower)\n            {\n                c = _RimColor;\n            }\n\n            o.Albedo = c.rgb;\n            o.Alpha = 0.5;\n        }\n        ENDCG\n    } \n    FallBack &quot;Diffuse&quot;\n}\n</code></pre>\n<p>我知道，以上写的很粗糙。。。但是，谁让我是pc上用的呢，谁还管效率是毛线<br>下一步，需要每套的脚本控制</p>\n<h2 id=\"编写控制脚本\"><a href=\"#编写控制脚本\" class=\"headerlink\" title=\"编写控制脚本\"></a>编写控制脚本</h2><p>主要是为了运行时，通过点击生成方格</p>\n<pre><code class=\"csharp\">using System.Collections.Generic;\nusing UnityEngine;\n\n/**\n * \n * 用于编辑器美术使用脚本，功能为画地形方块\n * \n */\npublic class TerrianBlockControl : MonoBehaviour\n{\n    public int width;\n    public int height;\n    public Texture2D texture;\n#if UNITY_EDITOR\n    private Material material;\n    private MeshRenderer meshRenderer;\n    private RaycastHit hit;\n    private float ratioW;\n    private float ratioH;\n    private int[,] matrix;\n\n    void Start()\n    {\n        meshRenderer = GetComponent&lt;MeshRenderer&gt;();\n        material = meshRenderer.material;\n        texture = new Texture2D(width * 3, height * 3);\n\n        material.SetTexture(&quot;_MainTex&quot;, texture);\n        ratioW = 1.0f/width;\n        ratioH = 1.0f/height;\n        material.SetVector(&quot;_Size&quot;, new Vector4(width, height, 0, 0));\n        matrix = new int[width,height];\n        MatrixInit();\n    }\n\n\n\n    public void ChangeSize(int x, int y)\n    {\n        width = x;\n        height = y;\n        ratioW = 1.0f / width;\n        ratioH = 1.0f / height;\n        matrix = new int[width,height];\n        MatrixInit();\n    }\n\n    public void Update()\n    {\n        Ray ray = Camera.main.ScreenPointToRay(Input.mousePosition);\n        if (Physics.Raycast(ray, out hit))\n        {//算出每个方格的正中心坐标\n            float x = Mathf.FloorToInt(hit.textureCoord.x/ratioW)*ratioW + ratioW*0.5f;\n            float y = Mathf.FloorToInt(hit.textureCoord.y / ratioH) * ratioH + ratioH * 0.5f;\n            material.SetVector(&quot;_HitPoint&quot;,new Vector4(x,y,0,0));\n        }\n        if (Input.GetMouseButtonDown(0))\n        {//算出所在格子的坐标\n            int x = Mathf.FloorToInt(hit.textureCoord.x/ratioW) * 3 + 1;\n            int y = Mathf.FloorToInt(hit.textureCoord.y/ratioH) * 3 + 1;\n            Color  c = texture.GetPixel(x, y);\n            if (c.g &gt;= 0.9f)\n            {\n                texture.SetPixel(x, y, Color.black);\n                matrix[(x - 1) / 3, (y - 1) / 3] = 0;\n            }\n            else\n            {\n                texture.SetPixel(x, y, Color.green);\n                matrix[(x - 1) / 3, (y - 1) / 3] = 1;\n            }\n            texture.Apply(true);\n            material.SetTexture(&quot;_MainTex&quot;,texture);\n        }\n    }\n\n    void MatrixInit()\n    {\n        for (int i = 0; i &lt; width; i++)\n        {\n            for (int j = 0; j &lt; height; j++)\n            {\n                matrix[i, j] = 0;\n            }\n        }\n    }\n\n    List&lt;rect&gt; rects;\n    [ContextMenu(&quot;Save&quot;)]\n    public GameObject Save()\n    {\n        rects = new List&lt;rect&gt;();\n        for (int i = 0; i &lt; width; i++) //合并，把我们已经画好的方格进行合并\n        {\n            for (int j = 0; j &lt; height; j++)\n            {\n                if (matrix[i, j] == 1)\n                {\n                    rect r = new rect();\n                    r.dl = new Vector3(i,j,0);\n                    r.dr = new Vector3(i+1,j,0);\n                    r.ul = new Vector3(i,j+1,0);\n                    r.ur = new Vector3(i+1,j+1);\n                    r.length = 1;\n                    matrix[i, j] = 0;\n\n\n                    for (int k = i+1; k &lt; width; k++) //在width方向上进行合并\n                    {\n                        if (matrix[k, j] == 1)\n                        {\n                            r.dr=new Vector3(k+1,j,0);\n                            r.ur = new Vector3(k+1,j+1,0);\n                            matrix[k, j] = 0;\n                            r.length++;\n                        }\n                        else\n                        {\n                            break;\n                        }\n                    }\n\n                    for (int k = i-1; k &gt;= 0; k--)\n                    {\n                        if (matrix[k, j] == 1)\n                        {\n                            r.dl = new Vector3(k,j,0);\n                            r.ul = new Vector3(k,j+1,0);\n                            matrix[k, j] = 0;\n                            r.length++;\n                        }\n                        else\n                        {\n                            break;\n                        }\n                    }\n                    rects.Add(r);\n                }\n            }\n        }\n\n        for (int i = 0; i &lt; rects.Count; i++) //把合并过的，相邻的且大小相等的再合并\n        {\n            if (!rects[i].used &amp;&amp; rects[i].length != 0)\n            {\n                for (int j = 0; j &lt; rects.Count; j++)\n                {//没有合并过  不是自身  \n                    if (!rects[j].used &amp;&amp; i != j &amp;&amp; rects[j].length != 0)\n                    {\n                        if (rects[i].length == rects[j].length)\n                        {\n                            if (rects[i].dl.x == rects[j].dl.x)\n                            {\n                                if (rects[i].ul.y - rects[j].ul.y == 1)\n                                {\n                                    rects[i].dl = rects[j].dl;\n                                    rects[i].dr = rects[j].dr;\n\n                                    rects[i].used = true;\n                                    rects[j].length = 0;\n                                }\n                                if (rects[i].ul.y - rects[j].ul.y == -1)\n                                {\n                                    rects[i].ul = rects[j].ul;\n                                    rects[i].ur = rects[j].ur;\n\n                                    rects[i].used = true;\n                                    rects[j].length = 0;\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n\n            if (rects[i].length != 0 &amp;&amp; rects[i].ul.y - rects[i].dl.y == 1)\n                rects[i].used = true;\n        }\n\n        return creat(rects);\n    }\n\n    class rect\n    {\n        public Vector3 dl;\n        public Vector3 dr;\n        public Vector3 ul;\n        public Vector3 ur;\n        public int length;\n        public bool used;\n    }\n//创建mesh\n    GameObject creat(List&lt;rect&gt; rects_Old )\n    {\n        List&lt;rect&gt; rects = new List&lt;rect&gt;();\n        foreach (var rr in rects_Old)\n        {\n            if(rr.used)\n                rects.Add(rr);\n        }\n        GameObject mp = GameObject.Find(&quot;MaskParent&quot;);\n        if(mp == null)\n            mp = new GameObject(&quot;MaskParent&quot;);\n        mp.transform.position = Vector3.zero;\n\n        GameObject go = new GameObject(transform.name);\n        go.transform.parent = mp.transform;\n        go.transform.localPosition = Vector3.zero;\n        MeshFilter mf = go.AddComponent&lt;MeshFilter&gt;();\n        MeshRenderer mr = go.AddComponent&lt;MeshRenderer&gt;();\n        mr.material = new Material(Shader.Find(&quot;Diffuse&quot;));\n\n        Mesh mesh = new Mesh();\n        Vector3[] vectices = new Vector3[rects.Count*4];\n        int[] trangles = new int[rects.Count * 6];\n\n        Vector3 startPos = transform.position;\n\n        float scalex = transform.localScale.x;\n        float scaley = transform.localScale.y;\n        startPos.x -= scalex * 0.5f;\n        startPos.z -= scaley * 0.5f;\n\n        int len = 0;\n        for (int i = 0; i &lt; rects.Count; i++)\n        {//添加mesh的Vectices\n            rect r = rects[i];\n            Vector3 dl = new Vector3(startPos.x + ratioW * r.dl.x * scalex, startPos.z + ratioH * r.dl.y * scaley, 0);\n\n            Vector3 dr = new Vector3(startPos.x + ratioW * r.dr.x * scalex, startPos.z + ratioH * r.dr.y * scaley, 0);\n\n            Vector3 ul = new Vector3(startPos.x + ratioW * r.ul.x * scalex, startPos.z + ratioH * r.ul.y * scaley, 0);\n\n            Vector3 ur = new Vector3(startPos.x + ratioW * r.ur.x * scalex, startPos.z + ratioH * r.ur.y * scaley, 0);\n\n\n            vectices[i*4] = dl;\n            vectices[i * 4 + 1] = dr;\n            vectices[i * 4 + 2] = ul;\n            vectices[i * 4 + 3] = ur;//根据上面的点顺时针画三角形\n            trangles[i*6] = i*4;\n            trangles[i * 6 + 1] = i * 4 +2;\n            trangles[i * 6 + 2] = i * 4 +1;\n            trangles[i * 6 + 3] = i * 4 +1;\n            trangles[i * 6 + 4] = i * 4 +2;\n            trangles[i * 6 + 5] = i * 4 +3;\n        }\n\n        mesh.vertices = vectices;\n        mesh.triangles = trangles;\n        mesh.RecalculateNormals();\n        mesh.RecalculateBounds();\n        mf.mesh = mesh;\n\n        return go;\n    }\n\n#endif\n}\n</code></pre>\n<p>根据以上两步能得到画好的mesh图形，还需要保存。</p>\n<h2 id=\"保存自创Mesh\"><a href=\"#保存自创Mesh\" class=\"headerlink\" title=\"保存自创Mesh\"></a>保存自创Mesh</h2><p>这个很蛋疼，因为在运行状态下，原以为保存成预制没事，然后停止后还是尘归尘土归土。。。最后找了很久，感谢<a href=\"http://blog.csdn.net/awnuxcvbn/article/details/50737192\" target=\"_blank\" rel=\"external\">这位的博客</a>帮助，成功导出成OBJ文件，在unity中生成FBX.</p>\n<p>具体代码如下：</p>\n<pre><code class=\"csharp\">using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Text;\nusing UnityEngine;\npublic class ObjExporter\n{\n    //\n    // Static Methods\n    //\n    public static void MeshToFile(MeshFilter mf, string filename, float scale)\n    {\n        using (StreamWriter streamWriter = new StreamWriter(filename))\n        {\n            streamWriter.Write(ObjExporter.MeshToString(mf, scale));\n        }\n    }\n\n    public static string MeshToString(MeshFilter mf, float scale)\n    {\n        Mesh mesh = mf.mesh;\n        Material[] sharedMaterials = mf.GetComponent&lt;Renderer&gt;().sharedMaterials;\n        Vector2 textureOffset = mf.GetComponent&lt;Renderer&gt;().material.GetTextureOffset(&quot;_MainTex&quot;);\n        Vector2 textureScale = mf.GetComponent&lt;Renderer&gt;().material.GetTextureScale(&quot;_MainTex&quot;);\n        StringBuilder stringBuilder = new StringBuilder();\n        stringBuilder.Append(&quot;mtllib design.mtl&quot;).Append(&quot;\\n&quot;);\n        stringBuilder.Append(&quot;g &quot;).Append(mf.name).Append(&quot;\\n&quot;);\n        Vector3[] vertices = mesh.vertices;\n        for (int i = 0; i &lt; vertices.Length; i++)\n        {\n            Vector3 vector = vertices[i];\n            stringBuilder.Append(string.Format(&quot;v {0} {1} {2}\\n&quot;, vector.x * scale, vector.z * scale, vector.y * scale));\n        }\n        stringBuilder.Append(&quot;\\n&quot;);\n        Dictionary&lt;int, int&gt; dictionary = new Dictionary&lt;int, int&gt;();\n        if (mesh.subMeshCount &gt; 1)\n        {\n            int[] triangles = mesh.GetTriangles(1);\n            for (int j = 0; j &lt; triangles.Length; j += 3)\n            {\n                if (!dictionary.ContainsKey(triangles[j]))\n                {\n                    dictionary.Add(triangles[j], 1);\n                }\n                if (!dictionary.ContainsKey(triangles[j + 1]))\n                {\n                    dictionary.Add(triangles[j + 1], 1);\n                }\n                if (!dictionary.ContainsKey(triangles[j + 2]))\n                {\n                    dictionary.Add(triangles[j + 2], 1);\n                }\n            }\n        }\n        for (int num = 0; num != mesh.uv.Length; num++)\n        {\n            Vector2 vector2 = Vector2.Scale(mesh.uv[num], textureScale) + textureOffset;\n            if (dictionary.ContainsKey(num))\n            {\n                stringBuilder.Append(string.Format(&quot;vt {0} {1}\\n&quot;, mesh.uv[num].x, mesh.uv[num].y));\n            }\n            else\n            {\n                stringBuilder.Append(string.Format(&quot;vt {0} {1}\\n&quot;, vector2.x, vector2.y));\n            }\n        }\n        for (int k = 0; k &lt; mesh.subMeshCount; k++)\n        {\n            stringBuilder.Append(&quot;\\n&quot;);\n            if (k == 0)\n            {\n                stringBuilder.Append(&quot;usemtl &quot;).Append(&quot;Material_design&quot;).Append(&quot;\\n&quot;);\n            }\n            if (k == 1)\n            {\n                stringBuilder.Append(&quot;usemtl &quot;).Append(&quot;Material_logo&quot;).Append(&quot;\\n&quot;);\n            }\n            int[] triangles2 = mesh.GetTriangles(k);\n            for (int l = 0; l &lt; triangles2.Length; l += 3)\n            {\n                stringBuilder.Append(string.Format(&quot;f {0}/{0} {1}/{1} {2}/{2}\\n&quot;, triangles2[l] + 1, triangles2[l + 1] + 1, triangles2[l + 2] + 1));\n            }\n        }\n        return stringBuilder.ToString();\n    }\n}\n</code></pre>\n"},{"title":"基础光照——漫反射与高光反射","date":"2016-09-22T16:00:00.000Z","_content":"\n### 矩阵\n继续学习《Unity Shader 入门精要》。渲染的流程前部分是坐标变换，变换顺序是： \n模型空间（Model Space）-->世界空间（World Space）-->观察空间（View Space）-->裁剪空间-->屏幕空间\n具体的矩阵变换可以方便的使用内置矩阵：\n\n\tUNITY_MATRIX_MVP        当前模型视图投影矩阵\n\tUNITY_MATRIX_MV           当前模型视图矩阵\n\tUNITY_MATRIX_V              当前视图矩阵。\n\tUNITY_MATRIX_P              目前的投影矩阵\n\tUNITY_MATRIX_VP            当前视图*投影矩阵\n\tUNITY_MATRIX_T_MV       移调模型视图矩阵\n\tUNITY_MATRIX_IT_MV      模型视图矩阵的逆转\n\tUNITY_MATRIX_TEXTURE0   UNITY_MATRIX_TEXTURE3          纹理变换矩阵\n\n记住变换顺序很有必要，并且，如果两个矩阵要做 mul 运算的时候，必须在同一坐标空间下。\n\n### 漫反射光照模型\n``` cpp\n\n// Upgrade NOTE: replaced '_World2Object' with 'unity_WorldToObject'\n\nShader \"Mine/6_DiffuseVertexLevel\" {\n\tProperties {\n\t\t_Diffuse (\"Diffuse\", Color) = (1, 1, 1, 1)\n\t}\n\tSubShader {\n\t\tPass {\n\t\t\tTags { \"LightMode\"=\"ForwardBase\" } //只有定义了正确的 LightMode 才能得到要用的 _LightColor0 ...\n\t\t\t\n\t\t\tCGPROGRAM\n\t\t\t\n\t\t\t#pragma vertex vert\n\t\t\t#pragma fragment frag\n\t\t\t\n\t\t\t#include \"Lighting.cginc\" //得到要使用的 _LightColor0 等内置变量\n\n\t\t\tfixed4 _Diffuse;\n\n\t\t\tstruct a2v {\n\t\t\t\tfloat4 vertex : POSITION;\n\t\t\t\tfloat3 normal : NORMAL;\n\t\t\t};\n\n\t\t\tstruct v2f {\n\t\t\t\tfloat4 pos : SV_POSITION;\n\t\t\t\tfixed3 color : COLOR; // or TEXCOORD0\n\t\t\t};\n\n\t\t\tv2f vert(a2v v) {\n\t\t\t\tv2f o;\n\t\t\t\to.pos = mul(UNITY_MATRIX_MVP, v.vertex); // must ,get projection space\n\n\t\t\t\tfixed3 ambient = UNITY_LIGHTMODEL_AMBIENT.xyz; //get ambient\n\t\t\t\t// 把法线从模型空间转换到世界空间，用的右乘当逆矩阵\n\t\t\t\tfixed3 worldNormal = normalize(mul(v.normal, (float3x3)unity_WorldToObject));\n\t\t\t\tfixed3 worldLight = normalize(_WorldSpaceLightPos0.xyz );//只适用于平行光\n\t\t\t\t//漫反射 ＝ 入射光 ＊ 漫反射系数 ＊ max（0，dot（法线，光源方向））\n\t\t\t\tfixed3 diffuse = _LightColor0.rgb * _Diffuse.rgb * saturate(dot(worldNormal, worldLight));\n\t\t\t\t//如果是半lambert，则公式为\n\t\t\t\t//漫反射 ＝ 入射光 ＊ 漫反射系数 ＊ （缩放倍数＊dot（法线，光源方向） ＋ 偏移）\n\t\t\t\t//一般缩放倍数和便宜都取0.5\n\t\t\t\t//fixed3 diffuse = _LightColor0.rgb * _Diffuse.rgb * (0.5*dot(worldNormal,worldLight)+0.5);\n\n\t\t\t\to.color = ambient + diffuse;\n\t\t\t\treturn o;\n\t\t\t}\n\n\t\t\tfixed4 frag(v2f i) : SV_Target {\n\t\t\t\treturn (i.color, 1.0);\n\t\t\t}\n\n\t\t\tENDCG\t\t\t\n\t\t}\n\t}\n\tFallback \"Diffuse\"\n}\n\n```\n\n如果要改为逐像素光照，需要改变 struct v2f，\n``` cpp\nstruct v2f {\n\tfloat4 pos : SV_POSITION;\n\tfixed3 worldNormal : TEXCOORD0\n};\n```\n剩下的工作就是把 vert函数中的部分挪到 frag函数中。\n另，代码中的半Lambert光照模型是为了解决在实际中，普通漫反射在光照不到的情况下是暗黑色的问题。\n\n### 高光反射光照模型\n\n``` cpp\n// Upgrade NOTE: replaced '_Object2World' with 'unity_ObjectToWorld'\n// Upgrade NOTE: replaced '_World2Object' with 'unity_WorldToObject'\n\nShader \"Custom/6_SpecularVertexLevel\" {\n\tProperties {\n\t\t_Diffuse (\"Diffuse\", Color) = (1.0, 1.0, 1.0, 1.0)\n\t\t_Specular (\"Specular\", Color) = (1.0, 1.0, 1.0, 1.0)\n\t\t_Gloss (\"Gloss\", Range(8.0, 256)) = 20\n\t}\n\tSubShader {\n\t\tPass {\n\t\t\tTags { \"LightMode\"=\"ForwardBase\" }\n\n\t\t\tCGPROGRAM\n\n\t\t\t#pragma vertex vert\n\t\t\t#pragma fragment frag\n\n\t\t\t#include \"Lighting.cginc\"\n\n\t\t\tfixed4 _Diffuse;\n\t\t\tfixed4 _Specular;\n\t\t\tfloat _Gloss;\n\n\t\t\tstruct a2v {\n\t\t\t\tfloat4 vertex : POSITION;\n\t\t\t\tfloat3 normal : NORMAL;\n\t\t\t};\n\n\t\t\tstruct v2f {\n\t\t\t\tfloat4 pos : SV_POSITION;\n\t\t\t\tfixed color : COLOR;\n\t\t\t};\n\n\t\t\tv2f vert(a2v v) {\n\t\t\t\tv2f o;\n\t\t\t\to.pos = mul(UNITY_MATRIX_MVP, v.vertex);\n\t\t\t\tfixed3 ambient = UNITY_LIGHTMODEL_AMBIENT.xyz;\n\n\t\t\t\tfixed3 worldNormal = normalize(mul(v.normal, (float3x3)unity_WorldToObject)); //用unity内置函数是： ＝ UnityObjectToWorldNormal(v.normal)\n\t\t\t\tfixed3 worldLightDir = normalize(_WorldSpaceLightPos0.xyz);\n\t\t\t\t//漫反射 ＝ 入射光 ＊ 漫反射系数 ＊ max（0，dot（入射方向，法线））\n\t\t\t\tfixed3 diffuse = _LightColor0.rgb * _Diffuse * max(0, dot(worldNormal, worldLightDir));\n\t\t\t\t\n\t\t\t\t//reflect 计算反射方向,两个参数是 入射方向、法线，但是要求入射方向是光源指向入射点，故取反\n\t\t\t\tfixed3 reflectDir = normalize(reflect(-worldLightDir, worldNormal));\n\t\t\t\t//计算视觉方向首先是要求处于同一空间下，然后向量计算\n\t\t\t\tfixed3 viewDir = normalize(_WorldSpaceCameraPos.xyz - mul(unity_ObjectToWorld, v.vertex).xyz);\n\t\t\t\t//高光反射 ＝ 入射光 ＊ 高光系数 ＊ pow（max（0，反射方向 ＊ 视觉方向），光泽度）\n\t\t\t\tfixed3 specular = _LightColor0.rgb * _Specular.rgb * pow(saturate(dot(reflectDir, viewDir)), _Gloss);\n\t\t\t\t\n\t\t\t\t//如果是 BlinnPhong 则把反射方向换成 光线方向和视觉方向和\n\t\t\t\t//fixed3 halfDir = normalize(worldLightDir + viewDir);\n\t\t\t\t//fixed3 specular = _LightColor0.rgb * _Specular.rgb * pow(max(0,dot(worldNormal,halfDir)), _Gloss);\n\n\t\t\t\to.color = ambient + diffuse + specular;\n\t\t\t\treturn o;\t\t\n\t\t\t}\n\n\t\t\tfixed4 frag(v2f i) : SV_Target {\n\t\t\t\treturn (i.color, 1.0);\n\t\t\t}\n\n\t\t\tENDCG\n\t\t}\n\t}\n\tFallback \"Specular\"\n}\n```\n\n如果改为逐像素光照需改动 struct v2f\n``` cpp\nstruct v2f {\n\tfloat4 pos : SV_POSITION;\n\tfixed worldNormal: TEXCOORD0;\n\tfixed worldPos: TEXCOORD1;\n};\n```\n\n然后换上相应的即可。\n代码中给出了用的最多的BlinnPhong模型，目前用的最多。\n\n逐顶点光照和逐像素的区别在于计算的相对少和多，得到效果肯定计算多的逐像素更加显得平滑。","source":"_posts/unity-shader-light.md","raw":"---\ntitle: 基础光照——漫反射与高光反射\ndate: 2016-9-23\ntags:\n- Shader\n- Unity\ncategories: UnityShader\n---\n\n### 矩阵\n继续学习《Unity Shader 入门精要》。渲染的流程前部分是坐标变换，变换顺序是： \n模型空间（Model Space）-->世界空间（World Space）-->观察空间（View Space）-->裁剪空间-->屏幕空间\n具体的矩阵变换可以方便的使用内置矩阵：\n\n\tUNITY_MATRIX_MVP        当前模型视图投影矩阵\n\tUNITY_MATRIX_MV           当前模型视图矩阵\n\tUNITY_MATRIX_V              当前视图矩阵。\n\tUNITY_MATRIX_P              目前的投影矩阵\n\tUNITY_MATRIX_VP            当前视图*投影矩阵\n\tUNITY_MATRIX_T_MV       移调模型视图矩阵\n\tUNITY_MATRIX_IT_MV      模型视图矩阵的逆转\n\tUNITY_MATRIX_TEXTURE0   UNITY_MATRIX_TEXTURE3          纹理变换矩阵\n\n记住变换顺序很有必要，并且，如果两个矩阵要做 mul 运算的时候，必须在同一坐标空间下。\n\n### 漫反射光照模型\n``` cpp\n\n// Upgrade NOTE: replaced '_World2Object' with 'unity_WorldToObject'\n\nShader \"Mine/6_DiffuseVertexLevel\" {\n\tProperties {\n\t\t_Diffuse (\"Diffuse\", Color) = (1, 1, 1, 1)\n\t}\n\tSubShader {\n\t\tPass {\n\t\t\tTags { \"LightMode\"=\"ForwardBase\" } //只有定义了正确的 LightMode 才能得到要用的 _LightColor0 ...\n\t\t\t\n\t\t\tCGPROGRAM\n\t\t\t\n\t\t\t#pragma vertex vert\n\t\t\t#pragma fragment frag\n\t\t\t\n\t\t\t#include \"Lighting.cginc\" //得到要使用的 _LightColor0 等内置变量\n\n\t\t\tfixed4 _Diffuse;\n\n\t\t\tstruct a2v {\n\t\t\t\tfloat4 vertex : POSITION;\n\t\t\t\tfloat3 normal : NORMAL;\n\t\t\t};\n\n\t\t\tstruct v2f {\n\t\t\t\tfloat4 pos : SV_POSITION;\n\t\t\t\tfixed3 color : COLOR; // or TEXCOORD0\n\t\t\t};\n\n\t\t\tv2f vert(a2v v) {\n\t\t\t\tv2f o;\n\t\t\t\to.pos = mul(UNITY_MATRIX_MVP, v.vertex); // must ,get projection space\n\n\t\t\t\tfixed3 ambient = UNITY_LIGHTMODEL_AMBIENT.xyz; //get ambient\n\t\t\t\t// 把法线从模型空间转换到世界空间，用的右乘当逆矩阵\n\t\t\t\tfixed3 worldNormal = normalize(mul(v.normal, (float3x3)unity_WorldToObject));\n\t\t\t\tfixed3 worldLight = normalize(_WorldSpaceLightPos0.xyz );//只适用于平行光\n\t\t\t\t//漫反射 ＝ 入射光 ＊ 漫反射系数 ＊ max（0，dot（法线，光源方向））\n\t\t\t\tfixed3 diffuse = _LightColor0.rgb * _Diffuse.rgb * saturate(dot(worldNormal, worldLight));\n\t\t\t\t//如果是半lambert，则公式为\n\t\t\t\t//漫反射 ＝ 入射光 ＊ 漫反射系数 ＊ （缩放倍数＊dot（法线，光源方向） ＋ 偏移）\n\t\t\t\t//一般缩放倍数和便宜都取0.5\n\t\t\t\t//fixed3 diffuse = _LightColor0.rgb * _Diffuse.rgb * (0.5*dot(worldNormal,worldLight)+0.5);\n\n\t\t\t\to.color = ambient + diffuse;\n\t\t\t\treturn o;\n\t\t\t}\n\n\t\t\tfixed4 frag(v2f i) : SV_Target {\n\t\t\t\treturn (i.color, 1.0);\n\t\t\t}\n\n\t\t\tENDCG\t\t\t\n\t\t}\n\t}\n\tFallback \"Diffuse\"\n}\n\n```\n\n如果要改为逐像素光照，需要改变 struct v2f，\n``` cpp\nstruct v2f {\n\tfloat4 pos : SV_POSITION;\n\tfixed3 worldNormal : TEXCOORD0\n};\n```\n剩下的工作就是把 vert函数中的部分挪到 frag函数中。\n另，代码中的半Lambert光照模型是为了解决在实际中，普通漫反射在光照不到的情况下是暗黑色的问题。\n\n### 高光反射光照模型\n\n``` cpp\n// Upgrade NOTE: replaced '_Object2World' with 'unity_ObjectToWorld'\n// Upgrade NOTE: replaced '_World2Object' with 'unity_WorldToObject'\n\nShader \"Custom/6_SpecularVertexLevel\" {\n\tProperties {\n\t\t_Diffuse (\"Diffuse\", Color) = (1.0, 1.0, 1.0, 1.0)\n\t\t_Specular (\"Specular\", Color) = (1.0, 1.0, 1.0, 1.0)\n\t\t_Gloss (\"Gloss\", Range(8.0, 256)) = 20\n\t}\n\tSubShader {\n\t\tPass {\n\t\t\tTags { \"LightMode\"=\"ForwardBase\" }\n\n\t\t\tCGPROGRAM\n\n\t\t\t#pragma vertex vert\n\t\t\t#pragma fragment frag\n\n\t\t\t#include \"Lighting.cginc\"\n\n\t\t\tfixed4 _Diffuse;\n\t\t\tfixed4 _Specular;\n\t\t\tfloat _Gloss;\n\n\t\t\tstruct a2v {\n\t\t\t\tfloat4 vertex : POSITION;\n\t\t\t\tfloat3 normal : NORMAL;\n\t\t\t};\n\n\t\t\tstruct v2f {\n\t\t\t\tfloat4 pos : SV_POSITION;\n\t\t\t\tfixed color : COLOR;\n\t\t\t};\n\n\t\t\tv2f vert(a2v v) {\n\t\t\t\tv2f o;\n\t\t\t\to.pos = mul(UNITY_MATRIX_MVP, v.vertex);\n\t\t\t\tfixed3 ambient = UNITY_LIGHTMODEL_AMBIENT.xyz;\n\n\t\t\t\tfixed3 worldNormal = normalize(mul(v.normal, (float3x3)unity_WorldToObject)); //用unity内置函数是： ＝ UnityObjectToWorldNormal(v.normal)\n\t\t\t\tfixed3 worldLightDir = normalize(_WorldSpaceLightPos0.xyz);\n\t\t\t\t//漫反射 ＝ 入射光 ＊ 漫反射系数 ＊ max（0，dot（入射方向，法线））\n\t\t\t\tfixed3 diffuse = _LightColor0.rgb * _Diffuse * max(0, dot(worldNormal, worldLightDir));\n\t\t\t\t\n\t\t\t\t//reflect 计算反射方向,两个参数是 入射方向、法线，但是要求入射方向是光源指向入射点，故取反\n\t\t\t\tfixed3 reflectDir = normalize(reflect(-worldLightDir, worldNormal));\n\t\t\t\t//计算视觉方向首先是要求处于同一空间下，然后向量计算\n\t\t\t\tfixed3 viewDir = normalize(_WorldSpaceCameraPos.xyz - mul(unity_ObjectToWorld, v.vertex).xyz);\n\t\t\t\t//高光反射 ＝ 入射光 ＊ 高光系数 ＊ pow（max（0，反射方向 ＊ 视觉方向），光泽度）\n\t\t\t\tfixed3 specular = _LightColor0.rgb * _Specular.rgb * pow(saturate(dot(reflectDir, viewDir)), _Gloss);\n\t\t\t\t\n\t\t\t\t//如果是 BlinnPhong 则把反射方向换成 光线方向和视觉方向和\n\t\t\t\t//fixed3 halfDir = normalize(worldLightDir + viewDir);\n\t\t\t\t//fixed3 specular = _LightColor0.rgb * _Specular.rgb * pow(max(0,dot(worldNormal,halfDir)), _Gloss);\n\n\t\t\t\to.color = ambient + diffuse + specular;\n\t\t\t\treturn o;\t\t\n\t\t\t}\n\n\t\t\tfixed4 frag(v2f i) : SV_Target {\n\t\t\t\treturn (i.color, 1.0);\n\t\t\t}\n\n\t\t\tENDCG\n\t\t}\n\t}\n\tFallback \"Specular\"\n}\n```\n\n如果改为逐像素光照需改动 struct v2f\n``` cpp\nstruct v2f {\n\tfloat4 pos : SV_POSITION;\n\tfixed worldNormal: TEXCOORD0;\n\tfixed worldPos: TEXCOORD1;\n};\n```\n\n然后换上相应的即可。\n代码中给出了用的最多的BlinnPhong模型，目前用的最多。\n\n逐顶点光照和逐像素的区别在于计算的相对少和多，得到效果肯定计算多的逐像素更加显得平滑。","slug":"unity-shader-light","published":1,"updated":"2017-10-26T09:34:23.907Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj9fm90tn000s2cobyu902d9e","content":"<h3 id=\"矩阵\"><a href=\"#矩阵\" class=\"headerlink\" title=\"矩阵\"></a>矩阵</h3><p>继续学习《Unity Shader 入门精要》。渲染的流程前部分是坐标变换，变换顺序是：<br>模型空间（Model Space）–&gt;世界空间（World Space）–&gt;观察空间（View Space）–&gt;裁剪空间–&gt;屏幕空间<br>具体的矩阵变换可以方便的使用内置矩阵：</p>\n<pre><code>UNITY_MATRIX_MVP        当前模型视图投影矩阵\nUNITY_MATRIX_MV           当前模型视图矩阵\nUNITY_MATRIX_V              当前视图矩阵。\nUNITY_MATRIX_P              目前的投影矩阵\nUNITY_MATRIX_VP            当前视图*投影矩阵\nUNITY_MATRIX_T_MV       移调模型视图矩阵\nUNITY_MATRIX_IT_MV      模型视图矩阵的逆转\nUNITY_MATRIX_TEXTURE0   UNITY_MATRIX_TEXTURE3          纹理变换矩阵\n</code></pre><p>记住变换顺序很有必要，并且，如果两个矩阵要做 mul 运算的时候，必须在同一坐标空间下。</p>\n<h3 id=\"漫反射光照模型\"><a href=\"#漫反射光照模型\" class=\"headerlink\" title=\"漫反射光照模型\"></a>漫反射光照模型</h3><pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\">\n<span class=\"token comment\" spellcheck=\"true\">// Upgrade NOTE: replaced '_World2Object' with 'unity_WorldToObject'</span>\n\nShader <span class=\"token string\">\"Mine/6_DiffuseVertexLevel\"</span> <span class=\"token punctuation\">{</span>\n    Properties <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">_Diffuse</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"Diffuse\"</span><span class=\"token punctuation\">,</span> Color<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    SubShader <span class=\"token punctuation\">{</span>\n        Pass <span class=\"token punctuation\">{</span>\n            Tags <span class=\"token punctuation\">{</span> <span class=\"token string\">\"LightMode\"</span><span class=\"token operator\">=</span><span class=\"token string\">\"ForwardBase\"</span> <span class=\"token punctuation\">}</span> <span class=\"token comment\" spellcheck=\"true\">//只有定义了正确的 LightMode 才能得到要用的 _LightColor0 ...</span>\n\n            CGPROGRAM\n\n            <span class=\"token macro property\">#<span class=\"token directive keyword\">pragma</span> vertex vert</span>\n            <span class=\"token macro property\">#<span class=\"token directive keyword\">pragma</span> fragment frag</span>\n\n            <span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"Lighting.cginc\"</span> </span><span class=\"token comment\" spellcheck=\"true\">//得到要使用的 _LightColor0 等内置变量</span>\n\n            fixed4 _Diffuse<span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">struct</span> a2v <span class=\"token punctuation\">{</span>\n                float4 vertex <span class=\"token operator\">:</span> POSITION<span class=\"token punctuation\">;</span>\n                float3 normal <span class=\"token operator\">:</span> NORMAL<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">struct</span> v2f <span class=\"token punctuation\">{</span>\n                float4 pos <span class=\"token operator\">:</span> SV_POSITION<span class=\"token punctuation\">;</span>\n                fixed3 color <span class=\"token operator\">:</span> COLOR<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// or TEXCOORD0</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n            v2f <span class=\"token function\">vert</span><span class=\"token punctuation\">(</span>a2v v<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                v2f o<span class=\"token punctuation\">;</span>\n                o<span class=\"token punctuation\">.</span>pos <span class=\"token operator\">=</span> <span class=\"token function\">mul</span><span class=\"token punctuation\">(</span>UNITY_MATRIX_MVP<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">.</span>vertex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// must ,get projection space</span>\n\n                fixed3 ambient <span class=\"token operator\">=</span> UNITY_LIGHTMODEL_AMBIENT<span class=\"token punctuation\">.</span>xyz<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">//get ambient</span>\n                <span class=\"token comment\" spellcheck=\"true\">// 把法线从模型空间转换到世界空间，用的右乘当逆矩阵</span>\n                fixed3 worldNormal <span class=\"token operator\">=</span> <span class=\"token function\">normalize</span><span class=\"token punctuation\">(</span><span class=\"token function\">mul</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">.</span>normal<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>float3x3<span class=\"token punctuation\">)</span>unity_WorldToObject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                fixed3 worldLight <span class=\"token operator\">=</span> <span class=\"token function\">normalize</span><span class=\"token punctuation\">(</span>_WorldSpaceLightPos0<span class=\"token punctuation\">.</span>xyz <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//只适用于平行光</span>\n                <span class=\"token comment\" spellcheck=\"true\">//漫反射 ＝ 入射光 ＊ 漫反射系数 ＊ max（0，dot（法线，光源方向））</span>\n                fixed3 diffuse <span class=\"token operator\">=</span> _LightColor0<span class=\"token punctuation\">.</span>rgb <span class=\"token operator\">*</span> _Diffuse<span class=\"token punctuation\">.</span>rgb <span class=\"token operator\">*</span> <span class=\"token function\">saturate</span><span class=\"token punctuation\">(</span><span class=\"token function\">dot</span><span class=\"token punctuation\">(</span>worldNormal<span class=\"token punctuation\">,</span> worldLight<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token comment\" spellcheck=\"true\">//如果是半lambert，则公式为</span>\n                <span class=\"token comment\" spellcheck=\"true\">//漫反射 ＝ 入射光 ＊ 漫反射系数 ＊ （缩放倍数＊dot（法线，光源方向） ＋ 偏移）</span>\n                <span class=\"token comment\" spellcheck=\"true\">//一般缩放倍数和便宜都取0.5</span>\n                <span class=\"token comment\" spellcheck=\"true\">//fixed3 diffuse = _LightColor0.rgb * _Diffuse.rgb * (0.5*dot(worldNormal,worldLight)+0.5);</span>\n\n                o<span class=\"token punctuation\">.</span>color <span class=\"token operator\">=</span> ambient <span class=\"token operator\">+</span> diffuse<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">return</span> o<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            fixed4 <span class=\"token function\">frag</span><span class=\"token punctuation\">(</span>v2f i<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> SV_Target <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">,</span> <span class=\"token number\">1.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            ENDCG            \n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    Fallback <span class=\"token string\">\"Diffuse\"</span>\n<span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>如果要改为逐像素光照，需要改变 struct v2f，</p>\n<pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">struct</span> v2f <span class=\"token punctuation\">{</span>\n    float4 pos <span class=\"token operator\">:</span> SV_POSITION<span class=\"token punctuation\">;</span>\n    fixed3 worldNormal <span class=\"token operator\">:</span> TEXCOORD0\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>剩下的工作就是把 vert函数中的部分挪到 frag函数中。<br>另，代码中的半Lambert光照模型是为了解决在实际中，普通漫反射在光照不到的情况下是暗黑色的问题。</p>\n<h3 id=\"高光反射光照模型\"><a href=\"#高光反射光照模型\" class=\"headerlink\" title=\"高光反射光照模型\"></a>高光反射光照模型</h3><pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\"><span class=\"token comment\" spellcheck=\"true\">// Upgrade NOTE: replaced '_Object2World' with 'unity_ObjectToWorld'</span>\n<span class=\"token comment\" spellcheck=\"true\">// Upgrade NOTE: replaced '_World2Object' with 'unity_WorldToObject'</span>\n\nShader <span class=\"token string\">\"Custom/6_SpecularVertexLevel\"</span> <span class=\"token punctuation\">{</span>\n    Properties <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">_Diffuse</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"Diffuse\"</span><span class=\"token punctuation\">,</span> Color<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1.0</span><span class=\"token punctuation\">)</span>\n        <span class=\"token function\">_Specular</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"Specular\"</span><span class=\"token punctuation\">,</span> Color<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1.0</span><span class=\"token punctuation\">)</span>\n        <span class=\"token function\">_Gloss</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"Gloss\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">Range</span><span class=\"token punctuation\">(</span><span class=\"token number\">8.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">256</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">20</span>\n    <span class=\"token punctuation\">}</span>\n    SubShader <span class=\"token punctuation\">{</span>\n        Pass <span class=\"token punctuation\">{</span>\n            Tags <span class=\"token punctuation\">{</span> <span class=\"token string\">\"LightMode\"</span><span class=\"token operator\">=</span><span class=\"token string\">\"ForwardBase\"</span> <span class=\"token punctuation\">}</span>\n\n            CGPROGRAM\n\n            <span class=\"token macro property\">#<span class=\"token directive keyword\">pragma</span> vertex vert</span>\n            <span class=\"token macro property\">#<span class=\"token directive keyword\">pragma</span> fragment frag</span>\n\n            <span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"Lighting.cginc\"</span></span>\n\n            fixed4 _Diffuse<span class=\"token punctuation\">;</span>\n            fixed4 _Specular<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">float</span> _Gloss<span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">struct</span> a2v <span class=\"token punctuation\">{</span>\n                float4 vertex <span class=\"token operator\">:</span> POSITION<span class=\"token punctuation\">;</span>\n                float3 normal <span class=\"token operator\">:</span> NORMAL<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">struct</span> v2f <span class=\"token punctuation\">{</span>\n                float4 pos <span class=\"token operator\">:</span> SV_POSITION<span class=\"token punctuation\">;</span>\n                fixed color <span class=\"token operator\">:</span> COLOR<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n            v2f <span class=\"token function\">vert</span><span class=\"token punctuation\">(</span>a2v v<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                v2f o<span class=\"token punctuation\">;</span>\n                o<span class=\"token punctuation\">.</span>pos <span class=\"token operator\">=</span> <span class=\"token function\">mul</span><span class=\"token punctuation\">(</span>UNITY_MATRIX_MVP<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">.</span>vertex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                fixed3 ambient <span class=\"token operator\">=</span> UNITY_LIGHTMODEL_AMBIENT<span class=\"token punctuation\">.</span>xyz<span class=\"token punctuation\">;</span>\n\n                fixed3 worldNormal <span class=\"token operator\">=</span> <span class=\"token function\">normalize</span><span class=\"token punctuation\">(</span><span class=\"token function\">mul</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">.</span>normal<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>float3x3<span class=\"token punctuation\">)</span>unity_WorldToObject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">//用unity内置函数是： ＝ UnityObjectToWorldNormal(v.normal)</span>\n                fixed3 worldLightDir <span class=\"token operator\">=</span> <span class=\"token function\">normalize</span><span class=\"token punctuation\">(</span>_WorldSpaceLightPos0<span class=\"token punctuation\">.</span>xyz<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token comment\" spellcheck=\"true\">//漫反射 ＝ 入射光 ＊ 漫反射系数 ＊ max（0，dot（入射方向，法线））</span>\n                fixed3 diffuse <span class=\"token operator\">=</span> _LightColor0<span class=\"token punctuation\">.</span>rgb <span class=\"token operator\">*</span> _Diffuse <span class=\"token operator\">*</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token function\">dot</span><span class=\"token punctuation\">(</span>worldNormal<span class=\"token punctuation\">,</span> worldLightDir<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                <span class=\"token comment\" spellcheck=\"true\">//reflect 计算反射方向,两个参数是 入射方向、法线，但是要求入射方向是光源指向入射点，故取反</span>\n                fixed3 reflectDir <span class=\"token operator\">=</span> <span class=\"token function\">normalize</span><span class=\"token punctuation\">(</span><span class=\"token function\">reflect</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span>worldLightDir<span class=\"token punctuation\">,</span> worldNormal<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token comment\" spellcheck=\"true\">//计算视觉方向首先是要求处于同一空间下，然后向量计算</span>\n                fixed3 viewDir <span class=\"token operator\">=</span> <span class=\"token function\">normalize</span><span class=\"token punctuation\">(</span>_WorldSpaceCameraPos<span class=\"token punctuation\">.</span>xyz <span class=\"token operator\">-</span> <span class=\"token function\">mul</span><span class=\"token punctuation\">(</span>unity_ObjectToWorld<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">.</span>vertex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>xyz<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token comment\" spellcheck=\"true\">//高光反射 ＝ 入射光 ＊ 高光系数 ＊ pow（max（0，反射方向 ＊ 视觉方向），光泽度）</span>\n                fixed3 specular <span class=\"token operator\">=</span> _LightColor0<span class=\"token punctuation\">.</span>rgb <span class=\"token operator\">*</span> _Specular<span class=\"token punctuation\">.</span>rgb <span class=\"token operator\">*</span> <span class=\"token function\">pow</span><span class=\"token punctuation\">(</span><span class=\"token function\">saturate</span><span class=\"token punctuation\">(</span><span class=\"token function\">dot</span><span class=\"token punctuation\">(</span>reflectDir<span class=\"token punctuation\">,</span> viewDir<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> _Gloss<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                <span class=\"token comment\" spellcheck=\"true\">//如果是 BlinnPhong 则把反射方向换成 光线方向和视觉方向和</span>\n                <span class=\"token comment\" spellcheck=\"true\">//fixed3 halfDir = normalize(worldLightDir + viewDir);</span>\n                <span class=\"token comment\" spellcheck=\"true\">//fixed3 specular = _LightColor0.rgb * _Specular.rgb * pow(max(0,dot(worldNormal,halfDir)), _Gloss);</span>\n\n                o<span class=\"token punctuation\">.</span>color <span class=\"token operator\">=</span> ambient <span class=\"token operator\">+</span> diffuse <span class=\"token operator\">+</span> specular<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">return</span> o<span class=\"token punctuation\">;</span>        \n            <span class=\"token punctuation\">}</span>\n\n            fixed4 <span class=\"token function\">frag</span><span class=\"token punctuation\">(</span>v2f i<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> SV_Target <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">,</span> <span class=\"token number\">1.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            ENDCG\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    Fallback <span class=\"token string\">\"Specular\"</span>\n<span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>如果改为逐像素光照需改动 struct v2f</p>\n<pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">struct</span> v2f <span class=\"token punctuation\">{</span>\n    float4 pos <span class=\"token operator\">:</span> SV_POSITION<span class=\"token punctuation\">;</span>\n    fixed worldNormal<span class=\"token operator\">:</span> TEXCOORD0<span class=\"token punctuation\">;</span>\n    fixed worldPos<span class=\"token operator\">:</span> TEXCOORD1<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>然后换上相应的即可。<br>代码中给出了用的最多的BlinnPhong模型，目前用的最多。</p>\n<p>逐顶点光照和逐像素的区别在于计算的相对少和多，得到效果肯定计算多的逐像素更加显得平滑。</p>\n","site":{"data":{"gallery":{"美女":{"full_link":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1508912200438&di=d5b3eacf86d8f94c149c6fc68fe4da67&imgtype=0&src=http%3A%2F%2Fpic01.taopic.com%2F151014%2F234732-15101410452229-lp.jpg","thumb_link":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1508912200438&di=d5b3eacf86d8f94c149c6fc68fe4da67&imgtype=0&src=http%3A%2F%2Fpic01.taopic.com%2F151014%2F234732-15101410452229-lp.jpg","descr":"美女插画"}},"links":{"Github":{"link":"https://github.com/garsonlab","avatar":"https://avatars3.githubusercontent.com/u/13958934?s=460&v=4","descr":"My Github","type":"Blog"},"OnLineTools":{"link":"http://tool.lu/","avatar":"http://qn11.tool.lu/201710/15/103320SbM84Ql4tETjg49a_28x28.png","descr":"在线工具","type":"Tools"},"CMDMarkdown":{"link":"https://www.zybuluo.com/","avatar":"https://www.zybuluo.com/static/img/logo.png","descr":"Markdown在线编辑","type":"Tools"},"Hexo文档":{"link":"https://hexo.io/zh-cn/docs/","avatar":"https://hexo.io/logo.svg","descr":"Hexo中文官方文档","type":"Community"},"游戏蛮牛":{"link":"http://www.manew.com/forum.php","avatar":"http://www.manew.com/template/manew2016/images/logo.png","descr":"unity交流社区","type":"Unity"},"FairyGUI":{"link":"http://www.fairygui.com/","avatar":"http://www.fairygui.com/images/20170728151207.png","descr":"FairyGUI官方网站","type":"Site"}},"linktypes":{"Blog":{"name":"关注的博客"},"Unity":{"name":"Unity3D"},"Community":{"name":"浏览的社区"},"Tools":{"name":"工具"},"Site":{"name":"收藏的网址"}}}},"excerpt":"","more":"<h3 id=\"矩阵\"><a href=\"#矩阵\" class=\"headerlink\" title=\"矩阵\"></a>矩阵</h3><p>继续学习《Unity Shader 入门精要》。渲染的流程前部分是坐标变换，变换顺序是：<br>模型空间（Model Space）–&gt;世界空间（World Space）–&gt;观察空间（View Space）–&gt;裁剪空间–&gt;屏幕空间<br>具体的矩阵变换可以方便的使用内置矩阵：</p>\n<pre><code>UNITY_MATRIX_MVP        当前模型视图投影矩阵\nUNITY_MATRIX_MV           当前模型视图矩阵\nUNITY_MATRIX_V              当前视图矩阵。\nUNITY_MATRIX_P              目前的投影矩阵\nUNITY_MATRIX_VP            当前视图*投影矩阵\nUNITY_MATRIX_T_MV       移调模型视图矩阵\nUNITY_MATRIX_IT_MV      模型视图矩阵的逆转\nUNITY_MATRIX_TEXTURE0   UNITY_MATRIX_TEXTURE3          纹理变换矩阵\n</code></pre><p>记住变换顺序很有必要，并且，如果两个矩阵要做 mul 运算的时候，必须在同一坐标空间下。</p>\n<h3 id=\"漫反射光照模型\"><a href=\"#漫反射光照模型\" class=\"headerlink\" title=\"漫反射光照模型\"></a>漫反射光照模型</h3><pre><code class=\"cpp\">\n// Upgrade NOTE: replaced &#39;_World2Object&#39; with &#39;unity_WorldToObject&#39;\n\nShader &quot;Mine/6_DiffuseVertexLevel&quot; {\n    Properties {\n        _Diffuse (&quot;Diffuse&quot;, Color) = (1, 1, 1, 1)\n    }\n    SubShader {\n        Pass {\n            Tags { &quot;LightMode&quot;=&quot;ForwardBase&quot; } //只有定义了正确的 LightMode 才能得到要用的 _LightColor0 ...\n\n            CGPROGRAM\n\n            #pragma vertex vert\n            #pragma fragment frag\n\n            #include &quot;Lighting.cginc&quot; //得到要使用的 _LightColor0 等内置变量\n\n            fixed4 _Diffuse;\n\n            struct a2v {\n                float4 vertex : POSITION;\n                float3 normal : NORMAL;\n            };\n\n            struct v2f {\n                float4 pos : SV_POSITION;\n                fixed3 color : COLOR; // or TEXCOORD0\n            };\n\n            v2f vert(a2v v) {\n                v2f o;\n                o.pos = mul(UNITY_MATRIX_MVP, v.vertex); // must ,get projection space\n\n                fixed3 ambient = UNITY_LIGHTMODEL_AMBIENT.xyz; //get ambient\n                // 把法线从模型空间转换到世界空间，用的右乘当逆矩阵\n                fixed3 worldNormal = normalize(mul(v.normal, (float3x3)unity_WorldToObject));\n                fixed3 worldLight = normalize(_WorldSpaceLightPos0.xyz );//只适用于平行光\n                //漫反射 ＝ 入射光 ＊ 漫反射系数 ＊ max（0，dot（法线，光源方向））\n                fixed3 diffuse = _LightColor0.rgb * _Diffuse.rgb * saturate(dot(worldNormal, worldLight));\n                //如果是半lambert，则公式为\n                //漫反射 ＝ 入射光 ＊ 漫反射系数 ＊ （缩放倍数＊dot（法线，光源方向） ＋ 偏移）\n                //一般缩放倍数和便宜都取0.5\n                //fixed3 diffuse = _LightColor0.rgb * _Diffuse.rgb * (0.5*dot(worldNormal,worldLight)+0.5);\n\n                o.color = ambient + diffuse;\n                return o;\n            }\n\n            fixed4 frag(v2f i) : SV_Target {\n                return (i.color, 1.0);\n            }\n\n            ENDCG            \n        }\n    }\n    Fallback &quot;Diffuse&quot;\n}\n</code></pre>\n<p>如果要改为逐像素光照，需要改变 struct v2f，</p>\n<pre><code class=\"cpp\">struct v2f {\n    float4 pos : SV_POSITION;\n    fixed3 worldNormal : TEXCOORD0\n};\n</code></pre>\n<p>剩下的工作就是把 vert函数中的部分挪到 frag函数中。<br>另，代码中的半Lambert光照模型是为了解决在实际中，普通漫反射在光照不到的情况下是暗黑色的问题。</p>\n<h3 id=\"高光反射光照模型\"><a href=\"#高光反射光照模型\" class=\"headerlink\" title=\"高光反射光照模型\"></a>高光反射光照模型</h3><pre><code class=\"cpp\">// Upgrade NOTE: replaced &#39;_Object2World&#39; with &#39;unity_ObjectToWorld&#39;\n// Upgrade NOTE: replaced &#39;_World2Object&#39; with &#39;unity_WorldToObject&#39;\n\nShader &quot;Custom/6_SpecularVertexLevel&quot; {\n    Properties {\n        _Diffuse (&quot;Diffuse&quot;, Color) = (1.0, 1.0, 1.0, 1.0)\n        _Specular (&quot;Specular&quot;, Color) = (1.0, 1.0, 1.0, 1.0)\n        _Gloss (&quot;Gloss&quot;, Range(8.0, 256)) = 20\n    }\n    SubShader {\n        Pass {\n            Tags { &quot;LightMode&quot;=&quot;ForwardBase&quot; }\n\n            CGPROGRAM\n\n            #pragma vertex vert\n            #pragma fragment frag\n\n            #include &quot;Lighting.cginc&quot;\n\n            fixed4 _Diffuse;\n            fixed4 _Specular;\n            float _Gloss;\n\n            struct a2v {\n                float4 vertex : POSITION;\n                float3 normal : NORMAL;\n            };\n\n            struct v2f {\n                float4 pos : SV_POSITION;\n                fixed color : COLOR;\n            };\n\n            v2f vert(a2v v) {\n                v2f o;\n                o.pos = mul(UNITY_MATRIX_MVP, v.vertex);\n                fixed3 ambient = UNITY_LIGHTMODEL_AMBIENT.xyz;\n\n                fixed3 worldNormal = normalize(mul(v.normal, (float3x3)unity_WorldToObject)); //用unity内置函数是： ＝ UnityObjectToWorldNormal(v.normal)\n                fixed3 worldLightDir = normalize(_WorldSpaceLightPos0.xyz);\n                //漫反射 ＝ 入射光 ＊ 漫反射系数 ＊ max（0，dot（入射方向，法线））\n                fixed3 diffuse = _LightColor0.rgb * _Diffuse * max(0, dot(worldNormal, worldLightDir));\n\n                //reflect 计算反射方向,两个参数是 入射方向、法线，但是要求入射方向是光源指向入射点，故取反\n                fixed3 reflectDir = normalize(reflect(-worldLightDir, worldNormal));\n                //计算视觉方向首先是要求处于同一空间下，然后向量计算\n                fixed3 viewDir = normalize(_WorldSpaceCameraPos.xyz - mul(unity_ObjectToWorld, v.vertex).xyz);\n                //高光反射 ＝ 入射光 ＊ 高光系数 ＊ pow（max（0，反射方向 ＊ 视觉方向），光泽度）\n                fixed3 specular = _LightColor0.rgb * _Specular.rgb * pow(saturate(dot(reflectDir, viewDir)), _Gloss);\n\n                //如果是 BlinnPhong 则把反射方向换成 光线方向和视觉方向和\n                //fixed3 halfDir = normalize(worldLightDir + viewDir);\n                //fixed3 specular = _LightColor0.rgb * _Specular.rgb * pow(max(0,dot(worldNormal,halfDir)), _Gloss);\n\n                o.color = ambient + diffuse + specular;\n                return o;        \n            }\n\n            fixed4 frag(v2f i) : SV_Target {\n                return (i.color, 1.0);\n            }\n\n            ENDCG\n        }\n    }\n    Fallback &quot;Specular&quot;\n}\n</code></pre>\n<p>如果改为逐像素光照需改动 struct v2f</p>\n<pre><code class=\"cpp\">struct v2f {\n    float4 pos : SV_POSITION;\n    fixed worldNormal: TEXCOORD0;\n    fixed worldPos: TEXCOORD1;\n};\n</code></pre>\n<p>然后换上相应的即可。<br>代码中给出了用的最多的BlinnPhong模型，目前用的最多。</p>\n<p>逐顶点光照和逐像素的区别在于计算的相对少和多，得到效果肯定计算多的逐像素更加显得平滑。</p>\n"},{"title":"一键对齐父节点","date":"2017-02-26T16:00:00.000Z","_content":"\n\n前端时间用了一阵FairyGUI，实话实说感觉非常友好！首先他提供了一个编辑器，各种拼接、动画==都做得很棒，而且，还具有跨平台的特点，代码接口做的也很完善，虽然很多坑，但是在群里和谷主联系后几乎都没毛病（此处有表情）。但是，本次新项目还是选择了UGUI，因为说是虽然简单、但是再招人补充人手时还得重头学。。。其实当时我也就看了一上午0.0\n这两天用UGUI做Demo，虽然不求做的好看但是至少得有个对齐什么的吧，但是每次修改对齐时拖拖拖很麻烦，蛋疼没有一键对齐，于是乎，只能自己动手。\n每个UI组件的共同特点是都有一个RectTransform,， 所以，我们的目标是扩展RectTransform的 Inspector 面板，加上相应的对齐按钮就OK了。思路有了，当操作的时候遇到了一个问题，系统自带的油了一个RectTransformEditor ，如果我们要重写的话会覆盖原来的，而且我们也没法继承系统的那个editor。试了好多种方法，最后，在 MoMo的博客里找到了解决方案 ： \n[Unity3D研究院编辑器之不影响原有布局拓展Inspector（二十四）](http://www.xuanyusong.com/archives/3931)\n\n通过反射获取相关信息，实现后我们的效果是：\n![aa](http://img.blog.csdn.net/20170227205559289?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvQ2hlbmc2MjQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center)\n\n在RectTransform的下方添加一个 “AlignParent” ，里面九个表示 相对于 父节点 的对齐。\n具体代码如下：\n\n``` csharp\n\n///\n/// Author:Cheng\n/// Time:2017/2/27\n/// Des:扩展RectTransform，一键对齐\n/// \n\nusing UnityEditor;\nusing UnityEngine;\n\n[CustomEditor(typeof(RectTransform))]\npublic class GUIAlignment : DecoratorEditor\n{\n    /// <summary>\n    /// 继承自类DecoratorEditor，做反射获取RectTransformEditor内属性、方法\n    /// </summary>\n    public GUIAlignment() : base(\"RectTransformEditor\") { }\n    /// <summary>\n    /// 修改Inspector面板\n    /// </summary>\n    public override void OnInspectorGUI ()\n    {\n        base.OnInspectorGUI ();\n\n        EditorGUILayout.BeginHorizontal();//横向\n        EditorGUILayout.LabelField(\"AlignParent\");\n\n        EditorGUILayout.BeginVertical();//开始绘制九宫格\n        EditorGUILayout.Space();\n        EditorGUILayout.BeginHorizontal();//first row\n        if (GUILayout.Button(\"┏\", GUILayout.Width(25)))\n        {\n            RectTransform self = (RectTransform)target; //获得当前操作的transform，target是父中参数\n            if (self.parent != null)\n            {\n                RectTransform parent = (RectTransform)self.parent;          \n                SetPos(self, parent, 1);\n            }\n        }\n        if (GUILayout.Button(\"┳\", GUILayout.Width(25)))\n        {\n            RectTransform self = (RectTransform)target;\n            if (self.parent != null)\n            {\n                RectTransform parent = (RectTransform)self.parent;\n                SetPos(self, parent, 2);\n            }\n        }\n        if (GUILayout.Button(\"┓\", GUILayout.Width(25)))\n        {\n            RectTransform self = (RectTransform)target;\n            if (self.parent != null)\n            {\n                RectTransform parent = (RectTransform)self.parent;\n                SetPos(self, parent, 3);\n            }\n        }\n        EditorGUILayout.EndHorizontal();\n\n        EditorGUILayout.BeginHorizontal();//second row\n        if (GUILayout.Button(\"┣\", GUILayout.Width(25)))\n        {\n            RectTransform self = (RectTransform)target;\n            if (self.parent != null)\n            {\n                RectTransform parent = (RectTransform)self.parent;\n                SetPos(self, parent, 4);\n            }\n        }\n        if (GUILayout.Button(\"╋\", GUILayout.Width(25)))\n        {\n            RectTransform self = (RectTransform)target;\n            if (self.parent != null)\n            {\n                RectTransform parent = (RectTransform)self.parent;\n                SetPos(self, parent, 5);\n            }\n        }\n        if (GUILayout.Button(\"┫\", GUILayout.Width(25)))\n        {\n            RectTransform self = (RectTransform)target;\n            if (self.parent != null)\n            {\n                RectTransform parent = (RectTransform)self.parent;\n                SetPos(self, parent, 6);\n            }\n        }\n        EditorGUILayout.EndHorizontal();\n\n        EditorGUILayout.BeginHorizontal();//third row\n        if (GUILayout.Button(\"┗\", GUILayout.Width(25)))\n        {\n            RectTransform self = (RectTransform)target;\n            if (self.parent != null)\n            {\n                RectTransform parent = (RectTransform)self.parent;\n                SetPos(self, parent, 7);\n            }\n        }\n        if (GUILayout.Button(\"┻\", GUILayout.Width(25)))\n        {\n            RectTransform self = (RectTransform)target;\n            if (self.parent != null)\n            {\n                RectTransform parent = (RectTransform)self.parent;\n                SetPos(self, parent, 8);\n            }\n        }\n        if (GUILayout.Button(\"┛\", GUILayout.Width(25)))\n        {\n            RectTransform self = (RectTransform)target;\n            if (self.parent != null)\n            {\n                RectTransform parent = (RectTransform)self.parent;\n                SetPos(self, parent, 9);\n            }\n        }\n        EditorGUILayout.EndHorizontal();\n\n        EditorGUILayout.EndVertical();\n        EditorGUILayout.EndHorizontal();\n\n        \n    }\n\n    /// <summary>\n    /// 设置位置\n    /// 1 2 3\n    /// 4 5 6\n    /// 7 8 9\n    /// </summary>\n    /// <param name=\"self\">操作的UI</param>\n    /// <param name=\"parent\">父节点</param>\n    /// <param name=\"type\">九宫格位置</param>\n    void SetPos(RectTransform self, RectTransform parent, int type)\n    {\n        //Vector2 max = self.anchorMax;\n        //Vector2 min = self.anchorMin;\n        Vector2 pos = self.anchoredPosition;//坐标点相对锚点位置\n\n        Vector2 p_middle = parent.sizeDelta*0.5f;//父节点的size的一半\n        p_middle.x = p_middle.x * parent.localScale.x; p_middle.y = p_middle.y * parent.localScale.y;//考虑到缩放\n        Vector2 s_middle = self.sizeDelta*0.5f;\n        s_middle.x = s_middle.x * self.localScale.x; s_middle.y = s_middle.y * self.localScale.y;\n\n        self.anchorMax = Vector2.one * 0.5f;//重置锚点位置为居中\n        self.anchorMin = Vector2.one * 0.5f;\n        self.anchoredPosition = Vector2.zero;//重置UI位置为正中\n\n        switch (type)\n        {\n            case 1:\n                pos.x = -(p_middle.x - s_middle.x);//因为unity的坐标采用左下角为坐标元点，故取负值\n                pos.y = (p_middle.y - s_middle.y);\n                break;\n            case 2:\n                pos.x = 0;\n                pos.y = (p_middle.y - s_middle.y);\n                break;\n            case 3:\n                pos.x = (p_middle.x - s_middle.x);\n                pos.y = (p_middle.y - s_middle.y);\n                break;\n            case 4:\n                pos.x = -(p_middle.x - s_middle.x);\n                pos.y = 0;\n                break;\n            case 5:\n                pos.x = 0;\n                pos.y = 0;\n                break;\n            case 6:\n                pos.x = (p_middle.x - s_middle.x);\n                pos.y = 0;\n                break;\n            case 7:\n                pos.x = -(p_middle.x - s_middle.x);\n                pos.y = -(p_middle.y - s_middle.y);\n                break;\n            case 8:\n                pos.x = 0;\n                pos.y = -(p_middle.y - s_middle.y);\n                break;\n            case 9:\n                pos.x = (p_middle.x - s_middle.x);\n                pos.y = -(p_middle.y - s_middle.y);\n                break;\n        }\n        self.anchoredPosition = pos;\n       // self.anchorMax = max;\n       // self.anchorMin = min;\n    }\n\n}\n\n```\n\n除此之外，有一个 缺点,由于锚点是有两个相对坐标，分别为min、max，当UI拉伸时将会起相应的作用，所以，我要对齐时不能改变UI的大小，所以，锚点我会把它设置为中心，然后再改变位置，最后还有一个问题没解决，就是锚点初始设置不是中心时，改变位置后我再设置为原锚点会发现不对应的Bug，所以，改变位置后需要手动重新设置锚点。\nthat's all。\n","source":"_posts/一键对齐父节点.md","raw":"---\ntitle: 一键对齐父节点\ndate: 2017-2-27\ntags:\n- UGUI\n- 对齐\ncategories: UGUI\n---\n\n\n前端时间用了一阵FairyGUI，实话实说感觉非常友好！首先他提供了一个编辑器，各种拼接、动画==都做得很棒，而且，还具有跨平台的特点，代码接口做的也很完善，虽然很多坑，但是在群里和谷主联系后几乎都没毛病（此处有表情）。但是，本次新项目还是选择了UGUI，因为说是虽然简单、但是再招人补充人手时还得重头学。。。其实当时我也就看了一上午0.0\n这两天用UGUI做Demo，虽然不求做的好看但是至少得有个对齐什么的吧，但是每次修改对齐时拖拖拖很麻烦，蛋疼没有一键对齐，于是乎，只能自己动手。\n每个UI组件的共同特点是都有一个RectTransform,， 所以，我们的目标是扩展RectTransform的 Inspector 面板，加上相应的对齐按钮就OK了。思路有了，当操作的时候遇到了一个问题，系统自带的油了一个RectTransformEditor ，如果我们要重写的话会覆盖原来的，而且我们也没法继承系统的那个editor。试了好多种方法，最后，在 MoMo的博客里找到了解决方案 ： \n[Unity3D研究院编辑器之不影响原有布局拓展Inspector（二十四）](http://www.xuanyusong.com/archives/3931)\n\n通过反射获取相关信息，实现后我们的效果是：\n![aa](http://img.blog.csdn.net/20170227205559289?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvQ2hlbmc2MjQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center)\n\n在RectTransform的下方添加一个 “AlignParent” ，里面九个表示 相对于 父节点 的对齐。\n具体代码如下：\n\n``` csharp\n\n///\n/// Author:Cheng\n/// Time:2017/2/27\n/// Des:扩展RectTransform，一键对齐\n/// \n\nusing UnityEditor;\nusing UnityEngine;\n\n[CustomEditor(typeof(RectTransform))]\npublic class GUIAlignment : DecoratorEditor\n{\n    /// <summary>\n    /// 继承自类DecoratorEditor，做反射获取RectTransformEditor内属性、方法\n    /// </summary>\n    public GUIAlignment() : base(\"RectTransformEditor\") { }\n    /// <summary>\n    /// 修改Inspector面板\n    /// </summary>\n    public override void OnInspectorGUI ()\n    {\n        base.OnInspectorGUI ();\n\n        EditorGUILayout.BeginHorizontal();//横向\n        EditorGUILayout.LabelField(\"AlignParent\");\n\n        EditorGUILayout.BeginVertical();//开始绘制九宫格\n        EditorGUILayout.Space();\n        EditorGUILayout.BeginHorizontal();//first row\n        if (GUILayout.Button(\"┏\", GUILayout.Width(25)))\n        {\n            RectTransform self = (RectTransform)target; //获得当前操作的transform，target是父中参数\n            if (self.parent != null)\n            {\n                RectTransform parent = (RectTransform)self.parent;          \n                SetPos(self, parent, 1);\n            }\n        }\n        if (GUILayout.Button(\"┳\", GUILayout.Width(25)))\n        {\n            RectTransform self = (RectTransform)target;\n            if (self.parent != null)\n            {\n                RectTransform parent = (RectTransform)self.parent;\n                SetPos(self, parent, 2);\n            }\n        }\n        if (GUILayout.Button(\"┓\", GUILayout.Width(25)))\n        {\n            RectTransform self = (RectTransform)target;\n            if (self.parent != null)\n            {\n                RectTransform parent = (RectTransform)self.parent;\n                SetPos(self, parent, 3);\n            }\n        }\n        EditorGUILayout.EndHorizontal();\n\n        EditorGUILayout.BeginHorizontal();//second row\n        if (GUILayout.Button(\"┣\", GUILayout.Width(25)))\n        {\n            RectTransform self = (RectTransform)target;\n            if (self.parent != null)\n            {\n                RectTransform parent = (RectTransform)self.parent;\n                SetPos(self, parent, 4);\n            }\n        }\n        if (GUILayout.Button(\"╋\", GUILayout.Width(25)))\n        {\n            RectTransform self = (RectTransform)target;\n            if (self.parent != null)\n            {\n                RectTransform parent = (RectTransform)self.parent;\n                SetPos(self, parent, 5);\n            }\n        }\n        if (GUILayout.Button(\"┫\", GUILayout.Width(25)))\n        {\n            RectTransform self = (RectTransform)target;\n            if (self.parent != null)\n            {\n                RectTransform parent = (RectTransform)self.parent;\n                SetPos(self, parent, 6);\n            }\n        }\n        EditorGUILayout.EndHorizontal();\n\n        EditorGUILayout.BeginHorizontal();//third row\n        if (GUILayout.Button(\"┗\", GUILayout.Width(25)))\n        {\n            RectTransform self = (RectTransform)target;\n            if (self.parent != null)\n            {\n                RectTransform parent = (RectTransform)self.parent;\n                SetPos(self, parent, 7);\n            }\n        }\n        if (GUILayout.Button(\"┻\", GUILayout.Width(25)))\n        {\n            RectTransform self = (RectTransform)target;\n            if (self.parent != null)\n            {\n                RectTransform parent = (RectTransform)self.parent;\n                SetPos(self, parent, 8);\n            }\n        }\n        if (GUILayout.Button(\"┛\", GUILayout.Width(25)))\n        {\n            RectTransform self = (RectTransform)target;\n            if (self.parent != null)\n            {\n                RectTransform parent = (RectTransform)self.parent;\n                SetPos(self, parent, 9);\n            }\n        }\n        EditorGUILayout.EndHorizontal();\n\n        EditorGUILayout.EndVertical();\n        EditorGUILayout.EndHorizontal();\n\n        \n    }\n\n    /// <summary>\n    /// 设置位置\n    /// 1 2 3\n    /// 4 5 6\n    /// 7 8 9\n    /// </summary>\n    /// <param name=\"self\">操作的UI</param>\n    /// <param name=\"parent\">父节点</param>\n    /// <param name=\"type\">九宫格位置</param>\n    void SetPos(RectTransform self, RectTransform parent, int type)\n    {\n        //Vector2 max = self.anchorMax;\n        //Vector2 min = self.anchorMin;\n        Vector2 pos = self.anchoredPosition;//坐标点相对锚点位置\n\n        Vector2 p_middle = parent.sizeDelta*0.5f;//父节点的size的一半\n        p_middle.x = p_middle.x * parent.localScale.x; p_middle.y = p_middle.y * parent.localScale.y;//考虑到缩放\n        Vector2 s_middle = self.sizeDelta*0.5f;\n        s_middle.x = s_middle.x * self.localScale.x; s_middle.y = s_middle.y * self.localScale.y;\n\n        self.anchorMax = Vector2.one * 0.5f;//重置锚点位置为居中\n        self.anchorMin = Vector2.one * 0.5f;\n        self.anchoredPosition = Vector2.zero;//重置UI位置为正中\n\n        switch (type)\n        {\n            case 1:\n                pos.x = -(p_middle.x - s_middle.x);//因为unity的坐标采用左下角为坐标元点，故取负值\n                pos.y = (p_middle.y - s_middle.y);\n                break;\n            case 2:\n                pos.x = 0;\n                pos.y = (p_middle.y - s_middle.y);\n                break;\n            case 3:\n                pos.x = (p_middle.x - s_middle.x);\n                pos.y = (p_middle.y - s_middle.y);\n                break;\n            case 4:\n                pos.x = -(p_middle.x - s_middle.x);\n                pos.y = 0;\n                break;\n            case 5:\n                pos.x = 0;\n                pos.y = 0;\n                break;\n            case 6:\n                pos.x = (p_middle.x - s_middle.x);\n                pos.y = 0;\n                break;\n            case 7:\n                pos.x = -(p_middle.x - s_middle.x);\n                pos.y = -(p_middle.y - s_middle.y);\n                break;\n            case 8:\n                pos.x = 0;\n                pos.y = -(p_middle.y - s_middle.y);\n                break;\n            case 9:\n                pos.x = (p_middle.x - s_middle.x);\n                pos.y = -(p_middle.y - s_middle.y);\n                break;\n        }\n        self.anchoredPosition = pos;\n       // self.anchorMax = max;\n       // self.anchorMin = min;\n    }\n\n}\n\n```\n\n除此之外，有一个 缺点,由于锚点是有两个相对坐标，分别为min、max，当UI拉伸时将会起相应的作用，所以，我要对齐时不能改变UI的大小，所以，锚点我会把它设置为中心，然后再改变位置，最后还有一个问题没解决，就是锚点初始设置不是中心时，改变位置后我再设置为原锚点会发现不对应的Bug，所以，改变位置后需要手动重新设置锚点。\nthat's all。\n","slug":"一键对齐父节点","published":1,"updated":"2017-10-26T11:21:18.224Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj9fm90tr000w2cobnv24cebn","content":"<p>前端时间用了一阵FairyGUI，实话实说感觉非常友好！首先他提供了一个编辑器，各种拼接、动画==都做得很棒，而且，还具有跨平台的特点，代码接口做的也很完善，虽然很多坑，但是在群里和谷主联系后几乎都没毛病（此处有表情）。但是，本次新项目还是选择了UGUI，因为说是虽然简单、但是再招人补充人手时还得重头学。。。其实当时我也就看了一上午0.0<br>这两天用UGUI做Demo，虽然不求做的好看但是至少得有个对齐什么的吧，但是每次修改对齐时拖拖拖很麻烦，蛋疼没有一键对齐，于是乎，只能自己动手。<br>每个UI组件的共同特点是都有一个RectTransform,， 所以，我们的目标是扩展RectTransform的 Inspector 面板，加上相应的对齐按钮就OK了。思路有了，当操作的时候遇到了一个问题，系统自带的油了一个RectTransformEditor ，如果我们要重写的话会覆盖原来的，而且我们也没法继承系统的那个editor。试了好多种方法，最后，在 MoMo的博客里找到了解决方案 ：<br><a href=\"http://www.xuanyusong.com/archives/3931\" target=\"_blank\" rel=\"external\">Unity3D研究院编辑器之不影响原有布局拓展Inspector（二十四）</a></p>\n<p>通过反射获取相关信息，实现后我们的效果是：<br><img src=\"http://img.blog.csdn.net/20170227205559289?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvQ2hlbmc2MjQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\" alt=\"aa\"></p>\n<p>在RectTransform的下方添加一个 “AlignParent” ，里面九个表示 相对于 父节点 的对齐。<br>具体代码如下：</p>\n<pre class=\"line-numbers language-csharp\"><code class=\"language-csharp\">\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token comment\" spellcheck=\"true\">/// Author:Cheng</span>\n<span class=\"token comment\" spellcheck=\"true\">/// Time:2017/2/27</span>\n<span class=\"token comment\" spellcheck=\"true\">/// Des:扩展RectTransform，一键对齐</span>\n<span class=\"token comment\" spellcheck=\"true\">/// </span>\n\n<span class=\"token keyword\">using</span> UnityEditor<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> UnityEngine<span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">[</span><span class=\"token function\">CustomEditor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span>RectTransform<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">GUIAlignment</span> <span class=\"token punctuation\">:</span> DecoratorEditor\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// &lt;summary></span>\n    <span class=\"token comment\" spellcheck=\"true\">/// 继承自类DecoratorEditor，做反射获取RectTransformEditor内属性、方法</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// &lt;/summary></span>\n    <span class=\"token keyword\">public</span> <span class=\"token function\">GUIAlignment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> <span class=\"token keyword\">base</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"RectTransformEditor\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// &lt;summary></span>\n    <span class=\"token comment\" spellcheck=\"true\">/// 修改Inspector面板</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// &lt;/summary></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">override</span> <span class=\"token keyword\">void</span> <span class=\"token function\">OnInspectorGUI</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">base</span><span class=\"token punctuation\">.</span><span class=\"token function\">OnInspectorGUI</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        EditorGUILayout<span class=\"token punctuation\">.</span><span class=\"token function\">BeginHorizontal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//横向</span>\n        EditorGUILayout<span class=\"token punctuation\">.</span><span class=\"token function\">LabelField</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"AlignParent\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        EditorGUILayout<span class=\"token punctuation\">.</span><span class=\"token function\">BeginVertical</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//开始绘制九宫格</span>\n        EditorGUILayout<span class=\"token punctuation\">.</span><span class=\"token function\">Space</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        EditorGUILayout<span class=\"token punctuation\">.</span><span class=\"token function\">BeginHorizontal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//first row</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>GUILayout<span class=\"token punctuation\">.</span><span class=\"token function\">Button</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"┏\"</span><span class=\"token punctuation\">,</span> GUILayout<span class=\"token punctuation\">.</span><span class=\"token function\">Width</span><span class=\"token punctuation\">(</span><span class=\"token number\">25</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            RectTransform self <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>RectTransform<span class=\"token punctuation\">)</span>target<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">//获得当前操作的transform，target是父中参数</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>parent <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                RectTransform parent <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>RectTransform<span class=\"token punctuation\">)</span>self<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">;</span>          \n                <span class=\"token function\">SetPos</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> parent<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>GUILayout<span class=\"token punctuation\">.</span><span class=\"token function\">Button</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"┳\"</span><span class=\"token punctuation\">,</span> GUILayout<span class=\"token punctuation\">.</span><span class=\"token function\">Width</span><span class=\"token punctuation\">(</span><span class=\"token number\">25</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            RectTransform self <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>RectTransform<span class=\"token punctuation\">)</span>target<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>parent <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                RectTransform parent <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>RectTransform<span class=\"token punctuation\">)</span>self<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">;</span>\n                <span class=\"token function\">SetPos</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> parent<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>GUILayout<span class=\"token punctuation\">.</span><span class=\"token function\">Button</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"┓\"</span><span class=\"token punctuation\">,</span> GUILayout<span class=\"token punctuation\">.</span><span class=\"token function\">Width</span><span class=\"token punctuation\">(</span><span class=\"token number\">25</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            RectTransform self <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>RectTransform<span class=\"token punctuation\">)</span>target<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>parent <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                RectTransform parent <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>RectTransform<span class=\"token punctuation\">)</span>self<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">;</span>\n                <span class=\"token function\">SetPos</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> parent<span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        EditorGUILayout<span class=\"token punctuation\">.</span><span class=\"token function\">EndHorizontal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        EditorGUILayout<span class=\"token punctuation\">.</span><span class=\"token function\">BeginHorizontal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//second row</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>GUILayout<span class=\"token punctuation\">.</span><span class=\"token function\">Button</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"┣\"</span><span class=\"token punctuation\">,</span> GUILayout<span class=\"token punctuation\">.</span><span class=\"token function\">Width</span><span class=\"token punctuation\">(</span><span class=\"token number\">25</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            RectTransform self <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>RectTransform<span class=\"token punctuation\">)</span>target<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>parent <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                RectTransform parent <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>RectTransform<span class=\"token punctuation\">)</span>self<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">;</span>\n                <span class=\"token function\">SetPos</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> parent<span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>GUILayout<span class=\"token punctuation\">.</span><span class=\"token function\">Button</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"╋\"</span><span class=\"token punctuation\">,</span> GUILayout<span class=\"token punctuation\">.</span><span class=\"token function\">Width</span><span class=\"token punctuation\">(</span><span class=\"token number\">25</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            RectTransform self <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>RectTransform<span class=\"token punctuation\">)</span>target<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>parent <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                RectTransform parent <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>RectTransform<span class=\"token punctuation\">)</span>self<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">;</span>\n                <span class=\"token function\">SetPos</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> parent<span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>GUILayout<span class=\"token punctuation\">.</span><span class=\"token function\">Button</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"┫\"</span><span class=\"token punctuation\">,</span> GUILayout<span class=\"token punctuation\">.</span><span class=\"token function\">Width</span><span class=\"token punctuation\">(</span><span class=\"token number\">25</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            RectTransform self <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>RectTransform<span class=\"token punctuation\">)</span>target<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>parent <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                RectTransform parent <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>RectTransform<span class=\"token punctuation\">)</span>self<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">;</span>\n                <span class=\"token function\">SetPos</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> parent<span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        EditorGUILayout<span class=\"token punctuation\">.</span><span class=\"token function\">EndHorizontal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        EditorGUILayout<span class=\"token punctuation\">.</span><span class=\"token function\">BeginHorizontal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//third row</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>GUILayout<span class=\"token punctuation\">.</span><span class=\"token function\">Button</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"┗\"</span><span class=\"token punctuation\">,</span> GUILayout<span class=\"token punctuation\">.</span><span class=\"token function\">Width</span><span class=\"token punctuation\">(</span><span class=\"token number\">25</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            RectTransform self <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>RectTransform<span class=\"token punctuation\">)</span>target<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>parent <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                RectTransform parent <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>RectTransform<span class=\"token punctuation\">)</span>self<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">;</span>\n                <span class=\"token function\">SetPos</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> parent<span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>GUILayout<span class=\"token punctuation\">.</span><span class=\"token function\">Button</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"┻\"</span><span class=\"token punctuation\">,</span> GUILayout<span class=\"token punctuation\">.</span><span class=\"token function\">Width</span><span class=\"token punctuation\">(</span><span class=\"token number\">25</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            RectTransform self <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>RectTransform<span class=\"token punctuation\">)</span>target<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>parent <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                RectTransform parent <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>RectTransform<span class=\"token punctuation\">)</span>self<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">;</span>\n                <span class=\"token function\">SetPos</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> parent<span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>GUILayout<span class=\"token punctuation\">.</span><span class=\"token function\">Button</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"┛\"</span><span class=\"token punctuation\">,</span> GUILayout<span class=\"token punctuation\">.</span><span class=\"token function\">Width</span><span class=\"token punctuation\">(</span><span class=\"token number\">25</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            RectTransform self <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>RectTransform<span class=\"token punctuation\">)</span>target<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>parent <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                RectTransform parent <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>RectTransform<span class=\"token punctuation\">)</span>self<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">;</span>\n                <span class=\"token function\">SetPos</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> parent<span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        EditorGUILayout<span class=\"token punctuation\">.</span><span class=\"token function\">EndHorizontal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        EditorGUILayout<span class=\"token punctuation\">.</span><span class=\"token function\">EndVertical</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        EditorGUILayout<span class=\"token punctuation\">.</span><span class=\"token function\">EndHorizontal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">/// &lt;summary></span>\n    <span class=\"token comment\" spellcheck=\"true\">/// 设置位置</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// 1 2 3</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// 4 5 6</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// 7 8 9</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// &lt;/summary></span>\n    <span class=\"token comment\" spellcheck=\"true\">/// &lt;param name=\"self\">操作的UI&lt;/param></span>\n    <span class=\"token comment\" spellcheck=\"true\">/// &lt;param name=\"parent\">父节点&lt;/param></span>\n    <span class=\"token comment\" spellcheck=\"true\">/// &lt;param name=\"type\">九宫格位置&lt;/param></span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">SetPos</span><span class=\"token punctuation\">(</span>RectTransform self<span class=\"token punctuation\">,</span> RectTransform parent<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> type<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\" spellcheck=\"true\">//Vector2 max = self.anchorMax;</span>\n        <span class=\"token comment\" spellcheck=\"true\">//Vector2 min = self.anchorMin;</span>\n        Vector2 pos <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>anchoredPosition<span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//坐标点相对锚点位置</span>\n\n        Vector2 p_middle <span class=\"token operator\">=</span> parent<span class=\"token punctuation\">.</span>sizeDelta<span class=\"token operator\">*</span><span class=\"token number\">0.5f</span><span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//父节点的size的一半</span>\n        p_middle<span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> p_middle<span class=\"token punctuation\">.</span>x <span class=\"token operator\">*</span> parent<span class=\"token punctuation\">.</span>localScale<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">;</span> p_middle<span class=\"token punctuation\">.</span>y <span class=\"token operator\">=</span> p_middle<span class=\"token punctuation\">.</span>y <span class=\"token operator\">*</span> parent<span class=\"token punctuation\">.</span>localScale<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//考虑到缩放</span>\n        Vector2 s_middle <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>sizeDelta<span class=\"token operator\">*</span><span class=\"token number\">0.5f</span><span class=\"token punctuation\">;</span>\n        s_middle<span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> s_middle<span class=\"token punctuation\">.</span>x <span class=\"token operator\">*</span> self<span class=\"token punctuation\">.</span>localScale<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">;</span> s_middle<span class=\"token punctuation\">.</span>y <span class=\"token operator\">=</span> s_middle<span class=\"token punctuation\">.</span>y <span class=\"token operator\">*</span> self<span class=\"token punctuation\">.</span>localScale<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">;</span>\n\n        self<span class=\"token punctuation\">.</span>anchorMax <span class=\"token operator\">=</span> Vector2<span class=\"token punctuation\">.</span>one <span class=\"token operator\">*</span> <span class=\"token number\">0.5f</span><span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//重置锚点位置为居中</span>\n        self<span class=\"token punctuation\">.</span>anchorMin <span class=\"token operator\">=</span> Vector2<span class=\"token punctuation\">.</span>one <span class=\"token operator\">*</span> <span class=\"token number\">0.5f</span><span class=\"token punctuation\">;</span>\n        self<span class=\"token punctuation\">.</span>anchoredPosition <span class=\"token operator\">=</span> Vector2<span class=\"token punctuation\">.</span>zero<span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//重置UI位置为正中</span>\n\n        <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">case</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n                pos<span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token punctuation\">(</span>p_middle<span class=\"token punctuation\">.</span>x <span class=\"token operator\">-</span> s_middle<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//因为unity的坐标采用左下角为坐标元点，故取负值</span>\n                pos<span class=\"token punctuation\">.</span>y <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>p_middle<span class=\"token punctuation\">.</span>y <span class=\"token operator\">-</span> s_middle<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">case</span> <span class=\"token number\">2</span><span class=\"token punctuation\">:</span>\n                pos<span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n                pos<span class=\"token punctuation\">.</span>y <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>p_middle<span class=\"token punctuation\">.</span>y <span class=\"token operator\">-</span> s_middle<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">case</span> <span class=\"token number\">3</span><span class=\"token punctuation\">:</span>\n                pos<span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>p_middle<span class=\"token punctuation\">.</span>x <span class=\"token operator\">-</span> s_middle<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                pos<span class=\"token punctuation\">.</span>y <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>p_middle<span class=\"token punctuation\">.</span>y <span class=\"token operator\">-</span> s_middle<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">case</span> <span class=\"token number\">4</span><span class=\"token punctuation\">:</span>\n                pos<span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token punctuation\">(</span>p_middle<span class=\"token punctuation\">.</span>x <span class=\"token operator\">-</span> s_middle<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                pos<span class=\"token punctuation\">.</span>y <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">case</span> <span class=\"token number\">5</span><span class=\"token punctuation\">:</span>\n                pos<span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n                pos<span class=\"token punctuation\">.</span>y <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">case</span> <span class=\"token number\">6</span><span class=\"token punctuation\">:</span>\n                pos<span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>p_middle<span class=\"token punctuation\">.</span>x <span class=\"token operator\">-</span> s_middle<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                pos<span class=\"token punctuation\">.</span>y <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">case</span> <span class=\"token number\">7</span><span class=\"token punctuation\">:</span>\n                pos<span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token punctuation\">(</span>p_middle<span class=\"token punctuation\">.</span>x <span class=\"token operator\">-</span> s_middle<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                pos<span class=\"token punctuation\">.</span>y <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token punctuation\">(</span>p_middle<span class=\"token punctuation\">.</span>y <span class=\"token operator\">-</span> s_middle<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">case</span> <span class=\"token number\">8</span><span class=\"token punctuation\">:</span>\n                pos<span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n                pos<span class=\"token punctuation\">.</span>y <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token punctuation\">(</span>p_middle<span class=\"token punctuation\">.</span>y <span class=\"token operator\">-</span> s_middle<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">case</span> <span class=\"token number\">9</span><span class=\"token punctuation\">:</span>\n                pos<span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>p_middle<span class=\"token punctuation\">.</span>x <span class=\"token operator\">-</span> s_middle<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                pos<span class=\"token punctuation\">.</span>y <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token punctuation\">(</span>p_middle<span class=\"token punctuation\">.</span>y <span class=\"token operator\">-</span> s_middle<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        self<span class=\"token punctuation\">.</span>anchoredPosition <span class=\"token operator\">=</span> pos<span class=\"token punctuation\">;</span>\n       <span class=\"token comment\" spellcheck=\"true\">// self.anchorMax = max;</span>\n       <span class=\"token comment\" spellcheck=\"true\">// self.anchorMin = min;</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>除此之外，有一个 缺点,由于锚点是有两个相对坐标，分别为min、max，当UI拉伸时将会起相应的作用，所以，我要对齐时不能改变UI的大小，所以，锚点我会把它设置为中心，然后再改变位置，最后还有一个问题没解决，就是锚点初始设置不是中心时，改变位置后我再设置为原锚点会发现不对应的Bug，所以，改变位置后需要手动重新设置锚点。<br>that’s all。</p>\n","site":{"data":{"gallery":{"美女":{"full_link":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1508912200438&di=d5b3eacf86d8f94c149c6fc68fe4da67&imgtype=0&src=http%3A%2F%2Fpic01.taopic.com%2F151014%2F234732-15101410452229-lp.jpg","thumb_link":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1508912200438&di=d5b3eacf86d8f94c149c6fc68fe4da67&imgtype=0&src=http%3A%2F%2Fpic01.taopic.com%2F151014%2F234732-15101410452229-lp.jpg","descr":"美女插画"}},"links":{"Github":{"link":"https://github.com/garsonlab","avatar":"https://avatars3.githubusercontent.com/u/13958934?s=460&v=4","descr":"My Github","type":"Blog"},"OnLineTools":{"link":"http://tool.lu/","avatar":"http://qn11.tool.lu/201710/15/103320SbM84Ql4tETjg49a_28x28.png","descr":"在线工具","type":"Tools"},"CMDMarkdown":{"link":"https://www.zybuluo.com/","avatar":"https://www.zybuluo.com/static/img/logo.png","descr":"Markdown在线编辑","type":"Tools"},"Hexo文档":{"link":"https://hexo.io/zh-cn/docs/","avatar":"https://hexo.io/logo.svg","descr":"Hexo中文官方文档","type":"Community"},"游戏蛮牛":{"link":"http://www.manew.com/forum.php","avatar":"http://www.manew.com/template/manew2016/images/logo.png","descr":"unity交流社区","type":"Unity"},"FairyGUI":{"link":"http://www.fairygui.com/","avatar":"http://www.fairygui.com/images/20170728151207.png","descr":"FairyGUI官方网站","type":"Site"}},"linktypes":{"Blog":{"name":"关注的博客"},"Unity":{"name":"Unity3D"},"Community":{"name":"浏览的社区"},"Tools":{"name":"工具"},"Site":{"name":"收藏的网址"}}}},"excerpt":"","more":"<p>前端时间用了一阵FairyGUI，实话实说感觉非常友好！首先他提供了一个编辑器，各种拼接、动画==都做得很棒，而且，还具有跨平台的特点，代码接口做的也很完善，虽然很多坑，但是在群里和谷主联系后几乎都没毛病（此处有表情）。但是，本次新项目还是选择了UGUI，因为说是虽然简单、但是再招人补充人手时还得重头学。。。其实当时我也就看了一上午0.0<br>这两天用UGUI做Demo，虽然不求做的好看但是至少得有个对齐什么的吧，但是每次修改对齐时拖拖拖很麻烦，蛋疼没有一键对齐，于是乎，只能自己动手。<br>每个UI组件的共同特点是都有一个RectTransform,， 所以，我们的目标是扩展RectTransform的 Inspector 面板，加上相应的对齐按钮就OK了。思路有了，当操作的时候遇到了一个问题，系统自带的油了一个RectTransformEditor ，如果我们要重写的话会覆盖原来的，而且我们也没法继承系统的那个editor。试了好多种方法，最后，在 MoMo的博客里找到了解决方案 ：<br><a href=\"http://www.xuanyusong.com/archives/3931\" target=\"_blank\" rel=\"external\">Unity3D研究院编辑器之不影响原有布局拓展Inspector（二十四）</a></p>\n<p>通过反射获取相关信息，实现后我们的效果是：<br><img src=\"http://img.blog.csdn.net/20170227205559289?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvQ2hlbmc2MjQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\" alt=\"aa\"></p>\n<p>在RectTransform的下方添加一个 “AlignParent” ，里面九个表示 相对于 父节点 的对齐。<br>具体代码如下：</p>\n<pre><code class=\"csharp\">\n///\n/// Author:Cheng\n/// Time:2017/2/27\n/// Des:扩展RectTransform，一键对齐\n/// \n\nusing UnityEditor;\nusing UnityEngine;\n\n[CustomEditor(typeof(RectTransform))]\npublic class GUIAlignment : DecoratorEditor\n{\n    /// &lt;summary&gt;\n    /// 继承自类DecoratorEditor，做反射获取RectTransformEditor内属性、方法\n    /// &lt;/summary&gt;\n    public GUIAlignment() : base(&quot;RectTransformEditor&quot;) { }\n    /// &lt;summary&gt;\n    /// 修改Inspector面板\n    /// &lt;/summary&gt;\n    public override void OnInspectorGUI ()\n    {\n        base.OnInspectorGUI ();\n\n        EditorGUILayout.BeginHorizontal();//横向\n        EditorGUILayout.LabelField(&quot;AlignParent&quot;);\n\n        EditorGUILayout.BeginVertical();//开始绘制九宫格\n        EditorGUILayout.Space();\n        EditorGUILayout.BeginHorizontal();//first row\n        if (GUILayout.Button(&quot;┏&quot;, GUILayout.Width(25)))\n        {\n            RectTransform self = (RectTransform)target; //获得当前操作的transform，target是父中参数\n            if (self.parent != null)\n            {\n                RectTransform parent = (RectTransform)self.parent;          \n                SetPos(self, parent, 1);\n            }\n        }\n        if (GUILayout.Button(&quot;┳&quot;, GUILayout.Width(25)))\n        {\n            RectTransform self = (RectTransform)target;\n            if (self.parent != null)\n            {\n                RectTransform parent = (RectTransform)self.parent;\n                SetPos(self, parent, 2);\n            }\n        }\n        if (GUILayout.Button(&quot;┓&quot;, GUILayout.Width(25)))\n        {\n            RectTransform self = (RectTransform)target;\n            if (self.parent != null)\n            {\n                RectTransform parent = (RectTransform)self.parent;\n                SetPos(self, parent, 3);\n            }\n        }\n        EditorGUILayout.EndHorizontal();\n\n        EditorGUILayout.BeginHorizontal();//second row\n        if (GUILayout.Button(&quot;┣&quot;, GUILayout.Width(25)))\n        {\n            RectTransform self = (RectTransform)target;\n            if (self.parent != null)\n            {\n                RectTransform parent = (RectTransform)self.parent;\n                SetPos(self, parent, 4);\n            }\n        }\n        if (GUILayout.Button(&quot;╋&quot;, GUILayout.Width(25)))\n        {\n            RectTransform self = (RectTransform)target;\n            if (self.parent != null)\n            {\n                RectTransform parent = (RectTransform)self.parent;\n                SetPos(self, parent, 5);\n            }\n        }\n        if (GUILayout.Button(&quot;┫&quot;, GUILayout.Width(25)))\n        {\n            RectTransform self = (RectTransform)target;\n            if (self.parent != null)\n            {\n                RectTransform parent = (RectTransform)self.parent;\n                SetPos(self, parent, 6);\n            }\n        }\n        EditorGUILayout.EndHorizontal();\n\n        EditorGUILayout.BeginHorizontal();//third row\n        if (GUILayout.Button(&quot;┗&quot;, GUILayout.Width(25)))\n        {\n            RectTransform self = (RectTransform)target;\n            if (self.parent != null)\n            {\n                RectTransform parent = (RectTransform)self.parent;\n                SetPos(self, parent, 7);\n            }\n        }\n        if (GUILayout.Button(&quot;┻&quot;, GUILayout.Width(25)))\n        {\n            RectTransform self = (RectTransform)target;\n            if (self.parent != null)\n            {\n                RectTransform parent = (RectTransform)self.parent;\n                SetPos(self, parent, 8);\n            }\n        }\n        if (GUILayout.Button(&quot;┛&quot;, GUILayout.Width(25)))\n        {\n            RectTransform self = (RectTransform)target;\n            if (self.parent != null)\n            {\n                RectTransform parent = (RectTransform)self.parent;\n                SetPos(self, parent, 9);\n            }\n        }\n        EditorGUILayout.EndHorizontal();\n\n        EditorGUILayout.EndVertical();\n        EditorGUILayout.EndHorizontal();\n\n\n    }\n\n    /// &lt;summary&gt;\n    /// 设置位置\n    /// 1 2 3\n    /// 4 5 6\n    /// 7 8 9\n    /// &lt;/summary&gt;\n    /// &lt;param name=&quot;self&quot;&gt;操作的UI&lt;/param&gt;\n    /// &lt;param name=&quot;parent&quot;&gt;父节点&lt;/param&gt;\n    /// &lt;param name=&quot;type&quot;&gt;九宫格位置&lt;/param&gt;\n    void SetPos(RectTransform self, RectTransform parent, int type)\n    {\n        //Vector2 max = self.anchorMax;\n        //Vector2 min = self.anchorMin;\n        Vector2 pos = self.anchoredPosition;//坐标点相对锚点位置\n\n        Vector2 p_middle = parent.sizeDelta*0.5f;//父节点的size的一半\n        p_middle.x = p_middle.x * parent.localScale.x; p_middle.y = p_middle.y * parent.localScale.y;//考虑到缩放\n        Vector2 s_middle = self.sizeDelta*0.5f;\n        s_middle.x = s_middle.x * self.localScale.x; s_middle.y = s_middle.y * self.localScale.y;\n\n        self.anchorMax = Vector2.one * 0.5f;//重置锚点位置为居中\n        self.anchorMin = Vector2.one * 0.5f;\n        self.anchoredPosition = Vector2.zero;//重置UI位置为正中\n\n        switch (type)\n        {\n            case 1:\n                pos.x = -(p_middle.x - s_middle.x);//因为unity的坐标采用左下角为坐标元点，故取负值\n                pos.y = (p_middle.y - s_middle.y);\n                break;\n            case 2:\n                pos.x = 0;\n                pos.y = (p_middle.y - s_middle.y);\n                break;\n            case 3:\n                pos.x = (p_middle.x - s_middle.x);\n                pos.y = (p_middle.y - s_middle.y);\n                break;\n            case 4:\n                pos.x = -(p_middle.x - s_middle.x);\n                pos.y = 0;\n                break;\n            case 5:\n                pos.x = 0;\n                pos.y = 0;\n                break;\n            case 6:\n                pos.x = (p_middle.x - s_middle.x);\n                pos.y = 0;\n                break;\n            case 7:\n                pos.x = -(p_middle.x - s_middle.x);\n                pos.y = -(p_middle.y - s_middle.y);\n                break;\n            case 8:\n                pos.x = 0;\n                pos.y = -(p_middle.y - s_middle.y);\n                break;\n            case 9:\n                pos.x = (p_middle.x - s_middle.x);\n                pos.y = -(p_middle.y - s_middle.y);\n                break;\n        }\n        self.anchoredPosition = pos;\n       // self.anchorMax = max;\n       // self.anchorMin = min;\n    }\n\n}\n</code></pre>\n<p>除此之外，有一个 缺点,由于锚点是有两个相对坐标，分别为min、max，当UI拉伸时将会起相应的作用，所以，我要对齐时不能改变UI的大小，所以，锚点我会把它设置为中心，然后再改变位置，最后还有一个问题没解决，就是锚点初始设置不是中心时，改变位置后我再设置为原锚点会发现不对应的Bug，所以，改变位置后需要手动重新设置锚点。<br>that’s all。</p>\n"},{"title":"关于A*的构想","date":"2017-02-12T16:00:00.000Z","_content":"\n### 原理及伪代码实现\nA Star 算法的具体作用可以忽略不表了，基本上想用的都知道，不知道的基本上不在乎。\n具体伪代码如下： \n``` csharp\nvoid FindPath(Point[,] maps, Point start, Point end)  \n{  \n    openList.Clear();//开启列表，就是一个等待检查方格的列表  \n    closeList.Clear();//闭合列表，不需要再次检查的方格  \n\n    openList.Add(start);//添加起始点至待检查  \n    bool isFound = false;  \n\n    while (openList.Count > 0)  \n    {  \n        //通过F=G+H寻找开启列表中最靠谱节点  \n        var temStart = GetMinCostInOpen();  \n        openList.Remove(temStart);//找到后加入闭合列表  \n        closeList.Add(temStart);  \n\n        //寻找该节点周围节点,除不可访问节点和已访问节点  \n        var neighbors = GetNeighbors(temStart);  \n        foreach (var neighbor in neighbors)  \n        {  \n            if (openList.Contains(neighbor))  \n            {  \n                //如果开启列表中已有该节点，通过比较到起始点距离（因为  \n                    //到结束点距离不会改变）  \n                int c = neighbor.TryGetCostToStart(temStart);  \n                if (c < neighbor.g)  \n                {  \n                    //如果小于原花费，则更新花费，并重设父节点为当前节点  \n                    neighbor.SetParent(temStart);  \n                }  \n            }  \n            else  \n            {  \n                //如果开启列表不包含该节点，则加入并设置父节点  \n                openList.Add(neighbor);  \n                neighbor.SetParent(temStart);  \n            }  \n        }  \n\n        if (openList.Contains(end))  \n        {  \n            //如果开启列表中已包含结束点则证明找到  \n            isFound = true;  \n            break;  \n        }  \n    }  \n\n    //通过isFound判断是否找到，已找到后可以根据结束点父节点倒推路劲  \n} \n```\n\n至于具体的原理及意义可参考：[理解AStar寻路算法具体过程](http://www.cnblogs.com/technology/archive/2011/05/26/2058842.html)\n\n\n### 优化构想\nAstar作为寻路算法应用十分广泛，但是，如果在一个超大的地图上、多人同时寻路中，超长距离的寻路对性能的消耗十分严重，因为它需要遍历格子，还需要维持开启列表找到最小值，So， 关于Astar的优化，个人做了两点考虑，\n1，缩小寻路块\n2，更方便的维持开启列表\n对于第二点，个人的考虑是，在搜索到周围节点加入开启列表时，维持开启列表从小到大的有序性。具体做法是用一种算法控制查找等的消耗时间，比如，用二叉树控制插入的节点，使父节点永远小于子节点，或者直接使用折半查找等，怎么高兴怎么来，最后看疗效决定。\n对于第一点，个人目前的的做法是使用 四叉树 进行场景管理。首先在处理完地图以后，进行四叉树的构建和场景合并：某一层次下叶节点全可通过则标记该节点可通过，反之亦然。在寻路的过程中，首先确定起始点所在的节点，通过节点进行寻路，具体做法同Astar。这样，假如我们就算最底层的长度为2，我们也相当于把地图缩小了四倍。但有一点，我们创建四叉树时，节点的坐标一般选择所表示的区域中心点，所以用来做寻路的也是该区域的中心点。也就是或出现具体执行路径时是这种情况：玩家从当前所在位置——>玩家所在节点的中心点——>正常寻路——>结束点所在节点的中心点——>结束点。开始和结束都要去节点中心点，这个在短距离寻路中，会有绕行的感觉，所以，不适合短距离寻路...T.T\n个人的 实际代码未整理有些凌乱暂时就不贴了，效率自测，应该不会辜负你的期望。","source":"_posts/关于A的构想.md","raw":"---\ntitle: 关于A*的构想\ndate: 2017-2-13\ntags:\n- A*\n- 优化\ncategories: UnityScript\n---\n\n### 原理及伪代码实现\nA Star 算法的具体作用可以忽略不表了，基本上想用的都知道，不知道的基本上不在乎。\n具体伪代码如下： \n``` csharp\nvoid FindPath(Point[,] maps, Point start, Point end)  \n{  \n    openList.Clear();//开启列表，就是一个等待检查方格的列表  \n    closeList.Clear();//闭合列表，不需要再次检查的方格  \n\n    openList.Add(start);//添加起始点至待检查  \n    bool isFound = false;  \n\n    while (openList.Count > 0)  \n    {  \n        //通过F=G+H寻找开启列表中最靠谱节点  \n        var temStart = GetMinCostInOpen();  \n        openList.Remove(temStart);//找到后加入闭合列表  \n        closeList.Add(temStart);  \n\n        //寻找该节点周围节点,除不可访问节点和已访问节点  \n        var neighbors = GetNeighbors(temStart);  \n        foreach (var neighbor in neighbors)  \n        {  \n            if (openList.Contains(neighbor))  \n            {  \n                //如果开启列表中已有该节点，通过比较到起始点距离（因为  \n                    //到结束点距离不会改变）  \n                int c = neighbor.TryGetCostToStart(temStart);  \n                if (c < neighbor.g)  \n                {  \n                    //如果小于原花费，则更新花费，并重设父节点为当前节点  \n                    neighbor.SetParent(temStart);  \n                }  \n            }  \n            else  \n            {  \n                //如果开启列表不包含该节点，则加入并设置父节点  \n                openList.Add(neighbor);  \n                neighbor.SetParent(temStart);  \n            }  \n        }  \n\n        if (openList.Contains(end))  \n        {  \n            //如果开启列表中已包含结束点则证明找到  \n            isFound = true;  \n            break;  \n        }  \n    }  \n\n    //通过isFound判断是否找到，已找到后可以根据结束点父节点倒推路劲  \n} \n```\n\n至于具体的原理及意义可参考：[理解AStar寻路算法具体过程](http://www.cnblogs.com/technology/archive/2011/05/26/2058842.html)\n\n\n### 优化构想\nAstar作为寻路算法应用十分广泛，但是，如果在一个超大的地图上、多人同时寻路中，超长距离的寻路对性能的消耗十分严重，因为它需要遍历格子，还需要维持开启列表找到最小值，So， 关于Astar的优化，个人做了两点考虑，\n1，缩小寻路块\n2，更方便的维持开启列表\n对于第二点，个人的考虑是，在搜索到周围节点加入开启列表时，维持开启列表从小到大的有序性。具体做法是用一种算法控制查找等的消耗时间，比如，用二叉树控制插入的节点，使父节点永远小于子节点，或者直接使用折半查找等，怎么高兴怎么来，最后看疗效决定。\n对于第一点，个人目前的的做法是使用 四叉树 进行场景管理。首先在处理完地图以后，进行四叉树的构建和场景合并：某一层次下叶节点全可通过则标记该节点可通过，反之亦然。在寻路的过程中，首先确定起始点所在的节点，通过节点进行寻路，具体做法同Astar。这样，假如我们就算最底层的长度为2，我们也相当于把地图缩小了四倍。但有一点，我们创建四叉树时，节点的坐标一般选择所表示的区域中心点，所以用来做寻路的也是该区域的中心点。也就是或出现具体执行路径时是这种情况：玩家从当前所在位置——>玩家所在节点的中心点——>正常寻路——>结束点所在节点的中心点——>结束点。开始和结束都要去节点中心点，这个在短距离寻路中，会有绕行的感觉，所以，不适合短距离寻路...T.T\n个人的 实际代码未整理有些凌乱暂时就不贴了，效率自测，应该不会辜负你的期望。","slug":"关于A的构想","published":1,"updated":"2017-10-26T10:02:01.725Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj9fm90tt000x2cobim8qk389","content":"<h3 id=\"原理及伪代码实现\"><a href=\"#原理及伪代码实现\" class=\"headerlink\" title=\"原理及伪代码实现\"></a>原理及伪代码实现</h3><p>A Star 算法的具体作用可以忽略不表了，基本上想用的都知道，不知道的基本上不在乎。<br>具体伪代码如下： </p>\n<pre class=\"line-numbers language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">void</span> <span class=\"token function\">FindPath</span><span class=\"token punctuation\">(</span>Point<span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">]</span> maps<span class=\"token punctuation\">,</span> Point start<span class=\"token punctuation\">,</span> Point end<span class=\"token punctuation\">)</span>  \n<span class=\"token punctuation\">{</span>  \n    openList<span class=\"token punctuation\">.</span><span class=\"token function\">Clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//开启列表，就是一个等待检查方格的列表  </span>\n    closeList<span class=\"token punctuation\">.</span><span class=\"token function\">Clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//闭合列表，不需要再次检查的方格  </span>\n\n    openList<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>start<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//添加起始点至待检查  </span>\n    <span class=\"token keyword\">bool</span> isFound <span class=\"token operator\">=</span> <span class=\"token keyword\">false</span><span class=\"token punctuation\">;</span>  \n\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>openList<span class=\"token punctuation\">.</span>Count <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>  \n    <span class=\"token punctuation\">{</span>  \n        <span class=\"token comment\" spellcheck=\"true\">//通过F=G+H寻找开启列表中最靠谱节点  </span>\n        <span class=\"token keyword\">var</span> temStart <span class=\"token operator\">=</span> <span class=\"token function\">GetMinCostInOpen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n        openList<span class=\"token punctuation\">.</span><span class=\"token function\">Remove</span><span class=\"token punctuation\">(</span>temStart<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//找到后加入闭合列表  </span>\n        closeList<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>temStart<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n\n        <span class=\"token comment\" spellcheck=\"true\">//寻找该节点周围节点,除不可访问节点和已访问节点  </span>\n        <span class=\"token keyword\">var</span> neighbors <span class=\"token operator\">=</span> <span class=\"token function\">GetNeighbors</span><span class=\"token punctuation\">(</span>temStart<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n        <span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> neighbor <span class=\"token keyword\">in</span> neighbors<span class=\"token punctuation\">)</span>  \n        <span class=\"token punctuation\">{</span>  \n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>openList<span class=\"token punctuation\">.</span><span class=\"token function\">Contains</span><span class=\"token punctuation\">(</span>neighbor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  \n            <span class=\"token punctuation\">{</span>  \n                <span class=\"token comment\" spellcheck=\"true\">//如果开启列表中已有该节点，通过比较到起始点距离（因为  </span>\n                    <span class=\"token comment\" spellcheck=\"true\">//到结束点距离不会改变）  </span>\n                <span class=\"token keyword\">int</span> c <span class=\"token operator\">=</span> neighbor<span class=\"token punctuation\">.</span><span class=\"token function\">TryGetCostToStart</span><span class=\"token punctuation\">(</span>temStart<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">&lt;</span> neighbor<span class=\"token punctuation\">.</span>g<span class=\"token punctuation\">)</span>  \n                <span class=\"token punctuation\">{</span>  \n                    <span class=\"token comment\" spellcheck=\"true\">//如果小于原花费，则更新花费，并重设父节点为当前节点  </span>\n                    neighbor<span class=\"token punctuation\">.</span><span class=\"token function\">SetParent</span><span class=\"token punctuation\">(</span>temStart<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n                <span class=\"token punctuation\">}</span>  \n            <span class=\"token punctuation\">}</span>  \n            <span class=\"token keyword\">else</span>  \n            <span class=\"token punctuation\">{</span>  \n                <span class=\"token comment\" spellcheck=\"true\">//如果开启列表不包含该节点，则加入并设置父节点  </span>\n                openList<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>neighbor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n                neighbor<span class=\"token punctuation\">.</span><span class=\"token function\">SetParent</span><span class=\"token punctuation\">(</span>temStart<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n            <span class=\"token punctuation\">}</span>  \n        <span class=\"token punctuation\">}</span>  \n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>openList<span class=\"token punctuation\">.</span><span class=\"token function\">Contains</span><span class=\"token punctuation\">(</span>end<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  \n        <span class=\"token punctuation\">{</span>  \n            <span class=\"token comment\" spellcheck=\"true\">//如果开启列表中已包含结束点则证明找到  </span>\n            isFound <span class=\"token operator\">=</span> <span class=\"token keyword\">true</span><span class=\"token punctuation\">;</span>  \n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>  \n        <span class=\"token punctuation\">}</span>  \n    <span class=\"token punctuation\">}</span>  \n\n    <span class=\"token comment\" spellcheck=\"true\">//通过isFound判断是否找到，已找到后可以根据结束点父节点倒推路劲  </span>\n<span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>至于具体的原理及意义可参考：<a href=\"http://www.cnblogs.com/technology/archive/2011/05/26/2058842.html\" target=\"_blank\" rel=\"external\">理解AStar寻路算法具体过程</a></p>\n<h3 id=\"优化构想\"><a href=\"#优化构想\" class=\"headerlink\" title=\"优化构想\"></a>优化构想</h3><p>Astar作为寻路算法应用十分广泛，但是，如果在一个超大的地图上、多人同时寻路中，超长距离的寻路对性能的消耗十分严重，因为它需要遍历格子，还需要维持开启列表找到最小值，So， 关于Astar的优化，个人做了两点考虑，<br>1，缩小寻路块<br>2，更方便的维持开启列表<br>对于第二点，个人的考虑是，在搜索到周围节点加入开启列表时，维持开启列表从小到大的有序性。具体做法是用一种算法控制查找等的消耗时间，比如，用二叉树控制插入的节点，使父节点永远小于子节点，或者直接使用折半查找等，怎么高兴怎么来，最后看疗效决定。<br>对于第一点，个人目前的的做法是使用 四叉树 进行场景管理。首先在处理完地图以后，进行四叉树的构建和场景合并：某一层次下叶节点全可通过则标记该节点可通过，反之亦然。在寻路的过程中，首先确定起始点所在的节点，通过节点进行寻路，具体做法同Astar。这样，假如我们就算最底层的长度为2，我们也相当于把地图缩小了四倍。但有一点，我们创建四叉树时，节点的坐标一般选择所表示的区域中心点，所以用来做寻路的也是该区域的中心点。也就是或出现具体执行路径时是这种情况：玩家从当前所在位置——&gt;玩家所在节点的中心点——&gt;正常寻路——&gt;结束点所在节点的中心点——&gt;结束点。开始和结束都要去节点中心点，这个在短距离寻路中，会有绕行的感觉，所以，不适合短距离寻路…T.T<br>个人的 实际代码未整理有些凌乱暂时就不贴了，效率自测，应该不会辜负你的期望。</p>\n","site":{"data":{"gallery":{"美女":{"full_link":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1508912200438&di=d5b3eacf86d8f94c149c6fc68fe4da67&imgtype=0&src=http%3A%2F%2Fpic01.taopic.com%2F151014%2F234732-15101410452229-lp.jpg","thumb_link":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1508912200438&di=d5b3eacf86d8f94c149c6fc68fe4da67&imgtype=0&src=http%3A%2F%2Fpic01.taopic.com%2F151014%2F234732-15101410452229-lp.jpg","descr":"美女插画"}},"links":{"Github":{"link":"https://github.com/garsonlab","avatar":"https://avatars3.githubusercontent.com/u/13958934?s=460&v=4","descr":"My Github","type":"Blog"},"OnLineTools":{"link":"http://tool.lu/","avatar":"http://qn11.tool.lu/201710/15/103320SbM84Ql4tETjg49a_28x28.png","descr":"在线工具","type":"Tools"},"CMDMarkdown":{"link":"https://www.zybuluo.com/","avatar":"https://www.zybuluo.com/static/img/logo.png","descr":"Markdown在线编辑","type":"Tools"},"Hexo文档":{"link":"https://hexo.io/zh-cn/docs/","avatar":"https://hexo.io/logo.svg","descr":"Hexo中文官方文档","type":"Community"},"游戏蛮牛":{"link":"http://www.manew.com/forum.php","avatar":"http://www.manew.com/template/manew2016/images/logo.png","descr":"unity交流社区","type":"Unity"},"FairyGUI":{"link":"http://www.fairygui.com/","avatar":"http://www.fairygui.com/images/20170728151207.png","descr":"FairyGUI官方网站","type":"Site"}},"linktypes":{"Blog":{"name":"关注的博客"},"Unity":{"name":"Unity3D"},"Community":{"name":"浏览的社区"},"Tools":{"name":"工具"},"Site":{"name":"收藏的网址"}}}},"excerpt":"","more":"<h3 id=\"原理及伪代码实现\"><a href=\"#原理及伪代码实现\" class=\"headerlink\" title=\"原理及伪代码实现\"></a>原理及伪代码实现</h3><p>A Star 算法的具体作用可以忽略不表了，基本上想用的都知道，不知道的基本上不在乎。<br>具体伪代码如下： </p>\n<pre><code class=\"csharp\">void FindPath(Point[,] maps, Point start, Point end)  \n{  \n    openList.Clear();//开启列表，就是一个等待检查方格的列表  \n    closeList.Clear();//闭合列表，不需要再次检查的方格  \n\n    openList.Add(start);//添加起始点至待检查  \n    bool isFound = false;  \n\n    while (openList.Count &gt; 0)  \n    {  \n        //通过F=G+H寻找开启列表中最靠谱节点  \n        var temStart = GetMinCostInOpen();  \n        openList.Remove(temStart);//找到后加入闭合列表  \n        closeList.Add(temStart);  \n\n        //寻找该节点周围节点,除不可访问节点和已访问节点  \n        var neighbors = GetNeighbors(temStart);  \n        foreach (var neighbor in neighbors)  \n        {  \n            if (openList.Contains(neighbor))  \n            {  \n                //如果开启列表中已有该节点，通过比较到起始点距离（因为  \n                    //到结束点距离不会改变）  \n                int c = neighbor.TryGetCostToStart(temStart);  \n                if (c &lt; neighbor.g)  \n                {  \n                    //如果小于原花费，则更新花费，并重设父节点为当前节点  \n                    neighbor.SetParent(temStart);  \n                }  \n            }  \n            else  \n            {  \n                //如果开启列表不包含该节点，则加入并设置父节点  \n                openList.Add(neighbor);  \n                neighbor.SetParent(temStart);  \n            }  \n        }  \n\n        if (openList.Contains(end))  \n        {  \n            //如果开启列表中已包含结束点则证明找到  \n            isFound = true;  \n            break;  \n        }  \n    }  \n\n    //通过isFound判断是否找到，已找到后可以根据结束点父节点倒推路劲  \n}\n</code></pre>\n<p>至于具体的原理及意义可参考：<a href=\"http://www.cnblogs.com/technology/archive/2011/05/26/2058842.html\" target=\"_blank\" rel=\"external\">理解AStar寻路算法具体过程</a></p>\n<h3 id=\"优化构想\"><a href=\"#优化构想\" class=\"headerlink\" title=\"优化构想\"></a>优化构想</h3><p>Astar作为寻路算法应用十分广泛，但是，如果在一个超大的地图上、多人同时寻路中，超长距离的寻路对性能的消耗十分严重，因为它需要遍历格子，还需要维持开启列表找到最小值，So， 关于Astar的优化，个人做了两点考虑，<br>1，缩小寻路块<br>2，更方便的维持开启列表<br>对于第二点，个人的考虑是，在搜索到周围节点加入开启列表时，维持开启列表从小到大的有序性。具体做法是用一种算法控制查找等的消耗时间，比如，用二叉树控制插入的节点，使父节点永远小于子节点，或者直接使用折半查找等，怎么高兴怎么来，最后看疗效决定。<br>对于第一点，个人目前的的做法是使用 四叉树 进行场景管理。首先在处理完地图以后，进行四叉树的构建和场景合并：某一层次下叶节点全可通过则标记该节点可通过，反之亦然。在寻路的过程中，首先确定起始点所在的节点，通过节点进行寻路，具体做法同Astar。这样，假如我们就算最底层的长度为2，我们也相当于把地图缩小了四倍。但有一点，我们创建四叉树时，节点的坐标一般选择所表示的区域中心点，所以用来做寻路的也是该区域的中心点。也就是或出现具体执行路径时是这种情况：玩家从当前所在位置——&gt;玩家所在节点的中心点——&gt;正常寻路——&gt;结束点所在节点的中心点——&gt;结束点。开始和结束都要去节点中心点，这个在短距离寻路中，会有绕行的感觉，所以，不适合短距离寻路…T.T<br>个人的 实际代码未整理有些凌乱暂时就不贴了，效率自测，应该不会辜负你的期望。</p>\n"},{"title":"屏幕区域点击检测","date":"2017-04-16T16:00:00.000Z","_content":"\n此处直接代码：\n``` csharp\n\nusing System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\n\n\nnamespace Asstes.UI\n{\n    /// <summary>\n    /// Introduction: 屏幕区域点击判断\n    /// Author: \n    /// Time: \n    /// </summary>\n    public class AreaClick\n    {\n        private static AreaClick m_instance;\n\n        public static AreaClick Instance\n        {\n            get\n            {\n                if (m_instance == null)\n                    m_instance = new AreaClick();\n                return m_instance;\n            }\n        }\n\n        private int m_index;\n        private List<AreaRect> m_rects;\n        private List<AreaRect> m_removes;\n        private List<int> m_deletes;\n\n        public AreaClick()\n        {\n            m_index = 0;\n            m_rects = new List<AreaRect>();\n            m_removes = new List<AreaRect>();\n            m_deletes = new List<int>();\n            InputManager.Instance.AddListener(InputType.OnClick, OnClickScreen);\n            InputManager.Instance.AddListener(InputType.OnEndLongPress, OnClickScreen);\n        }\n\n        private void OnClickScreen(Vector2 param)\n        {\n            m_removes.Clear();\n            for (int i = 0; i < m_rects.Count; i++)//移除已删除的点\n            {\n                if(m_deletes.Contains(m_rects[i].id))\n                    m_removes.Add(m_rects[i]);\n            }\n            for (int i = 0; i < m_removes.Count; i++)\n            {\n                m_rects.Remove(m_removes[i]);\n            }\n            m_deletes.Clear();\n            for (int i = 0; i < m_rects.Count; i++)\n            {\n                m_rects[i].OnClick(param);\n            }\n        }\n\n        /// <summary>\n        /// 添加检测\n        /// </summary>\n        /// <param name=\"area\"></param>\n        /// <returns></returns>\n        public int AddCheck(AreaRect area)\n        {\n            area.id = m_index++;\n            m_rects.Add(area);\n            return area.id;\n        }\n\n        /// <summary>\n        /// 移除检测\n        /// </summary>\n        /// <param name=\"id\"></param>\n        public void CancelCheck(int id)\n        {\n            if(!m_deletes.Contains(id))\n                m_deletes.Add(id);\n        }\n\n    }\n\n    public class AreaRect\n    {\n        private Rect m_rect;\n        private bool m_allNotice;\n        private bool m_onlyOnce;\n        private Callback_1<bool> m_callback;\n        internal int id;\n        /// <summary>\n        /// 是否只使用一次\n        /// </summary>\n        public bool UseOnce { get { return m_onlyOnce; } set { m_onlyOnce = value; } }\n\n        /// <summary>\n        /// 普通构造函数\n        /// </summary>\n        /// <param name=\"rect\">在屏幕上的区域</param>\n        /// <param name=\"allNotice\">通知点中和未点中</param>\n        /// <param name=\"callback\">回调</param>\n        public AreaRect(Rect rect, bool allNotice, Callback_1<bool> callback)\n        {\n            m_rect = rect;\n            m_allNotice = allNotice;\n            m_callback = callback;\n        }\n\n        /// <summary>\n        /// 可缩放区域\n        /// </summary>\n        /// <param name=\"rect\">设计时所选区域，如UI设计时的rect</param>\n        /// <param name=\"designSize\">UI设计时屏幕分辨率</param>\n        /// <param name=\"allNotice\">通知点中和未点中</param>\n        /// <param name=\"callback\">回调</param>\n        public AreaRect(Rect rect, Vector2 designSize, bool allNotice, Callback_1<bool> callback)\n        {\n            float sx = Screen.width/designSize.x;\n            float sy = Screen.height/designSize.y;\n\n            Rect newRect = new Rect()\n            {\n                x = rect.x*sx,\n                y = rect.y*sy,\n                width = rect.width*sx,\n                height = rect.height*sy\n            };\n\n            m_rect = newRect;\n            m_allNotice = allNotice;\n            m_callback = callback;\n        }\n\n        /// <summary>\n        /// UI区域\n        /// </summary>\n        /// <param name=\"transform\">RectTransform</param>\n        /// <param name=\"allNotice\">通知点中和未点中</param>\n        /// <param name=\"callback\">回调</param>\n        public AreaRect(Transform transform, bool allNotice, Callback_1<bool> callback)\n        {\n            RectTransform rectTransform = transform as RectTransform;\n\n            /*m_rect = rectTransform.rect; //没有考虑到缩放问题，当缩放后rect的长宽并未改变\n            m_rect.center = rectTransform.position;*/ //没有考虑到中心点影响，center并非world position\n\n            float w = rectTransform.sizeDelta.x * rectTransform.lossyScale.x;//消除缩放影响\n            float h = rectTransform.sizeDelta.y * rectTransform.localScale.y;\n\n            float x = rectTransform.position.x - rectTransform.pivot.x * w; //消除中心点并非pivot非（0.5，0.5）影响\n            float y = rectTransform.position.y - rectTransform.pivot.y * h;\n\n            m_rect.center = new Vector2(x, y);\n            m_rect.width = w;\n            m_rect.height = h;\n\n            m_allNotice = allNotice;\n            m_callback = callback;\n        }\n\n        /// <summary>\n        /// 是否在区域中\n        /// </summary>\n        /// <param name=\"pos\"></param>\n        /// <returns></returns>\n        public bool IsContain(Vector3 pos)\n        {\n            return m_rect.Contains(pos);\n        }\n\n        public void OnClick(Vector2 pos)\n        {\n            if (IsContain(pos))\n            {\n                m_callback(true);\n                if(m_onlyOnce)\n                    AreaClick.Instance.CancelCheck(id);\n            }\n            else if(m_allNotice)\n            {\n                m_callback(false);\n            }\n        }\n\n    }\n}\n```\n\n其中InputManager是我自己实现的一个在多平台上判断点击事件的工具，\n``` csharp\nInputManager.Instance.AddListener(InputType.OnClick, OnClickScreen);  \nInputManager.Instance.AddListener(InputType.OnEndLongPress, OnClickScreen);  \n//可直接用\nInput.GetMouseButtonDown(0) 和  \nInput.GetTouch(0)***************代替判断  \n```\n\n一个很平常的需求、点击空白处关闭界面，以前自己的做法是给它做个全透明的图片托底（当时自己也没有想其他方法），当判断到点击是图片后关闭。但最近时遇到一个不能用这个方法的，因为你不能遮住其他的UI点击事件，故写了个工具，并做了个小扩展，目前只支持矩形区域的硬检测。目前可用到所有的屏幕区域检测和RectTransform检测。\n\n\n由于最近用到在拖动时，如果在某个区域则相应拖动事件，如果超过这个区域则停止移动，于是改了一下代码：\n\n``` csharp\nusing System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\n\n\nnamespace Assets.UI\n{\n    /// <summary>\n    /// Introduction: 屏幕区域点击移动判断\n    /// Author:         Cheng\n    /// Time: \n    /// </summary>\n    public class AreaCheck\n    {\n        private static AreaCheck m_instance;\n        public static AreaCheck Instance\n        {\n            get\n            {\n                if (m_instance == null)\n                    m_instance = new AreaCheck();\n                return m_instance;\n            }\n        }\n        private int m_index;\n        private List<AreaRect> m_rects;\n        private List<AreaRect> m_removes;\n        private List<int> m_deletes;\n\n        public AreaCheck()\n        {\n            m_index = 0;\n            m_rects = new List<AreaRect>();\n            m_removes = new List<AreaRect>();\n            m_deletes = new List<int>();\n            InputManager.Instance.AddListener(InputType.OnTouchBegin, OnTouchBegin);\n            InputManager.Instance.AddListener(InputType.OnMoveBegin, OnMoveBrgin);\n            InputManager.Instance.AddListener(InputType.OnMove, OnMove);\n            InputManager.Instance.AddListener(InputType.OnMoveEnd, OnMoveEnd);\n            InputManager.Instance.AddListener(InputType.OnClick, OnClickScreen);\n            InputManager.Instance.AddListener(InputType.OnEndLongPress, OnClickScreen);\n        }\n        private void OnTouchBegin(Vector2 param)\n        {\n            m_removes.Clear();\n            for (int i = 0; i < m_rects.Count; i++)//移除已删除的点\n            {\n                if (m_deletes.Contains(m_rects[i].id))\n                    m_removes.Add(m_rects[i]);\n            }\n            for (int i = 0; i < m_removes.Count; i++)\n            {\n                m_rects.Remove(m_removes[i]);\n            }\n            m_deletes.Clear();\n        }\n        private void OnClickScreen(Vector2 param)\n        {\n            for (int i = 0; i < m_rects.Count; i++)\n            {\n                m_rects[i].OnClick(param);\n            }\n        }\n        private void OnMoveBrgin(Vector2 param)\n        {\n            for (int i = 0; i < m_rects.Count; i++)\n            {\n                m_rects[i].OnMoveBegin(param);\n            }\n        }\n        private void OnMove(Vector2 param)\n        {\n            for (int i = 0; i < m_rects.Count; i++)\n            {\n                m_rects[i].OnMove(param);\n            }\n        }\n        private void OnMoveEnd(Vector2 param)\n        {\n            for (int i = 0; i < m_rects.Count; i++)\n            {\n                m_rects[i].OnMoveEnd(param);\n            }\n        }\n\n        /**********因lua重载的callback只检测luafunction,改重载为重命名  T_T  ************************/\n        public int AddClickCheckRect(Rect rect, bool noticeAll, Callback_1<bool> callback)\n        {\n            AreaRect area = new AreaRect(rect)\n            {\n                CheckClick = true,\n                ClickAllNotice = noticeAll,\n                ClickCallback = callback\n            };\n            return AddCheck(area);\n        }\n\n        public int AddClickCheckResizeRect(Rect rect, Vector2 designSize, bool noticeAll, Callback_1<bool> callback)\n        {\n            AreaRect area = new AreaRect(rect, designSize)\n            {\n                CheckClick = true,\n                ClickAllNotice = noticeAll,\n                ClickCallback = callback\n            };\n            return AddCheck(area);\n        }\n\n        public int AddClickCheckTransform(Transform transform, bool noticeAll, Callback_1<bool> callback)\n        {\n            AreaRect area = new AreaRect(transform)\n            {\n                CheckClick = true,\n                ClickAllNotice = noticeAll,\n                ClickCallback = callback\n            };\n            return AddCheck(area);\n        }\n\n        public int AddMoveCheckRect(Rect rect, bool outOnEnd, Callback_1<Vector2> begin, Callback_1<Vector2> move, Callback_1<Vector2> end)\n        {\n            AreaRect area = new AreaRect(rect)\n            {\n                CheckMove = true,\n                EndOnOut = outOnEnd,\n                MoveBeginCallback = begin,\n                MoveCallback = move,\n                MoveEndCallback = end\n            };\n            return AddCheck(area);\n        }\n\n        public int AddMoveCheckResizeRect(Rect rect, Vector2 designSize, bool outOnEnd, Callback_1<Vector2> begin, Callback_1<Vector2> move, Callback_1<Vector2> end)\n        {\n            AreaRect area = new AreaRect(rect, designSize)\n            {\n                CheckMove = true,\n                EndOnOut = outOnEnd,\n                MoveBeginCallback = begin,\n                MoveCallback = move,\n                MoveEndCallback = end\n            };\n            return AddCheck(area);\n        }\n\n        public int AddMoveCheckTransform(Transform transform, bool outOnEnd, Callback_1<Vector2> begin, Callback_1<Vector2> move, Callback_1<Vector2> end)\n        {\n            AreaRect area = new AreaRect(transform)\n            {\n                CheckMove = true,\n                EndOnOut = outOnEnd,\n                MoveBeginCallback = begin,\n                MoveCallback = move,\n                MoveEndCallback = end\n            };\n            return AddCheck(area);\n        }\n\n        /// <summary>\n        /// 添加检测\n        /// </summary>\n        /// <param name=\"area\"></param>\n        /// <returns></returns>\n        [LuaInterface.NoToLua]\n        public int AddCheck(AreaRect area)\n        {\n            area.id = m_index++;\n            m_rects.Add(area);\n            return area.id;\n        }\n\n        /// <summary>\n        /// 移除检测\n        /// </summary>\n        /// <param name=\"id\"></param>\n        public void CancelCheck(int id)\n        {\n            if(!m_deletes.Contains(id))\n                m_deletes.Add(id);\n        }\n\n    }\n\n    public class AreaRect\n    {\n        private Rect m_rect;\n        private bool moving;\n        internal int id;\n        /// <summary>\n        /// 鼠标移动时移除即结束\n        /// </summary>\n        public bool EndOnOut{ get; set; }\n        /// <summary>\n        /// 通知点中和未点中\n        /// </summary>\n        public bool ClickAllNotice { get; set; }\n        /// <summary>\n        /// 检测点击\n        /// </summary>\n        public bool CheckClick { get; set; }\n        /// <summary>\n        /// 检测移动\n        /// </summary>\n        public bool CheckMove { get; set; }\n        /// <summary>\n        /// 点击回调\n        /// </summary>\n        public Callback_1<bool> ClickCallback;\n        /// <summary>\n        /// 移动结束回调\n        /// </summary>\n        public Callback_1<Vector2> MoveBeginCallback;\n        /// <summary>\n        /// 移动回调\n        /// </summary>\n        public Callback_1<Vector2> MoveCallback;\n        /// <summary>\n        /// 移动结束回调\n        /// </summary>\n        public Callback_1<Vector2> MoveEndCallback;\n\n        /// <summary>\n        /// 普通构造函数\n        /// </summary>\n        /// <param name=\"rect\">在屏幕上的区域</param>\n        public AreaRect(Rect rect)\n        {\n            m_rect = rect;\n        }\n\n        /// <summary>\n        /// 可缩放区域\n        /// </summary>\n        /// <param name=\"rect\">设计时所选区域，如UI设计时的rect</param>\n        /// <param name=\"designSize\">UI设计时屏幕分辨率</param>\n        public AreaRect(Rect rect, Vector2 designSize)\n        {\n            float sx = Screen.width/designSize.x;\n            float sy = Screen.height/designSize.y;\n\n            Rect newRect = new Rect()\n            {\n                x = rect.x*sx,\n                y = rect.y*sy,\n                width = rect.width*sx,\n                height = rect.height*sy\n            };\n\n            m_rect = newRect;\n        }\n\n        /// <summary>\n        /// UI区域\n        /// </summary>\n        /// <param name=\"transform\">RectTransform</param>\n        public AreaRect(Transform transform)\n        {\n            RectTransform rectTransform = transform as RectTransform;\n\n            /*m_rect = rectTransform.rect; //没有考虑到缩放问题，当缩放后rect的长宽并未改变\n            m_rect.center = rectTransform.position;*/ //没有考虑到中心点影响，center并非world position\n\n            float w = rectTransform.sizeDelta.x * rectTransform.lossyScale.x;//消除缩放影响\n            float h = rectTransform.sizeDelta.y * rectTransform.localScale.y;\n\n            float x = rectTransform.position.x - rectTransform.pivot.x * w; //消除中心点并非pivot非（0.5，0.5）影响\n            float y = rectTransform.position.y - rectTransform.pivot.y * h;\n\n            m_rect.center = new Vector2(x, y);\n            m_rect.width = w;\n            m_rect.height = h;\n        }\n\n        /// <summary>\n        /// 是否在区域中\n        /// </summary>\n        /// <param name=\"pos\"></param>\n        /// <returns></returns>\n        public bool IsContain(Vector3 pos)\n        {\n            return m_rect.Contains(pos);\n        }\n\n        /// <summary>\n        /// 区域点击检测\n        /// </summary>\n        /// <param name=\"pos\"></param>\n        public void OnClick(Vector2 pos)\n        {\n            if(!CheckClick) return;\n            if (IsContain(pos) && ClickCallback != null)\n            {\n                ClickCallback(true);\n            }\n            else if (ClickAllNotice && ClickCallback != null)\n            {\n                ClickCallback(false);\n            }\n        }\n\n        /// <summary>\n        /// 开始移动\n        /// </summary>\n        /// <param name=\"pos\"></param>\n        public void OnMoveBegin(Vector2 pos)\n        {\n            if (!CheckMove) return;\n            if (IsContain(pos))\n            {\n                moving = true;\n                if (MoveBeginCallback != null)\n                    MoveBeginCallback(pos);\n            }\n        }\n\n        /// <summary>\n        /// 区域移动检测\n        /// </summary>\n        /// <param name=\"pos\"></param>\n        public void OnMove(Vector2 pos)\n        {\n            if(!moving || !CheckMove) return;\n\n            if (IsContain(pos))\n            {\n                if (MoveCallback != null)\n                    MoveCallback(pos);\n            }\n            else\n            {\n                if (EndOnOut)\n                {\n                    moving = false;\n                    if (MoveEndCallback != null)\n                        MoveEndCallback(pos);\n                }\n                else\n                {\n                    if (MoveCallback != null)\n                        MoveCallback(pos);\n                }\n            }\n        }\n\n        /// <summary>\n        /// 移动结束\n        /// </summary>\n        /// <param name=\"pos\"></param>\n        public void OnMoveEnd(Vector2 pos)\n        {\n            if (!moving || !CheckMove) return;\n            if (MoveEndCallback != null)\n                MoveEndCallback(pos);\n        }\n\n    }\n}\n```\n\n使用方式现在直接调用AreaCheck的单例即可。","source":"_posts/屏幕区域点击检测.md","raw":"---\ntitle: 屏幕区域点击检测\ndate: 2017-4-17\ntags:\n- 区域检测\n- Unity\ncategories: UnityScript\n---\n\n此处直接代码：\n``` csharp\n\nusing System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\n\n\nnamespace Asstes.UI\n{\n    /// <summary>\n    /// Introduction: 屏幕区域点击判断\n    /// Author: \n    /// Time: \n    /// </summary>\n    public class AreaClick\n    {\n        private static AreaClick m_instance;\n\n        public static AreaClick Instance\n        {\n            get\n            {\n                if (m_instance == null)\n                    m_instance = new AreaClick();\n                return m_instance;\n            }\n        }\n\n        private int m_index;\n        private List<AreaRect> m_rects;\n        private List<AreaRect> m_removes;\n        private List<int> m_deletes;\n\n        public AreaClick()\n        {\n            m_index = 0;\n            m_rects = new List<AreaRect>();\n            m_removes = new List<AreaRect>();\n            m_deletes = new List<int>();\n            InputManager.Instance.AddListener(InputType.OnClick, OnClickScreen);\n            InputManager.Instance.AddListener(InputType.OnEndLongPress, OnClickScreen);\n        }\n\n        private void OnClickScreen(Vector2 param)\n        {\n            m_removes.Clear();\n            for (int i = 0; i < m_rects.Count; i++)//移除已删除的点\n            {\n                if(m_deletes.Contains(m_rects[i].id))\n                    m_removes.Add(m_rects[i]);\n            }\n            for (int i = 0; i < m_removes.Count; i++)\n            {\n                m_rects.Remove(m_removes[i]);\n            }\n            m_deletes.Clear();\n            for (int i = 0; i < m_rects.Count; i++)\n            {\n                m_rects[i].OnClick(param);\n            }\n        }\n\n        /// <summary>\n        /// 添加检测\n        /// </summary>\n        /// <param name=\"area\"></param>\n        /// <returns></returns>\n        public int AddCheck(AreaRect area)\n        {\n            area.id = m_index++;\n            m_rects.Add(area);\n            return area.id;\n        }\n\n        /// <summary>\n        /// 移除检测\n        /// </summary>\n        /// <param name=\"id\"></param>\n        public void CancelCheck(int id)\n        {\n            if(!m_deletes.Contains(id))\n                m_deletes.Add(id);\n        }\n\n    }\n\n    public class AreaRect\n    {\n        private Rect m_rect;\n        private bool m_allNotice;\n        private bool m_onlyOnce;\n        private Callback_1<bool> m_callback;\n        internal int id;\n        /// <summary>\n        /// 是否只使用一次\n        /// </summary>\n        public bool UseOnce { get { return m_onlyOnce; } set { m_onlyOnce = value; } }\n\n        /// <summary>\n        /// 普通构造函数\n        /// </summary>\n        /// <param name=\"rect\">在屏幕上的区域</param>\n        /// <param name=\"allNotice\">通知点中和未点中</param>\n        /// <param name=\"callback\">回调</param>\n        public AreaRect(Rect rect, bool allNotice, Callback_1<bool> callback)\n        {\n            m_rect = rect;\n            m_allNotice = allNotice;\n            m_callback = callback;\n        }\n\n        /// <summary>\n        /// 可缩放区域\n        /// </summary>\n        /// <param name=\"rect\">设计时所选区域，如UI设计时的rect</param>\n        /// <param name=\"designSize\">UI设计时屏幕分辨率</param>\n        /// <param name=\"allNotice\">通知点中和未点中</param>\n        /// <param name=\"callback\">回调</param>\n        public AreaRect(Rect rect, Vector2 designSize, bool allNotice, Callback_1<bool> callback)\n        {\n            float sx = Screen.width/designSize.x;\n            float sy = Screen.height/designSize.y;\n\n            Rect newRect = new Rect()\n            {\n                x = rect.x*sx,\n                y = rect.y*sy,\n                width = rect.width*sx,\n                height = rect.height*sy\n            };\n\n            m_rect = newRect;\n            m_allNotice = allNotice;\n            m_callback = callback;\n        }\n\n        /// <summary>\n        /// UI区域\n        /// </summary>\n        /// <param name=\"transform\">RectTransform</param>\n        /// <param name=\"allNotice\">通知点中和未点中</param>\n        /// <param name=\"callback\">回调</param>\n        public AreaRect(Transform transform, bool allNotice, Callback_1<bool> callback)\n        {\n            RectTransform rectTransform = transform as RectTransform;\n\n            /*m_rect = rectTransform.rect; //没有考虑到缩放问题，当缩放后rect的长宽并未改变\n            m_rect.center = rectTransform.position;*/ //没有考虑到中心点影响，center并非world position\n\n            float w = rectTransform.sizeDelta.x * rectTransform.lossyScale.x;//消除缩放影响\n            float h = rectTransform.sizeDelta.y * rectTransform.localScale.y;\n\n            float x = rectTransform.position.x - rectTransform.pivot.x * w; //消除中心点并非pivot非（0.5，0.5）影响\n            float y = rectTransform.position.y - rectTransform.pivot.y * h;\n\n            m_rect.center = new Vector2(x, y);\n            m_rect.width = w;\n            m_rect.height = h;\n\n            m_allNotice = allNotice;\n            m_callback = callback;\n        }\n\n        /// <summary>\n        /// 是否在区域中\n        /// </summary>\n        /// <param name=\"pos\"></param>\n        /// <returns></returns>\n        public bool IsContain(Vector3 pos)\n        {\n            return m_rect.Contains(pos);\n        }\n\n        public void OnClick(Vector2 pos)\n        {\n            if (IsContain(pos))\n            {\n                m_callback(true);\n                if(m_onlyOnce)\n                    AreaClick.Instance.CancelCheck(id);\n            }\n            else if(m_allNotice)\n            {\n                m_callback(false);\n            }\n        }\n\n    }\n}\n```\n\n其中InputManager是我自己实现的一个在多平台上判断点击事件的工具，\n``` csharp\nInputManager.Instance.AddListener(InputType.OnClick, OnClickScreen);  \nInputManager.Instance.AddListener(InputType.OnEndLongPress, OnClickScreen);  \n//可直接用\nInput.GetMouseButtonDown(0) 和  \nInput.GetTouch(0)***************代替判断  \n```\n\n一个很平常的需求、点击空白处关闭界面，以前自己的做法是给它做个全透明的图片托底（当时自己也没有想其他方法），当判断到点击是图片后关闭。但最近时遇到一个不能用这个方法的，因为你不能遮住其他的UI点击事件，故写了个工具，并做了个小扩展，目前只支持矩形区域的硬检测。目前可用到所有的屏幕区域检测和RectTransform检测。\n\n\n由于最近用到在拖动时，如果在某个区域则相应拖动事件，如果超过这个区域则停止移动，于是改了一下代码：\n\n``` csharp\nusing System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\n\n\nnamespace Assets.UI\n{\n    /// <summary>\n    /// Introduction: 屏幕区域点击移动判断\n    /// Author:         Cheng\n    /// Time: \n    /// </summary>\n    public class AreaCheck\n    {\n        private static AreaCheck m_instance;\n        public static AreaCheck Instance\n        {\n            get\n            {\n                if (m_instance == null)\n                    m_instance = new AreaCheck();\n                return m_instance;\n            }\n        }\n        private int m_index;\n        private List<AreaRect> m_rects;\n        private List<AreaRect> m_removes;\n        private List<int> m_deletes;\n\n        public AreaCheck()\n        {\n            m_index = 0;\n            m_rects = new List<AreaRect>();\n            m_removes = new List<AreaRect>();\n            m_deletes = new List<int>();\n            InputManager.Instance.AddListener(InputType.OnTouchBegin, OnTouchBegin);\n            InputManager.Instance.AddListener(InputType.OnMoveBegin, OnMoveBrgin);\n            InputManager.Instance.AddListener(InputType.OnMove, OnMove);\n            InputManager.Instance.AddListener(InputType.OnMoveEnd, OnMoveEnd);\n            InputManager.Instance.AddListener(InputType.OnClick, OnClickScreen);\n            InputManager.Instance.AddListener(InputType.OnEndLongPress, OnClickScreen);\n        }\n        private void OnTouchBegin(Vector2 param)\n        {\n            m_removes.Clear();\n            for (int i = 0; i < m_rects.Count; i++)//移除已删除的点\n            {\n                if (m_deletes.Contains(m_rects[i].id))\n                    m_removes.Add(m_rects[i]);\n            }\n            for (int i = 0; i < m_removes.Count; i++)\n            {\n                m_rects.Remove(m_removes[i]);\n            }\n            m_deletes.Clear();\n        }\n        private void OnClickScreen(Vector2 param)\n        {\n            for (int i = 0; i < m_rects.Count; i++)\n            {\n                m_rects[i].OnClick(param);\n            }\n        }\n        private void OnMoveBrgin(Vector2 param)\n        {\n            for (int i = 0; i < m_rects.Count; i++)\n            {\n                m_rects[i].OnMoveBegin(param);\n            }\n        }\n        private void OnMove(Vector2 param)\n        {\n            for (int i = 0; i < m_rects.Count; i++)\n            {\n                m_rects[i].OnMove(param);\n            }\n        }\n        private void OnMoveEnd(Vector2 param)\n        {\n            for (int i = 0; i < m_rects.Count; i++)\n            {\n                m_rects[i].OnMoveEnd(param);\n            }\n        }\n\n        /**********因lua重载的callback只检测luafunction,改重载为重命名  T_T  ************************/\n        public int AddClickCheckRect(Rect rect, bool noticeAll, Callback_1<bool> callback)\n        {\n            AreaRect area = new AreaRect(rect)\n            {\n                CheckClick = true,\n                ClickAllNotice = noticeAll,\n                ClickCallback = callback\n            };\n            return AddCheck(area);\n        }\n\n        public int AddClickCheckResizeRect(Rect rect, Vector2 designSize, bool noticeAll, Callback_1<bool> callback)\n        {\n            AreaRect area = new AreaRect(rect, designSize)\n            {\n                CheckClick = true,\n                ClickAllNotice = noticeAll,\n                ClickCallback = callback\n            };\n            return AddCheck(area);\n        }\n\n        public int AddClickCheckTransform(Transform transform, bool noticeAll, Callback_1<bool> callback)\n        {\n            AreaRect area = new AreaRect(transform)\n            {\n                CheckClick = true,\n                ClickAllNotice = noticeAll,\n                ClickCallback = callback\n            };\n            return AddCheck(area);\n        }\n\n        public int AddMoveCheckRect(Rect rect, bool outOnEnd, Callback_1<Vector2> begin, Callback_1<Vector2> move, Callback_1<Vector2> end)\n        {\n            AreaRect area = new AreaRect(rect)\n            {\n                CheckMove = true,\n                EndOnOut = outOnEnd,\n                MoveBeginCallback = begin,\n                MoveCallback = move,\n                MoveEndCallback = end\n            };\n            return AddCheck(area);\n        }\n\n        public int AddMoveCheckResizeRect(Rect rect, Vector2 designSize, bool outOnEnd, Callback_1<Vector2> begin, Callback_1<Vector2> move, Callback_1<Vector2> end)\n        {\n            AreaRect area = new AreaRect(rect, designSize)\n            {\n                CheckMove = true,\n                EndOnOut = outOnEnd,\n                MoveBeginCallback = begin,\n                MoveCallback = move,\n                MoveEndCallback = end\n            };\n            return AddCheck(area);\n        }\n\n        public int AddMoveCheckTransform(Transform transform, bool outOnEnd, Callback_1<Vector2> begin, Callback_1<Vector2> move, Callback_1<Vector2> end)\n        {\n            AreaRect area = new AreaRect(transform)\n            {\n                CheckMove = true,\n                EndOnOut = outOnEnd,\n                MoveBeginCallback = begin,\n                MoveCallback = move,\n                MoveEndCallback = end\n            };\n            return AddCheck(area);\n        }\n\n        /// <summary>\n        /// 添加检测\n        /// </summary>\n        /// <param name=\"area\"></param>\n        /// <returns></returns>\n        [LuaInterface.NoToLua]\n        public int AddCheck(AreaRect area)\n        {\n            area.id = m_index++;\n            m_rects.Add(area);\n            return area.id;\n        }\n\n        /// <summary>\n        /// 移除检测\n        /// </summary>\n        /// <param name=\"id\"></param>\n        public void CancelCheck(int id)\n        {\n            if(!m_deletes.Contains(id))\n                m_deletes.Add(id);\n        }\n\n    }\n\n    public class AreaRect\n    {\n        private Rect m_rect;\n        private bool moving;\n        internal int id;\n        /// <summary>\n        /// 鼠标移动时移除即结束\n        /// </summary>\n        public bool EndOnOut{ get; set; }\n        /// <summary>\n        /// 通知点中和未点中\n        /// </summary>\n        public bool ClickAllNotice { get; set; }\n        /// <summary>\n        /// 检测点击\n        /// </summary>\n        public bool CheckClick { get; set; }\n        /// <summary>\n        /// 检测移动\n        /// </summary>\n        public bool CheckMove { get; set; }\n        /// <summary>\n        /// 点击回调\n        /// </summary>\n        public Callback_1<bool> ClickCallback;\n        /// <summary>\n        /// 移动结束回调\n        /// </summary>\n        public Callback_1<Vector2> MoveBeginCallback;\n        /// <summary>\n        /// 移动回调\n        /// </summary>\n        public Callback_1<Vector2> MoveCallback;\n        /// <summary>\n        /// 移动结束回调\n        /// </summary>\n        public Callback_1<Vector2> MoveEndCallback;\n\n        /// <summary>\n        /// 普通构造函数\n        /// </summary>\n        /// <param name=\"rect\">在屏幕上的区域</param>\n        public AreaRect(Rect rect)\n        {\n            m_rect = rect;\n        }\n\n        /// <summary>\n        /// 可缩放区域\n        /// </summary>\n        /// <param name=\"rect\">设计时所选区域，如UI设计时的rect</param>\n        /// <param name=\"designSize\">UI设计时屏幕分辨率</param>\n        public AreaRect(Rect rect, Vector2 designSize)\n        {\n            float sx = Screen.width/designSize.x;\n            float sy = Screen.height/designSize.y;\n\n            Rect newRect = new Rect()\n            {\n                x = rect.x*sx,\n                y = rect.y*sy,\n                width = rect.width*sx,\n                height = rect.height*sy\n            };\n\n            m_rect = newRect;\n        }\n\n        /// <summary>\n        /// UI区域\n        /// </summary>\n        /// <param name=\"transform\">RectTransform</param>\n        public AreaRect(Transform transform)\n        {\n            RectTransform rectTransform = transform as RectTransform;\n\n            /*m_rect = rectTransform.rect; //没有考虑到缩放问题，当缩放后rect的长宽并未改变\n            m_rect.center = rectTransform.position;*/ //没有考虑到中心点影响，center并非world position\n\n            float w = rectTransform.sizeDelta.x * rectTransform.lossyScale.x;//消除缩放影响\n            float h = rectTransform.sizeDelta.y * rectTransform.localScale.y;\n\n            float x = rectTransform.position.x - rectTransform.pivot.x * w; //消除中心点并非pivot非（0.5，0.5）影响\n            float y = rectTransform.position.y - rectTransform.pivot.y * h;\n\n            m_rect.center = new Vector2(x, y);\n            m_rect.width = w;\n            m_rect.height = h;\n        }\n\n        /// <summary>\n        /// 是否在区域中\n        /// </summary>\n        /// <param name=\"pos\"></param>\n        /// <returns></returns>\n        public bool IsContain(Vector3 pos)\n        {\n            return m_rect.Contains(pos);\n        }\n\n        /// <summary>\n        /// 区域点击检测\n        /// </summary>\n        /// <param name=\"pos\"></param>\n        public void OnClick(Vector2 pos)\n        {\n            if(!CheckClick) return;\n            if (IsContain(pos) && ClickCallback != null)\n            {\n                ClickCallback(true);\n            }\n            else if (ClickAllNotice && ClickCallback != null)\n            {\n                ClickCallback(false);\n            }\n        }\n\n        /// <summary>\n        /// 开始移动\n        /// </summary>\n        /// <param name=\"pos\"></param>\n        public void OnMoveBegin(Vector2 pos)\n        {\n            if (!CheckMove) return;\n            if (IsContain(pos))\n            {\n                moving = true;\n                if (MoveBeginCallback != null)\n                    MoveBeginCallback(pos);\n            }\n        }\n\n        /// <summary>\n        /// 区域移动检测\n        /// </summary>\n        /// <param name=\"pos\"></param>\n        public void OnMove(Vector2 pos)\n        {\n            if(!moving || !CheckMove) return;\n\n            if (IsContain(pos))\n            {\n                if (MoveCallback != null)\n                    MoveCallback(pos);\n            }\n            else\n            {\n                if (EndOnOut)\n                {\n                    moving = false;\n                    if (MoveEndCallback != null)\n                        MoveEndCallback(pos);\n                }\n                else\n                {\n                    if (MoveCallback != null)\n                        MoveCallback(pos);\n                }\n            }\n        }\n\n        /// <summary>\n        /// 移动结束\n        /// </summary>\n        /// <param name=\"pos\"></param>\n        public void OnMoveEnd(Vector2 pos)\n        {\n            if (!moving || !CheckMove) return;\n            if (MoveEndCallback != null)\n                MoveEndCallback(pos);\n        }\n\n    }\n}\n```\n\n使用方式现在直接调用AreaCheck的单例即可。","slug":"屏幕区域点击检测","published":1,"updated":"2017-10-26T10:54:49.795Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj9fm90u300112cobsx668ydr","content":"<p>此处直接代码：</p>\n<pre class=\"line-numbers language-csharp\"><code class=\"language-csharp\">\n<span class=\"token keyword\">using</span> System<span class=\"token punctuation\">.</span>Collections<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> System<span class=\"token punctuation\">.</span>Collections<span class=\"token punctuation\">.</span>Generic<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> UnityEngine<span class=\"token punctuation\">;</span>\n\n\n<span class=\"token keyword\">namespace</span> Asstes<span class=\"token punctuation\">.</span>UI\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// &lt;summary></span>\n    <span class=\"token comment\" spellcheck=\"true\">/// Introduction: 屏幕区域点击判断</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// Author: </span>\n    <span class=\"token comment\" spellcheck=\"true\">/// Time: </span>\n    <span class=\"token comment\" spellcheck=\"true\">/// &lt;/summary></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AreaClick</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> AreaClick m_instance<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> AreaClick Instance\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">get</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>m_instance <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n                    m_instance <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AreaClick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">return</span> m_instance<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> m_index<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">private</span> List<span class=\"token operator\">&lt;</span>AreaRect<span class=\"token operator\">></span> m_rects<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">private</span> List<span class=\"token operator\">&lt;</span>AreaRect<span class=\"token operator\">></span> m_removes<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">private</span> List<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> m_deletes<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">public</span> <span class=\"token function\">AreaClick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            m_index <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            m_rects <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">List</span><span class=\"token operator\">&lt;</span>AreaRect<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            m_removes <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">List</span><span class=\"token operator\">&lt;</span>AreaRect<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            m_deletes <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">List</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            InputManager<span class=\"token punctuation\">.</span>Instance<span class=\"token punctuation\">.</span><span class=\"token function\">AddListener</span><span class=\"token punctuation\">(</span>InputType<span class=\"token punctuation\">.</span>OnClick<span class=\"token punctuation\">,</span> OnClickScreen<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            InputManager<span class=\"token punctuation\">.</span>Instance<span class=\"token punctuation\">.</span><span class=\"token function\">AddListener</span><span class=\"token punctuation\">(</span>InputType<span class=\"token punctuation\">.</span>OnEndLongPress<span class=\"token punctuation\">,</span> OnClickScreen<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">OnClickScreen</span><span class=\"token punctuation\">(</span>Vector2 param<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            m_removes<span class=\"token punctuation\">.</span><span class=\"token function\">Clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> m_rects<span class=\"token punctuation\">.</span>Count<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token comment\" spellcheck=\"true\">//移除已删除的点</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>m_deletes<span class=\"token punctuation\">.</span><span class=\"token function\">Contains</span><span class=\"token punctuation\">(</span>m_rects<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                    m_removes<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>m_rects<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> m_removes<span class=\"token punctuation\">.</span>Count<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                m_rects<span class=\"token punctuation\">.</span><span class=\"token function\">Remove</span><span class=\"token punctuation\">(</span>m_removes<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            m_deletes<span class=\"token punctuation\">.</span><span class=\"token function\">Clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> m_rects<span class=\"token punctuation\">.</span>Count<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                m_rects<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">OnClick</span><span class=\"token punctuation\">(</span>param<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;summary></span>\n        <span class=\"token comment\" spellcheck=\"true\">/// 添加检测</span>\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;/summary></span>\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;param name=\"area\">&lt;/param></span>\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;returns>&lt;/returns></span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">AddCheck</span><span class=\"token punctuation\">(</span>AreaRect area<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            area<span class=\"token punctuation\">.</span>id <span class=\"token operator\">=</span> m_index<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            m_rects<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>area<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> area<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;summary></span>\n        <span class=\"token comment\" spellcheck=\"true\">/// 移除检测</span>\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;/summary></span>\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;param name=\"id\">&lt;/param></span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">CancelCheck</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> id<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>m_deletes<span class=\"token punctuation\">.</span><span class=\"token function\">Contains</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                m_deletes<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AreaRect</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">private</span> Rect m_rect<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">bool</span> m_allNotice<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">bool</span> m_onlyOnce<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">private</span> Callback_1<span class=\"token operator\">&lt;</span><span class=\"token keyword\">bool</span><span class=\"token operator\">></span> m_callback<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">internal</span> <span class=\"token keyword\">int</span> id<span class=\"token punctuation\">;</span>\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;summary></span>\n        <span class=\"token comment\" spellcheck=\"true\">/// 是否只使用一次</span>\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;/summary></span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">bool</span> UseOnce <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> m_onlyOnce<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span> <span class=\"token keyword\">set</span> <span class=\"token punctuation\">{</span> m_onlyOnce <span class=\"token operator\">=</span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;summary></span>\n        <span class=\"token comment\" spellcheck=\"true\">/// 普通构造函数</span>\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;/summary></span>\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;param name=\"rect\">在屏幕上的区域&lt;/param></span>\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;param name=\"allNotice\">通知点中和未点中&lt;/param></span>\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;param name=\"callback\">回调&lt;/param></span>\n        <span class=\"token keyword\">public</span> <span class=\"token function\">AreaRect</span><span class=\"token punctuation\">(</span>Rect rect<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> allNotice<span class=\"token punctuation\">,</span> Callback_1<span class=\"token operator\">&lt;</span><span class=\"token keyword\">bool</span><span class=\"token operator\">></span> callback<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            m_rect <span class=\"token operator\">=</span> rect<span class=\"token punctuation\">;</span>\n            m_allNotice <span class=\"token operator\">=</span> allNotice<span class=\"token punctuation\">;</span>\n            m_callback <span class=\"token operator\">=</span> callback<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;summary></span>\n        <span class=\"token comment\" spellcheck=\"true\">/// 可缩放区域</span>\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;/summary></span>\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;param name=\"rect\">设计时所选区域，如UI设计时的rect&lt;/param></span>\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;param name=\"designSize\">UI设计时屏幕分辨率&lt;/param></span>\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;param name=\"allNotice\">通知点中和未点中&lt;/param></span>\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;param name=\"callback\">回调&lt;/param></span>\n        <span class=\"token keyword\">public</span> <span class=\"token function\">AreaRect</span><span class=\"token punctuation\">(</span>Rect rect<span class=\"token punctuation\">,</span> Vector2 designSize<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> allNotice<span class=\"token punctuation\">,</span> Callback_1<span class=\"token operator\">&lt;</span><span class=\"token keyword\">bool</span><span class=\"token operator\">></span> callback<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">float</span> sx <span class=\"token operator\">=</span> Screen<span class=\"token punctuation\">.</span>width<span class=\"token operator\">/</span>designSize<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">float</span> sy <span class=\"token operator\">=</span> Screen<span class=\"token punctuation\">.</span>height<span class=\"token operator\">/</span>designSize<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">;</span>\n\n            Rect newRect <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Rect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                x <span class=\"token operator\">=</span> rect<span class=\"token punctuation\">.</span>x<span class=\"token operator\">*</span>sx<span class=\"token punctuation\">,</span>\n                y <span class=\"token operator\">=</span> rect<span class=\"token punctuation\">.</span>y<span class=\"token operator\">*</span>sy<span class=\"token punctuation\">,</span>\n                width <span class=\"token operator\">=</span> rect<span class=\"token punctuation\">.</span>width<span class=\"token operator\">*</span>sx<span class=\"token punctuation\">,</span>\n                height <span class=\"token operator\">=</span> rect<span class=\"token punctuation\">.</span>height<span class=\"token operator\">*</span>sy\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n            m_rect <span class=\"token operator\">=</span> newRect<span class=\"token punctuation\">;</span>\n            m_allNotice <span class=\"token operator\">=</span> allNotice<span class=\"token punctuation\">;</span>\n            m_callback <span class=\"token operator\">=</span> callback<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;summary></span>\n        <span class=\"token comment\" spellcheck=\"true\">/// UI区域</span>\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;/summary></span>\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;param name=\"transform\">RectTransform&lt;/param></span>\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;param name=\"allNotice\">通知点中和未点中&lt;/param></span>\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;param name=\"callback\">回调&lt;/param></span>\n        <span class=\"token keyword\">public</span> <span class=\"token function\">AreaRect</span><span class=\"token punctuation\">(</span>Transform transform<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> allNotice<span class=\"token punctuation\">,</span> Callback_1<span class=\"token operator\">&lt;</span><span class=\"token keyword\">bool</span><span class=\"token operator\">></span> callback<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            RectTransform rectTransform <span class=\"token operator\">=</span> transform <span class=\"token keyword\">as</span> RectTransform<span class=\"token punctuation\">;</span>\n\n            <span class=\"token comment\" spellcheck=\"true\">/*m_rect = rectTransform.rect; //没有考虑到缩放问题，当缩放后rect的长宽并未改变\n            m_rect.center = rectTransform.position;*/</span> <span class=\"token comment\" spellcheck=\"true\">//没有考虑到中心点影响，center并非world position</span>\n\n            <span class=\"token keyword\">float</span> w <span class=\"token operator\">=</span> rectTransform<span class=\"token punctuation\">.</span>sizeDelta<span class=\"token punctuation\">.</span>x <span class=\"token operator\">*</span> rectTransform<span class=\"token punctuation\">.</span>lossyScale<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//消除缩放影响</span>\n            <span class=\"token keyword\">float</span> h <span class=\"token operator\">=</span> rectTransform<span class=\"token punctuation\">.</span>sizeDelta<span class=\"token punctuation\">.</span>y <span class=\"token operator\">*</span> rectTransform<span class=\"token punctuation\">.</span>localScale<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">float</span> x <span class=\"token operator\">=</span> rectTransform<span class=\"token punctuation\">.</span>position<span class=\"token punctuation\">.</span>x <span class=\"token operator\">-</span> rectTransform<span class=\"token punctuation\">.</span>pivot<span class=\"token punctuation\">.</span>x <span class=\"token operator\">*</span> w<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">//消除中心点并非pivot非（0.5，0.5）影响</span>\n            <span class=\"token keyword\">float</span> y <span class=\"token operator\">=</span> rectTransform<span class=\"token punctuation\">.</span>position<span class=\"token punctuation\">.</span>y <span class=\"token operator\">-</span> rectTransform<span class=\"token punctuation\">.</span>pivot<span class=\"token punctuation\">.</span>y <span class=\"token operator\">*</span> h<span class=\"token punctuation\">;</span>\n\n            m_rect<span class=\"token punctuation\">.</span>center <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Vector2</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            m_rect<span class=\"token punctuation\">.</span>width <span class=\"token operator\">=</span> w<span class=\"token punctuation\">;</span>\n            m_rect<span class=\"token punctuation\">.</span>height <span class=\"token operator\">=</span> h<span class=\"token punctuation\">;</span>\n\n            m_allNotice <span class=\"token operator\">=</span> allNotice<span class=\"token punctuation\">;</span>\n            m_callback <span class=\"token operator\">=</span> callback<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;summary></span>\n        <span class=\"token comment\" spellcheck=\"true\">/// 是否在区域中</span>\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;/summary></span>\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;param name=\"pos\">&lt;/param></span>\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;returns>&lt;/returns></span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">bool</span> <span class=\"token function\">IsContain</span><span class=\"token punctuation\">(</span>Vector3 pos<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> m_rect<span class=\"token punctuation\">.</span><span class=\"token function\">Contains</span><span class=\"token punctuation\">(</span>pos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">OnClick</span><span class=\"token punctuation\">(</span>Vector2 pos<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">IsContain</span><span class=\"token punctuation\">(</span>pos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token function\">m_callback</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>m_onlyOnce<span class=\"token punctuation\">)</span>\n                    AreaClick<span class=\"token punctuation\">.</span>Instance<span class=\"token punctuation\">.</span><span class=\"token function\">CancelCheck</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>m_allNotice<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token function\">m_callback</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>其中InputManager是我自己实现的一个在多平台上判断点击事件的工具，</p>\n<pre class=\"line-numbers language-csharp\"><code class=\"language-csharp\">InputManager<span class=\"token punctuation\">.</span>Instance<span class=\"token punctuation\">.</span><span class=\"token function\">AddListener</span><span class=\"token punctuation\">(</span>InputType<span class=\"token punctuation\">.</span>OnClick<span class=\"token punctuation\">,</span> OnClickScreen<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \nInputManager<span class=\"token punctuation\">.</span>Instance<span class=\"token punctuation\">.</span><span class=\"token function\">AddListener</span><span class=\"token punctuation\">(</span>InputType<span class=\"token punctuation\">.</span>OnEndLongPress<span class=\"token punctuation\">,</span> OnClickScreen<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n<span class=\"token comment\" spellcheck=\"true\">//可直接用</span>\nInput<span class=\"token punctuation\">.</span><span class=\"token function\">GetMouseButtonDown</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> 和  \nInput<span class=\"token punctuation\">.</span><span class=\"token function\">GetTouch</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span>代替判断\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>一个很平常的需求、点击空白处关闭界面，以前自己的做法是给它做个全透明的图片托底（当时自己也没有想其他方法），当判断到点击是图片后关闭。但最近时遇到一个不能用这个方法的，因为你不能遮住其他的UI点击事件，故写了个工具，并做了个小扩展，目前只支持矩形区域的硬检测。目前可用到所有的屏幕区域检测和RectTransform检测。</p>\n<p>由于最近用到在拖动时，如果在某个区域则相应拖动事件，如果超过这个区域则停止移动，于是改了一下代码：</p>\n<pre class=\"line-numbers language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">using</span> System<span class=\"token punctuation\">.</span>Collections<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> System<span class=\"token punctuation\">.</span>Collections<span class=\"token punctuation\">.</span>Generic<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> UnityEngine<span class=\"token punctuation\">;</span>\n\n\n<span class=\"token keyword\">namespace</span> Assets<span class=\"token punctuation\">.</span>UI\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// &lt;summary></span>\n    <span class=\"token comment\" spellcheck=\"true\">/// Introduction: 屏幕区域点击移动判断</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// Author:         Cheng</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// Time: </span>\n    <span class=\"token comment\" spellcheck=\"true\">/// &lt;/summary></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AreaCheck</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> AreaCheck m_instance<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> AreaCheck Instance\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">get</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>m_instance <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n                    m_instance <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AreaCheck</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">return</span> m_instance<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> m_index<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">private</span> List<span class=\"token operator\">&lt;</span>AreaRect<span class=\"token operator\">></span> m_rects<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">private</span> List<span class=\"token operator\">&lt;</span>AreaRect<span class=\"token operator\">></span> m_removes<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">private</span> List<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> m_deletes<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">public</span> <span class=\"token function\">AreaCheck</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            m_index <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            m_rects <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">List</span><span class=\"token operator\">&lt;</span>AreaRect<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            m_removes <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">List</span><span class=\"token operator\">&lt;</span>AreaRect<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            m_deletes <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">List</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            InputManager<span class=\"token punctuation\">.</span>Instance<span class=\"token punctuation\">.</span><span class=\"token function\">AddListener</span><span class=\"token punctuation\">(</span>InputType<span class=\"token punctuation\">.</span>OnTouchBegin<span class=\"token punctuation\">,</span> OnTouchBegin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            InputManager<span class=\"token punctuation\">.</span>Instance<span class=\"token punctuation\">.</span><span class=\"token function\">AddListener</span><span class=\"token punctuation\">(</span>InputType<span class=\"token punctuation\">.</span>OnMoveBegin<span class=\"token punctuation\">,</span> OnMoveBrgin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            InputManager<span class=\"token punctuation\">.</span>Instance<span class=\"token punctuation\">.</span><span class=\"token function\">AddListener</span><span class=\"token punctuation\">(</span>InputType<span class=\"token punctuation\">.</span>OnMove<span class=\"token punctuation\">,</span> OnMove<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            InputManager<span class=\"token punctuation\">.</span>Instance<span class=\"token punctuation\">.</span><span class=\"token function\">AddListener</span><span class=\"token punctuation\">(</span>InputType<span class=\"token punctuation\">.</span>OnMoveEnd<span class=\"token punctuation\">,</span> OnMoveEnd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            InputManager<span class=\"token punctuation\">.</span>Instance<span class=\"token punctuation\">.</span><span class=\"token function\">AddListener</span><span class=\"token punctuation\">(</span>InputType<span class=\"token punctuation\">.</span>OnClick<span class=\"token punctuation\">,</span> OnClickScreen<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            InputManager<span class=\"token punctuation\">.</span>Instance<span class=\"token punctuation\">.</span><span class=\"token function\">AddListener</span><span class=\"token punctuation\">(</span>InputType<span class=\"token punctuation\">.</span>OnEndLongPress<span class=\"token punctuation\">,</span> OnClickScreen<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">OnTouchBegin</span><span class=\"token punctuation\">(</span>Vector2 param<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            m_removes<span class=\"token punctuation\">.</span><span class=\"token function\">Clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> m_rects<span class=\"token punctuation\">.</span>Count<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token comment\" spellcheck=\"true\">//移除已删除的点</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>m_deletes<span class=\"token punctuation\">.</span><span class=\"token function\">Contains</span><span class=\"token punctuation\">(</span>m_rects<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                    m_removes<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>m_rects<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> m_removes<span class=\"token punctuation\">.</span>Count<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                m_rects<span class=\"token punctuation\">.</span><span class=\"token function\">Remove</span><span class=\"token punctuation\">(</span>m_removes<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            m_deletes<span class=\"token punctuation\">.</span><span class=\"token function\">Clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">OnClickScreen</span><span class=\"token punctuation\">(</span>Vector2 param<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> m_rects<span class=\"token punctuation\">.</span>Count<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                m_rects<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">OnClick</span><span class=\"token punctuation\">(</span>param<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">OnMoveBrgin</span><span class=\"token punctuation\">(</span>Vector2 param<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> m_rects<span class=\"token punctuation\">.</span>Count<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                m_rects<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">OnMoveBegin</span><span class=\"token punctuation\">(</span>param<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">OnMove</span><span class=\"token punctuation\">(</span>Vector2 param<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> m_rects<span class=\"token punctuation\">.</span>Count<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                m_rects<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">OnMove</span><span class=\"token punctuation\">(</span>param<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">OnMoveEnd</span><span class=\"token punctuation\">(</span>Vector2 param<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> m_rects<span class=\"token punctuation\">.</span>Count<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                m_rects<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">OnMoveEnd</span><span class=\"token punctuation\">(</span>param<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\" spellcheck=\"true\">/**********因lua重载的callback只检测luafunction,改重载为重命名  T_T  ************************/</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">AddClickCheckRect</span><span class=\"token punctuation\">(</span>Rect rect<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> noticeAll<span class=\"token punctuation\">,</span> Callback_1<span class=\"token operator\">&lt;</span><span class=\"token keyword\">bool</span><span class=\"token operator\">></span> callback<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            AreaRect area <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AreaRect</span><span class=\"token punctuation\">(</span>rect<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                CheckClick <span class=\"token operator\">=</span> <span class=\"token keyword\">true</span><span class=\"token punctuation\">,</span>\n                ClickAllNotice <span class=\"token operator\">=</span> noticeAll<span class=\"token punctuation\">,</span>\n                ClickCallback <span class=\"token operator\">=</span> callback\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token function\">AddCheck</span><span class=\"token punctuation\">(</span>area<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">AddClickCheckResizeRect</span><span class=\"token punctuation\">(</span>Rect rect<span class=\"token punctuation\">,</span> Vector2 designSize<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> noticeAll<span class=\"token punctuation\">,</span> Callback_1<span class=\"token operator\">&lt;</span><span class=\"token keyword\">bool</span><span class=\"token operator\">></span> callback<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            AreaRect area <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AreaRect</span><span class=\"token punctuation\">(</span>rect<span class=\"token punctuation\">,</span> designSize<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                CheckClick <span class=\"token operator\">=</span> <span class=\"token keyword\">true</span><span class=\"token punctuation\">,</span>\n                ClickAllNotice <span class=\"token operator\">=</span> noticeAll<span class=\"token punctuation\">,</span>\n                ClickCallback <span class=\"token operator\">=</span> callback\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token function\">AddCheck</span><span class=\"token punctuation\">(</span>area<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">AddClickCheckTransform</span><span class=\"token punctuation\">(</span>Transform transform<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> noticeAll<span class=\"token punctuation\">,</span> Callback_1<span class=\"token operator\">&lt;</span><span class=\"token keyword\">bool</span><span class=\"token operator\">></span> callback<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            AreaRect area <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AreaRect</span><span class=\"token punctuation\">(</span>transform<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                CheckClick <span class=\"token operator\">=</span> <span class=\"token keyword\">true</span><span class=\"token punctuation\">,</span>\n                ClickAllNotice <span class=\"token operator\">=</span> noticeAll<span class=\"token punctuation\">,</span>\n                ClickCallback <span class=\"token operator\">=</span> callback\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token function\">AddCheck</span><span class=\"token punctuation\">(</span>area<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">AddMoveCheckRect</span><span class=\"token punctuation\">(</span>Rect rect<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> outOnEnd<span class=\"token punctuation\">,</span> Callback_1<span class=\"token operator\">&lt;</span>Vector2<span class=\"token operator\">></span> begin<span class=\"token punctuation\">,</span> Callback_1<span class=\"token operator\">&lt;</span>Vector2<span class=\"token operator\">></span> move<span class=\"token punctuation\">,</span> Callback_1<span class=\"token operator\">&lt;</span>Vector2<span class=\"token operator\">></span> end<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            AreaRect area <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AreaRect</span><span class=\"token punctuation\">(</span>rect<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                CheckMove <span class=\"token operator\">=</span> <span class=\"token keyword\">true</span><span class=\"token punctuation\">,</span>\n                EndOnOut <span class=\"token operator\">=</span> outOnEnd<span class=\"token punctuation\">,</span>\n                MoveBeginCallback <span class=\"token operator\">=</span> begin<span class=\"token punctuation\">,</span>\n                MoveCallback <span class=\"token operator\">=</span> move<span class=\"token punctuation\">,</span>\n                MoveEndCallback <span class=\"token operator\">=</span> end\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token function\">AddCheck</span><span class=\"token punctuation\">(</span>area<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">AddMoveCheckResizeRect</span><span class=\"token punctuation\">(</span>Rect rect<span class=\"token punctuation\">,</span> Vector2 designSize<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> outOnEnd<span class=\"token punctuation\">,</span> Callback_1<span class=\"token operator\">&lt;</span>Vector2<span class=\"token operator\">></span> begin<span class=\"token punctuation\">,</span> Callback_1<span class=\"token operator\">&lt;</span>Vector2<span class=\"token operator\">></span> move<span class=\"token punctuation\">,</span> Callback_1<span class=\"token operator\">&lt;</span>Vector2<span class=\"token operator\">></span> end<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            AreaRect area <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AreaRect</span><span class=\"token punctuation\">(</span>rect<span class=\"token punctuation\">,</span> designSize<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                CheckMove <span class=\"token operator\">=</span> <span class=\"token keyword\">true</span><span class=\"token punctuation\">,</span>\n                EndOnOut <span class=\"token operator\">=</span> outOnEnd<span class=\"token punctuation\">,</span>\n                MoveBeginCallback <span class=\"token operator\">=</span> begin<span class=\"token punctuation\">,</span>\n                MoveCallback <span class=\"token operator\">=</span> move<span class=\"token punctuation\">,</span>\n                MoveEndCallback <span class=\"token operator\">=</span> end\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token function\">AddCheck</span><span class=\"token punctuation\">(</span>area<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">AddMoveCheckTransform</span><span class=\"token punctuation\">(</span>Transform transform<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> outOnEnd<span class=\"token punctuation\">,</span> Callback_1<span class=\"token operator\">&lt;</span>Vector2<span class=\"token operator\">></span> begin<span class=\"token punctuation\">,</span> Callback_1<span class=\"token operator\">&lt;</span>Vector2<span class=\"token operator\">></span> move<span class=\"token punctuation\">,</span> Callback_1<span class=\"token operator\">&lt;</span>Vector2<span class=\"token operator\">></span> end<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            AreaRect area <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AreaRect</span><span class=\"token punctuation\">(</span>transform<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                CheckMove <span class=\"token operator\">=</span> <span class=\"token keyword\">true</span><span class=\"token punctuation\">,</span>\n                EndOnOut <span class=\"token operator\">=</span> outOnEnd<span class=\"token punctuation\">,</span>\n                MoveBeginCallback <span class=\"token operator\">=</span> begin<span class=\"token punctuation\">,</span>\n                MoveCallback <span class=\"token operator\">=</span> move<span class=\"token punctuation\">,</span>\n                MoveEndCallback <span class=\"token operator\">=</span> end\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token function\">AddCheck</span><span class=\"token punctuation\">(</span>area<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;summary></span>\n        <span class=\"token comment\" spellcheck=\"true\">/// 添加检测</span>\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;/summary></span>\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;param name=\"area\">&lt;/param></span>\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;returns>&lt;/returns></span>\n        <span class=\"token punctuation\">[</span>LuaInterface<span class=\"token punctuation\">.</span>NoToLua<span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">AddCheck</span><span class=\"token punctuation\">(</span>AreaRect area<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            area<span class=\"token punctuation\">.</span>id <span class=\"token operator\">=</span> m_index<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            m_rects<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>area<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> area<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;summary></span>\n        <span class=\"token comment\" spellcheck=\"true\">/// 移除检测</span>\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;/summary></span>\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;param name=\"id\">&lt;/param></span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">CancelCheck</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> id<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>m_deletes<span class=\"token punctuation\">.</span><span class=\"token function\">Contains</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                m_deletes<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AreaRect</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">private</span> Rect m_rect<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">bool</span> moving<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">internal</span> <span class=\"token keyword\">int</span> id<span class=\"token punctuation\">;</span>\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;summary></span>\n        <span class=\"token comment\" spellcheck=\"true\">/// 鼠标移动时移除即结束</span>\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;/summary></span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">bool</span> EndOnOut<span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;summary></span>\n        <span class=\"token comment\" spellcheck=\"true\">/// 通知点中和未点中</span>\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;/summary></span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">bool</span> ClickAllNotice <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;summary></span>\n        <span class=\"token comment\" spellcheck=\"true\">/// 检测点击</span>\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;/summary></span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">bool</span> CheckClick <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;summary></span>\n        <span class=\"token comment\" spellcheck=\"true\">/// 检测移动</span>\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;/summary></span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">bool</span> CheckMove <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;summary></span>\n        <span class=\"token comment\" spellcheck=\"true\">/// 点击回调</span>\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;/summary></span>\n        <span class=\"token keyword\">public</span> Callback_1<span class=\"token operator\">&lt;</span><span class=\"token keyword\">bool</span><span class=\"token operator\">></span> ClickCallback<span class=\"token punctuation\">;</span>\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;summary></span>\n        <span class=\"token comment\" spellcheck=\"true\">/// 移动结束回调</span>\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;/summary></span>\n        <span class=\"token keyword\">public</span> Callback_1<span class=\"token operator\">&lt;</span>Vector2<span class=\"token operator\">></span> MoveBeginCallback<span class=\"token punctuation\">;</span>\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;summary></span>\n        <span class=\"token comment\" spellcheck=\"true\">/// 移动回调</span>\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;/summary></span>\n        <span class=\"token keyword\">public</span> Callback_1<span class=\"token operator\">&lt;</span>Vector2<span class=\"token operator\">></span> MoveCallback<span class=\"token punctuation\">;</span>\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;summary></span>\n        <span class=\"token comment\" spellcheck=\"true\">/// 移动结束回调</span>\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;/summary></span>\n        <span class=\"token keyword\">public</span> Callback_1<span class=\"token operator\">&lt;</span>Vector2<span class=\"token operator\">></span> MoveEndCallback<span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;summary></span>\n        <span class=\"token comment\" spellcheck=\"true\">/// 普通构造函数</span>\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;/summary></span>\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;param name=\"rect\">在屏幕上的区域&lt;/param></span>\n        <span class=\"token keyword\">public</span> <span class=\"token function\">AreaRect</span><span class=\"token punctuation\">(</span>Rect rect<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            m_rect <span class=\"token operator\">=</span> rect<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;summary></span>\n        <span class=\"token comment\" spellcheck=\"true\">/// 可缩放区域</span>\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;/summary></span>\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;param name=\"rect\">设计时所选区域，如UI设计时的rect&lt;/param></span>\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;param name=\"designSize\">UI设计时屏幕分辨率&lt;/param></span>\n        <span class=\"token keyword\">public</span> <span class=\"token function\">AreaRect</span><span class=\"token punctuation\">(</span>Rect rect<span class=\"token punctuation\">,</span> Vector2 designSize<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">float</span> sx <span class=\"token operator\">=</span> Screen<span class=\"token punctuation\">.</span>width<span class=\"token operator\">/</span>designSize<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">float</span> sy <span class=\"token operator\">=</span> Screen<span class=\"token punctuation\">.</span>height<span class=\"token operator\">/</span>designSize<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">;</span>\n\n            Rect newRect <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Rect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                x <span class=\"token operator\">=</span> rect<span class=\"token punctuation\">.</span>x<span class=\"token operator\">*</span>sx<span class=\"token punctuation\">,</span>\n                y <span class=\"token operator\">=</span> rect<span class=\"token punctuation\">.</span>y<span class=\"token operator\">*</span>sy<span class=\"token punctuation\">,</span>\n                width <span class=\"token operator\">=</span> rect<span class=\"token punctuation\">.</span>width<span class=\"token operator\">*</span>sx<span class=\"token punctuation\">,</span>\n                height <span class=\"token operator\">=</span> rect<span class=\"token punctuation\">.</span>height<span class=\"token operator\">*</span>sy\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n            m_rect <span class=\"token operator\">=</span> newRect<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;summary></span>\n        <span class=\"token comment\" spellcheck=\"true\">/// UI区域</span>\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;/summary></span>\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;param name=\"transform\">RectTransform&lt;/param></span>\n        <span class=\"token keyword\">public</span> <span class=\"token function\">AreaRect</span><span class=\"token punctuation\">(</span>Transform transform<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            RectTransform rectTransform <span class=\"token operator\">=</span> transform <span class=\"token keyword\">as</span> RectTransform<span class=\"token punctuation\">;</span>\n\n            <span class=\"token comment\" spellcheck=\"true\">/*m_rect = rectTransform.rect; //没有考虑到缩放问题，当缩放后rect的长宽并未改变\n            m_rect.center = rectTransform.position;*/</span> <span class=\"token comment\" spellcheck=\"true\">//没有考虑到中心点影响，center并非world position</span>\n\n            <span class=\"token keyword\">float</span> w <span class=\"token operator\">=</span> rectTransform<span class=\"token punctuation\">.</span>sizeDelta<span class=\"token punctuation\">.</span>x <span class=\"token operator\">*</span> rectTransform<span class=\"token punctuation\">.</span>lossyScale<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//消除缩放影响</span>\n            <span class=\"token keyword\">float</span> h <span class=\"token operator\">=</span> rectTransform<span class=\"token punctuation\">.</span>sizeDelta<span class=\"token punctuation\">.</span>y <span class=\"token operator\">*</span> rectTransform<span class=\"token punctuation\">.</span>localScale<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">float</span> x <span class=\"token operator\">=</span> rectTransform<span class=\"token punctuation\">.</span>position<span class=\"token punctuation\">.</span>x <span class=\"token operator\">-</span> rectTransform<span class=\"token punctuation\">.</span>pivot<span class=\"token punctuation\">.</span>x <span class=\"token operator\">*</span> w<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">//消除中心点并非pivot非（0.5，0.5）影响</span>\n            <span class=\"token keyword\">float</span> y <span class=\"token operator\">=</span> rectTransform<span class=\"token punctuation\">.</span>position<span class=\"token punctuation\">.</span>y <span class=\"token operator\">-</span> rectTransform<span class=\"token punctuation\">.</span>pivot<span class=\"token punctuation\">.</span>y <span class=\"token operator\">*</span> h<span class=\"token punctuation\">;</span>\n\n            m_rect<span class=\"token punctuation\">.</span>center <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Vector2</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            m_rect<span class=\"token punctuation\">.</span>width <span class=\"token operator\">=</span> w<span class=\"token punctuation\">;</span>\n            m_rect<span class=\"token punctuation\">.</span>height <span class=\"token operator\">=</span> h<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;summary></span>\n        <span class=\"token comment\" spellcheck=\"true\">/// 是否在区域中</span>\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;/summary></span>\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;param name=\"pos\">&lt;/param></span>\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;returns>&lt;/returns></span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">bool</span> <span class=\"token function\">IsContain</span><span class=\"token punctuation\">(</span>Vector3 pos<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> m_rect<span class=\"token punctuation\">.</span><span class=\"token function\">Contains</span><span class=\"token punctuation\">(</span>pos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;summary></span>\n        <span class=\"token comment\" spellcheck=\"true\">/// 区域点击检测</span>\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;/summary></span>\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;param name=\"pos\">&lt;/param></span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">OnClick</span><span class=\"token punctuation\">(</span>Vector2 pos<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>CheckClick<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">IsContain</span><span class=\"token punctuation\">(</span>pos<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> ClickCallback <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token function\">ClickCallback</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ClickAllNotice <span class=\"token operator\">&amp;&amp;</span> ClickCallback <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token function\">ClickCallback</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;summary></span>\n        <span class=\"token comment\" spellcheck=\"true\">/// 开始移动</span>\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;/summary></span>\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;param name=\"pos\">&lt;/param></span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">OnMoveBegin</span><span class=\"token punctuation\">(</span>Vector2 pos<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>CheckMove<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">IsContain</span><span class=\"token punctuation\">(</span>pos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                moving <span class=\"token operator\">=</span> <span class=\"token keyword\">true</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>MoveBeginCallback <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token function\">MoveBeginCallback</span><span class=\"token punctuation\">(</span>pos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;summary></span>\n        <span class=\"token comment\" spellcheck=\"true\">/// 区域移动检测</span>\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;/summary></span>\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;param name=\"pos\">&lt;/param></span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">OnMove</span><span class=\"token punctuation\">(</span>Vector2 pos<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>moving <span class=\"token operator\">||</span> <span class=\"token operator\">!</span>CheckMove<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">IsContain</span><span class=\"token punctuation\">(</span>pos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>MoveCallback <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token function\">MoveCallback</span><span class=\"token punctuation\">(</span>pos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">else</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>EndOnOut<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">{</span>\n                    moving <span class=\"token operator\">=</span> <span class=\"token keyword\">false</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>MoveEndCallback <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n                        <span class=\"token function\">MoveEndCallback</span><span class=\"token punctuation\">(</span>pos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword\">else</span>\n                <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>MoveCallback <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n                        <span class=\"token function\">MoveCallback</span><span class=\"token punctuation\">(</span>pos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;summary></span>\n        <span class=\"token comment\" spellcheck=\"true\">/// 移动结束</span>\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;/summary></span>\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;param name=\"pos\">&lt;/param></span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">OnMoveEnd</span><span class=\"token punctuation\">(</span>Vector2 pos<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>moving <span class=\"token operator\">||</span> <span class=\"token operator\">!</span>CheckMove<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>MoveEndCallback <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n                <span class=\"token function\">MoveEndCallback</span><span class=\"token punctuation\">(</span>pos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>使用方式现在直接调用AreaCheck的单例即可。</p>\n","site":{"data":{"gallery":{"美女":{"full_link":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1508912200438&di=d5b3eacf86d8f94c149c6fc68fe4da67&imgtype=0&src=http%3A%2F%2Fpic01.taopic.com%2F151014%2F234732-15101410452229-lp.jpg","thumb_link":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1508912200438&di=d5b3eacf86d8f94c149c6fc68fe4da67&imgtype=0&src=http%3A%2F%2Fpic01.taopic.com%2F151014%2F234732-15101410452229-lp.jpg","descr":"美女插画"}},"links":{"Github":{"link":"https://github.com/garsonlab","avatar":"https://avatars3.githubusercontent.com/u/13958934?s=460&v=4","descr":"My Github","type":"Blog"},"OnLineTools":{"link":"http://tool.lu/","avatar":"http://qn11.tool.lu/201710/15/103320SbM84Ql4tETjg49a_28x28.png","descr":"在线工具","type":"Tools"},"CMDMarkdown":{"link":"https://www.zybuluo.com/","avatar":"https://www.zybuluo.com/static/img/logo.png","descr":"Markdown在线编辑","type":"Tools"},"Hexo文档":{"link":"https://hexo.io/zh-cn/docs/","avatar":"https://hexo.io/logo.svg","descr":"Hexo中文官方文档","type":"Community"},"游戏蛮牛":{"link":"http://www.manew.com/forum.php","avatar":"http://www.manew.com/template/manew2016/images/logo.png","descr":"unity交流社区","type":"Unity"},"FairyGUI":{"link":"http://www.fairygui.com/","avatar":"http://www.fairygui.com/images/20170728151207.png","descr":"FairyGUI官方网站","type":"Site"}},"linktypes":{"Blog":{"name":"关注的博客"},"Unity":{"name":"Unity3D"},"Community":{"name":"浏览的社区"},"Tools":{"name":"工具"},"Site":{"name":"收藏的网址"}}}},"excerpt":"","more":"<p>此处直接代码：</p>\n<pre><code class=\"csharp\">\nusing System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\n\n\nnamespace Asstes.UI\n{\n    /// &lt;summary&gt;\n    /// Introduction: 屏幕区域点击判断\n    /// Author: \n    /// Time: \n    /// &lt;/summary&gt;\n    public class AreaClick\n    {\n        private static AreaClick m_instance;\n\n        public static AreaClick Instance\n        {\n            get\n            {\n                if (m_instance == null)\n                    m_instance = new AreaClick();\n                return m_instance;\n            }\n        }\n\n        private int m_index;\n        private List&lt;AreaRect&gt; m_rects;\n        private List&lt;AreaRect&gt; m_removes;\n        private List&lt;int&gt; m_deletes;\n\n        public AreaClick()\n        {\n            m_index = 0;\n            m_rects = new List&lt;AreaRect&gt;();\n            m_removes = new List&lt;AreaRect&gt;();\n            m_deletes = new List&lt;int&gt;();\n            InputManager.Instance.AddListener(InputType.OnClick, OnClickScreen);\n            InputManager.Instance.AddListener(InputType.OnEndLongPress, OnClickScreen);\n        }\n\n        private void OnClickScreen(Vector2 param)\n        {\n            m_removes.Clear();\n            for (int i = 0; i &lt; m_rects.Count; i++)//移除已删除的点\n            {\n                if(m_deletes.Contains(m_rects[i].id))\n                    m_removes.Add(m_rects[i]);\n            }\n            for (int i = 0; i &lt; m_removes.Count; i++)\n            {\n                m_rects.Remove(m_removes[i]);\n            }\n            m_deletes.Clear();\n            for (int i = 0; i &lt; m_rects.Count; i++)\n            {\n                m_rects[i].OnClick(param);\n            }\n        }\n\n        /// &lt;summary&gt;\n        /// 添加检测\n        /// &lt;/summary&gt;\n        /// &lt;param name=&quot;area&quot;&gt;&lt;/param&gt;\n        /// &lt;returns&gt;&lt;/returns&gt;\n        public int AddCheck(AreaRect area)\n        {\n            area.id = m_index++;\n            m_rects.Add(area);\n            return area.id;\n        }\n\n        /// &lt;summary&gt;\n        /// 移除检测\n        /// &lt;/summary&gt;\n        /// &lt;param name=&quot;id&quot;&gt;&lt;/param&gt;\n        public void CancelCheck(int id)\n        {\n            if(!m_deletes.Contains(id))\n                m_deletes.Add(id);\n        }\n\n    }\n\n    public class AreaRect\n    {\n        private Rect m_rect;\n        private bool m_allNotice;\n        private bool m_onlyOnce;\n        private Callback_1&lt;bool&gt; m_callback;\n        internal int id;\n        /// &lt;summary&gt;\n        /// 是否只使用一次\n        /// &lt;/summary&gt;\n        public bool UseOnce { get { return m_onlyOnce; } set { m_onlyOnce = value; } }\n\n        /// &lt;summary&gt;\n        /// 普通构造函数\n        /// &lt;/summary&gt;\n        /// &lt;param name=&quot;rect&quot;&gt;在屏幕上的区域&lt;/param&gt;\n        /// &lt;param name=&quot;allNotice&quot;&gt;通知点中和未点中&lt;/param&gt;\n        /// &lt;param name=&quot;callback&quot;&gt;回调&lt;/param&gt;\n        public AreaRect(Rect rect, bool allNotice, Callback_1&lt;bool&gt; callback)\n        {\n            m_rect = rect;\n            m_allNotice = allNotice;\n            m_callback = callback;\n        }\n\n        /// &lt;summary&gt;\n        /// 可缩放区域\n        /// &lt;/summary&gt;\n        /// &lt;param name=&quot;rect&quot;&gt;设计时所选区域，如UI设计时的rect&lt;/param&gt;\n        /// &lt;param name=&quot;designSize&quot;&gt;UI设计时屏幕分辨率&lt;/param&gt;\n        /// &lt;param name=&quot;allNotice&quot;&gt;通知点中和未点中&lt;/param&gt;\n        /// &lt;param name=&quot;callback&quot;&gt;回调&lt;/param&gt;\n        public AreaRect(Rect rect, Vector2 designSize, bool allNotice, Callback_1&lt;bool&gt; callback)\n        {\n            float sx = Screen.width/designSize.x;\n            float sy = Screen.height/designSize.y;\n\n            Rect newRect = new Rect()\n            {\n                x = rect.x*sx,\n                y = rect.y*sy,\n                width = rect.width*sx,\n                height = rect.height*sy\n            };\n\n            m_rect = newRect;\n            m_allNotice = allNotice;\n            m_callback = callback;\n        }\n\n        /// &lt;summary&gt;\n        /// UI区域\n        /// &lt;/summary&gt;\n        /// &lt;param name=&quot;transform&quot;&gt;RectTransform&lt;/param&gt;\n        /// &lt;param name=&quot;allNotice&quot;&gt;通知点中和未点中&lt;/param&gt;\n        /// &lt;param name=&quot;callback&quot;&gt;回调&lt;/param&gt;\n        public AreaRect(Transform transform, bool allNotice, Callback_1&lt;bool&gt; callback)\n        {\n            RectTransform rectTransform = transform as RectTransform;\n\n            /*m_rect = rectTransform.rect; //没有考虑到缩放问题，当缩放后rect的长宽并未改变\n            m_rect.center = rectTransform.position;*/ //没有考虑到中心点影响，center并非world position\n\n            float w = rectTransform.sizeDelta.x * rectTransform.lossyScale.x;//消除缩放影响\n            float h = rectTransform.sizeDelta.y * rectTransform.localScale.y;\n\n            float x = rectTransform.position.x - rectTransform.pivot.x * w; //消除中心点并非pivot非（0.5，0.5）影响\n            float y = rectTransform.position.y - rectTransform.pivot.y * h;\n\n            m_rect.center = new Vector2(x, y);\n            m_rect.width = w;\n            m_rect.height = h;\n\n            m_allNotice = allNotice;\n            m_callback = callback;\n        }\n\n        /// &lt;summary&gt;\n        /// 是否在区域中\n        /// &lt;/summary&gt;\n        /// &lt;param name=&quot;pos&quot;&gt;&lt;/param&gt;\n        /// &lt;returns&gt;&lt;/returns&gt;\n        public bool IsContain(Vector3 pos)\n        {\n            return m_rect.Contains(pos);\n        }\n\n        public void OnClick(Vector2 pos)\n        {\n            if (IsContain(pos))\n            {\n                m_callback(true);\n                if(m_onlyOnce)\n                    AreaClick.Instance.CancelCheck(id);\n            }\n            else if(m_allNotice)\n            {\n                m_callback(false);\n            }\n        }\n\n    }\n}\n</code></pre>\n<p>其中InputManager是我自己实现的一个在多平台上判断点击事件的工具，</p>\n<pre><code class=\"csharp\">InputManager.Instance.AddListener(InputType.OnClick, OnClickScreen);  \nInputManager.Instance.AddListener(InputType.OnEndLongPress, OnClickScreen);  \n//可直接用\nInput.GetMouseButtonDown(0) 和  \nInput.GetTouch(0)***************代替判断\n</code></pre>\n<p>一个很平常的需求、点击空白处关闭界面，以前自己的做法是给它做个全透明的图片托底（当时自己也没有想其他方法），当判断到点击是图片后关闭。但最近时遇到一个不能用这个方法的，因为你不能遮住其他的UI点击事件，故写了个工具，并做了个小扩展，目前只支持矩形区域的硬检测。目前可用到所有的屏幕区域检测和RectTransform检测。</p>\n<p>由于最近用到在拖动时，如果在某个区域则相应拖动事件，如果超过这个区域则停止移动，于是改了一下代码：</p>\n<pre><code class=\"csharp\">using System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\n\n\nnamespace Assets.UI\n{\n    /// &lt;summary&gt;\n    /// Introduction: 屏幕区域点击移动判断\n    /// Author:         Cheng\n    /// Time: \n    /// &lt;/summary&gt;\n    public class AreaCheck\n    {\n        private static AreaCheck m_instance;\n        public static AreaCheck Instance\n        {\n            get\n            {\n                if (m_instance == null)\n                    m_instance = new AreaCheck();\n                return m_instance;\n            }\n        }\n        private int m_index;\n        private List&lt;AreaRect&gt; m_rects;\n        private List&lt;AreaRect&gt; m_removes;\n        private List&lt;int&gt; m_deletes;\n\n        public AreaCheck()\n        {\n            m_index = 0;\n            m_rects = new List&lt;AreaRect&gt;();\n            m_removes = new List&lt;AreaRect&gt;();\n            m_deletes = new List&lt;int&gt;();\n            InputManager.Instance.AddListener(InputType.OnTouchBegin, OnTouchBegin);\n            InputManager.Instance.AddListener(InputType.OnMoveBegin, OnMoveBrgin);\n            InputManager.Instance.AddListener(InputType.OnMove, OnMove);\n            InputManager.Instance.AddListener(InputType.OnMoveEnd, OnMoveEnd);\n            InputManager.Instance.AddListener(InputType.OnClick, OnClickScreen);\n            InputManager.Instance.AddListener(InputType.OnEndLongPress, OnClickScreen);\n        }\n        private void OnTouchBegin(Vector2 param)\n        {\n            m_removes.Clear();\n            for (int i = 0; i &lt; m_rects.Count; i++)//移除已删除的点\n            {\n                if (m_deletes.Contains(m_rects[i].id))\n                    m_removes.Add(m_rects[i]);\n            }\n            for (int i = 0; i &lt; m_removes.Count; i++)\n            {\n                m_rects.Remove(m_removes[i]);\n            }\n            m_deletes.Clear();\n        }\n        private void OnClickScreen(Vector2 param)\n        {\n            for (int i = 0; i &lt; m_rects.Count; i++)\n            {\n                m_rects[i].OnClick(param);\n            }\n        }\n        private void OnMoveBrgin(Vector2 param)\n        {\n            for (int i = 0; i &lt; m_rects.Count; i++)\n            {\n                m_rects[i].OnMoveBegin(param);\n            }\n        }\n        private void OnMove(Vector2 param)\n        {\n            for (int i = 0; i &lt; m_rects.Count; i++)\n            {\n                m_rects[i].OnMove(param);\n            }\n        }\n        private void OnMoveEnd(Vector2 param)\n        {\n            for (int i = 0; i &lt; m_rects.Count; i++)\n            {\n                m_rects[i].OnMoveEnd(param);\n            }\n        }\n\n        /**********因lua重载的callback只检测luafunction,改重载为重命名  T_T  ************************/\n        public int AddClickCheckRect(Rect rect, bool noticeAll, Callback_1&lt;bool&gt; callback)\n        {\n            AreaRect area = new AreaRect(rect)\n            {\n                CheckClick = true,\n                ClickAllNotice = noticeAll,\n                ClickCallback = callback\n            };\n            return AddCheck(area);\n        }\n\n        public int AddClickCheckResizeRect(Rect rect, Vector2 designSize, bool noticeAll, Callback_1&lt;bool&gt; callback)\n        {\n            AreaRect area = new AreaRect(rect, designSize)\n            {\n                CheckClick = true,\n                ClickAllNotice = noticeAll,\n                ClickCallback = callback\n            };\n            return AddCheck(area);\n        }\n\n        public int AddClickCheckTransform(Transform transform, bool noticeAll, Callback_1&lt;bool&gt; callback)\n        {\n            AreaRect area = new AreaRect(transform)\n            {\n                CheckClick = true,\n                ClickAllNotice = noticeAll,\n                ClickCallback = callback\n            };\n            return AddCheck(area);\n        }\n\n        public int AddMoveCheckRect(Rect rect, bool outOnEnd, Callback_1&lt;Vector2&gt; begin, Callback_1&lt;Vector2&gt; move, Callback_1&lt;Vector2&gt; end)\n        {\n            AreaRect area = new AreaRect(rect)\n            {\n                CheckMove = true,\n                EndOnOut = outOnEnd,\n                MoveBeginCallback = begin,\n                MoveCallback = move,\n                MoveEndCallback = end\n            };\n            return AddCheck(area);\n        }\n\n        public int AddMoveCheckResizeRect(Rect rect, Vector2 designSize, bool outOnEnd, Callback_1&lt;Vector2&gt; begin, Callback_1&lt;Vector2&gt; move, Callback_1&lt;Vector2&gt; end)\n        {\n            AreaRect area = new AreaRect(rect, designSize)\n            {\n                CheckMove = true,\n                EndOnOut = outOnEnd,\n                MoveBeginCallback = begin,\n                MoveCallback = move,\n                MoveEndCallback = end\n            };\n            return AddCheck(area);\n        }\n\n        public int AddMoveCheckTransform(Transform transform, bool outOnEnd, Callback_1&lt;Vector2&gt; begin, Callback_1&lt;Vector2&gt; move, Callback_1&lt;Vector2&gt; end)\n        {\n            AreaRect area = new AreaRect(transform)\n            {\n                CheckMove = true,\n                EndOnOut = outOnEnd,\n                MoveBeginCallback = begin,\n                MoveCallback = move,\n                MoveEndCallback = end\n            };\n            return AddCheck(area);\n        }\n\n        /// &lt;summary&gt;\n        /// 添加检测\n        /// &lt;/summary&gt;\n        /// &lt;param name=&quot;area&quot;&gt;&lt;/param&gt;\n        /// &lt;returns&gt;&lt;/returns&gt;\n        [LuaInterface.NoToLua]\n        public int AddCheck(AreaRect area)\n        {\n            area.id = m_index++;\n            m_rects.Add(area);\n            return area.id;\n        }\n\n        /// &lt;summary&gt;\n        /// 移除检测\n        /// &lt;/summary&gt;\n        /// &lt;param name=&quot;id&quot;&gt;&lt;/param&gt;\n        public void CancelCheck(int id)\n        {\n            if(!m_deletes.Contains(id))\n                m_deletes.Add(id);\n        }\n\n    }\n\n    public class AreaRect\n    {\n        private Rect m_rect;\n        private bool moving;\n        internal int id;\n        /// &lt;summary&gt;\n        /// 鼠标移动时移除即结束\n        /// &lt;/summary&gt;\n        public bool EndOnOut{ get; set; }\n        /// &lt;summary&gt;\n        /// 通知点中和未点中\n        /// &lt;/summary&gt;\n        public bool ClickAllNotice { get; set; }\n        /// &lt;summary&gt;\n        /// 检测点击\n        /// &lt;/summary&gt;\n        public bool CheckClick { get; set; }\n        /// &lt;summary&gt;\n        /// 检测移动\n        /// &lt;/summary&gt;\n        public bool CheckMove { get; set; }\n        /// &lt;summary&gt;\n        /// 点击回调\n        /// &lt;/summary&gt;\n        public Callback_1&lt;bool&gt; ClickCallback;\n        /// &lt;summary&gt;\n        /// 移动结束回调\n        /// &lt;/summary&gt;\n        public Callback_1&lt;Vector2&gt; MoveBeginCallback;\n        /// &lt;summary&gt;\n        /// 移动回调\n        /// &lt;/summary&gt;\n        public Callback_1&lt;Vector2&gt; MoveCallback;\n        /// &lt;summary&gt;\n        /// 移动结束回调\n        /// &lt;/summary&gt;\n        public Callback_1&lt;Vector2&gt; MoveEndCallback;\n\n        /// &lt;summary&gt;\n        /// 普通构造函数\n        /// &lt;/summary&gt;\n        /// &lt;param name=&quot;rect&quot;&gt;在屏幕上的区域&lt;/param&gt;\n        public AreaRect(Rect rect)\n        {\n            m_rect = rect;\n        }\n\n        /// &lt;summary&gt;\n        /// 可缩放区域\n        /// &lt;/summary&gt;\n        /// &lt;param name=&quot;rect&quot;&gt;设计时所选区域，如UI设计时的rect&lt;/param&gt;\n        /// &lt;param name=&quot;designSize&quot;&gt;UI设计时屏幕分辨率&lt;/param&gt;\n        public AreaRect(Rect rect, Vector2 designSize)\n        {\n            float sx = Screen.width/designSize.x;\n            float sy = Screen.height/designSize.y;\n\n            Rect newRect = new Rect()\n            {\n                x = rect.x*sx,\n                y = rect.y*sy,\n                width = rect.width*sx,\n                height = rect.height*sy\n            };\n\n            m_rect = newRect;\n        }\n\n        /// &lt;summary&gt;\n        /// UI区域\n        /// &lt;/summary&gt;\n        /// &lt;param name=&quot;transform&quot;&gt;RectTransform&lt;/param&gt;\n        public AreaRect(Transform transform)\n        {\n            RectTransform rectTransform = transform as RectTransform;\n\n            /*m_rect = rectTransform.rect; //没有考虑到缩放问题，当缩放后rect的长宽并未改变\n            m_rect.center = rectTransform.position;*/ //没有考虑到中心点影响，center并非world position\n\n            float w = rectTransform.sizeDelta.x * rectTransform.lossyScale.x;//消除缩放影响\n            float h = rectTransform.sizeDelta.y * rectTransform.localScale.y;\n\n            float x = rectTransform.position.x - rectTransform.pivot.x * w; //消除中心点并非pivot非（0.5，0.5）影响\n            float y = rectTransform.position.y - rectTransform.pivot.y * h;\n\n            m_rect.center = new Vector2(x, y);\n            m_rect.width = w;\n            m_rect.height = h;\n        }\n\n        /// &lt;summary&gt;\n        /// 是否在区域中\n        /// &lt;/summary&gt;\n        /// &lt;param name=&quot;pos&quot;&gt;&lt;/param&gt;\n        /// &lt;returns&gt;&lt;/returns&gt;\n        public bool IsContain(Vector3 pos)\n        {\n            return m_rect.Contains(pos);\n        }\n\n        /// &lt;summary&gt;\n        /// 区域点击检测\n        /// &lt;/summary&gt;\n        /// &lt;param name=&quot;pos&quot;&gt;&lt;/param&gt;\n        public void OnClick(Vector2 pos)\n        {\n            if(!CheckClick) return;\n            if (IsContain(pos) &amp;&amp; ClickCallback != null)\n            {\n                ClickCallback(true);\n            }\n            else if (ClickAllNotice &amp;&amp; ClickCallback != null)\n            {\n                ClickCallback(false);\n            }\n        }\n\n        /// &lt;summary&gt;\n        /// 开始移动\n        /// &lt;/summary&gt;\n        /// &lt;param name=&quot;pos&quot;&gt;&lt;/param&gt;\n        public void OnMoveBegin(Vector2 pos)\n        {\n            if (!CheckMove) return;\n            if (IsContain(pos))\n            {\n                moving = true;\n                if (MoveBeginCallback != null)\n                    MoveBeginCallback(pos);\n            }\n        }\n\n        /// &lt;summary&gt;\n        /// 区域移动检测\n        /// &lt;/summary&gt;\n        /// &lt;param name=&quot;pos&quot;&gt;&lt;/param&gt;\n        public void OnMove(Vector2 pos)\n        {\n            if(!moving || !CheckMove) return;\n\n            if (IsContain(pos))\n            {\n                if (MoveCallback != null)\n                    MoveCallback(pos);\n            }\n            else\n            {\n                if (EndOnOut)\n                {\n                    moving = false;\n                    if (MoveEndCallback != null)\n                        MoveEndCallback(pos);\n                }\n                else\n                {\n                    if (MoveCallback != null)\n                        MoveCallback(pos);\n                }\n            }\n        }\n\n        /// &lt;summary&gt;\n        /// 移动结束\n        /// &lt;/summary&gt;\n        /// &lt;param name=&quot;pos&quot;&gt;&lt;/param&gt;\n        public void OnMoveEnd(Vector2 pos)\n        {\n            if (!moving || !CheckMove) return;\n            if (MoveEndCallback != null)\n                MoveEndCallback(pos);\n        }\n\n    }\n}\n</code></pre>\n<p>使用方式现在直接调用AreaCheck的单例即可。</p>\n"},{"title":"一键排版对齐","date":"2017-05-22T16:00:00.000Z","_content":"\n好久没有写东西了，因为最近忙，做一些项目上具体的功能。由于偶尔还是要拼一下UI，感觉对齐还是一个问题。虽然在以前写过一个[一键对齐父节点](https://garsonlab.github.io/2017/02/27/%E4%B8%80%E9%94%AE%E5%AF%B9%E9%BD%90%E7%88%B6%E8%8A%82%E7%82%B9/)的东西，可还是不够用，Unity中没有其他工具一样的辅助线。。。so,如果要让两个UI项以某种方式对齐排列，自己手动摆毛事总有那么一点点误差，除非你改坐标。我的功能是这样的：\n![我的csdn](http://img.blog.csdn.net/20170523162739024?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvQ2hlbmc2MjQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center)\n\n![我的csdn](http://img.blog.csdn.net/20170523162818399?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvQ2hlbmc2MjQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center)\n\n支持  **缩放、锚点、中心点** 不同，全部一键搞定。\n\n``` csharp\n\nusing System.Collections;\nusing System.Collections.Generic;\nusing UnityEditor;\nusing UnityEngine;\n\n/// <summary>\n/// Introduction: GUIAlignOthers\n/// Author:     Cheng\n/// Time: \n/// </summary>\npublic class GUIAlignOthers :Editor\n{\n\n    [MenuItem(\"GameObject/UI/Align/Top\")]\n    static void AlignTop()\n    {\n        Align(1);\n    }\n    [MenuItem(\"GameObject/UI/Align/Left\")]\n    static void AlignLeft()\n    {\n        Align(2);\n    }\n    [MenuItem(\"GameObject/UI/Align/Right\")]\n    static void AlignRight()\n    {\n        Align(3);\n    }\n    [MenuItem(\"GameObject/UI/Align/Bottom\")]\n    static void AlignBottom()\n    {\n        Align(4);\n    }\n    [MenuItem(\"GameObject/UI/Align/Horizontal\")]\n    static void AlignHorizontal()\n    {\n        Align(5);\n    }\n    [MenuItem(\"GameObject/UI/Align/Vertical\")]\n    static void AlignVertical()\n    {\n        Align(6);\n    }\n\n    static void Align(int type)\n    {\n        List<RectTransform> rects = new List<RectTransform>();\n        GameObject[] objects = Selection.gameObjects;\n        foreach (var obj in objects)\n        {\n            RectTransform rect = obj.GetComponent<RectTransform>();\n            if (rect != null)\n                rects.Add(rect);\n        }\n\n        if (rects.Count > 1)\n        {\n            Align(type, rects);\n        }\n    }\n\n\n\n    static void Align(int type, List<RectTransform> rects)\n    {\n        RectTransform tenplate = rects[0];\n        float w = tenplate.sizeDelta.x * tenplate.lossyScale.x;//消除缩放影响\n        float h = tenplate.sizeDelta.y * tenplate.localScale.y;\n\n        float x = tenplate.position.x - tenplate.pivot.x * w; //消除中心点并非pivot非（0.5，0.5）影响\n        float y = tenplate.position.y - tenplate.pivot.y * h;\n\n        switch (type)\n        {\n            case 1://上对齐\n                for (int i = 1; i < rects.Count; i++)\n                {\n                    RectTransform trans = rects[i];\n                    float th = trans.sizeDelta.y * trans.localScale.y;\n                    Vector3 pos = trans.position;\n                    pos.y = y + h - th + trans.pivot.y * th;\n                    trans.position = pos;\n                }\n\n\n                break;\n            case 2://左对齐\n                for (int i = 1; i < rects.Count; i++)\n                {\n                    RectTransform trans = rects[i];\n                    float tw = trans.sizeDelta.x * trans.lossyScale.x;\n                    Vector3 pos = trans.position;\n                    pos.x = x + tw*trans.pivot.x;\n                    trans.position = pos;\n                }\n                break;\n            case 3://右对齐\n                for (int i = 1; i < rects.Count; i++)\n                {\n                    RectTransform trans = rects[i];\n                    float tw = trans.sizeDelta.x * trans.lossyScale.x;\n                    Vector3 pos = trans.position;\n                    pos.x = x+ w - tw + tw * trans.pivot.x;\n                    trans.position = pos;\n                }\n                break;\n            case 4://下对齐\n                for (int i = 1; i < rects.Count; i++)\n                {\n                    RectTransform trans = rects[i];\n                    float th = trans.sizeDelta.y * trans.localScale.y;\n                    Vector3 pos = trans.position;\n                    pos.y = y + th*trans.pivot.y;\n                    trans.position = pos;\n                }\n                break;\n            case 5://水平对齐\n                for (int i = 1; i < rects.Count; i++)\n                {\n                    RectTransform trans = rects[i];\n                    float th = trans.sizeDelta.y * trans.localScale.y;\n                    Vector3 pos = trans.position;\n                    pos.y = y + 0.5f * h - 0.5f*th + th * trans.pivot.y;\n                    trans.position = pos;\n                }\n                break;\n            case 6://垂直对齐\n                for (int i = 1; i < rects.Count; i++)\n                {\n                    RectTransform trans = rects[i];\n                    float tw = trans.sizeDelta.x * trans.lossyScale.x;\n                    Vector3 pos = trans.position;\n                    pos.x = x + 0.5f * w - 0.5f * tw + tw * trans.pivot.x;\n                    trans.position = pos;\n                }\n                break;\n        }\n    }\n\n}\n\n```\n\n","source":"_posts/一键排版对齐.md","raw":"---\ntitle: 一键排版对齐\ndate: 2017-5-23\ntags:\n- UGUI\n- 对齐\ncategories: UGUI\n---\n\n好久没有写东西了，因为最近忙，做一些项目上具体的功能。由于偶尔还是要拼一下UI，感觉对齐还是一个问题。虽然在以前写过一个[一键对齐父节点](https://garsonlab.github.io/2017/02/27/%E4%B8%80%E9%94%AE%E5%AF%B9%E9%BD%90%E7%88%B6%E8%8A%82%E7%82%B9/)的东西，可还是不够用，Unity中没有其他工具一样的辅助线。。。so,如果要让两个UI项以某种方式对齐排列，自己手动摆毛事总有那么一点点误差，除非你改坐标。我的功能是这样的：\n![我的csdn](http://img.blog.csdn.net/20170523162739024?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvQ2hlbmc2MjQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center)\n\n![我的csdn](http://img.blog.csdn.net/20170523162818399?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvQ2hlbmc2MjQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center)\n\n支持  **缩放、锚点、中心点** 不同，全部一键搞定。\n\n``` csharp\n\nusing System.Collections;\nusing System.Collections.Generic;\nusing UnityEditor;\nusing UnityEngine;\n\n/// <summary>\n/// Introduction: GUIAlignOthers\n/// Author:     Cheng\n/// Time: \n/// </summary>\npublic class GUIAlignOthers :Editor\n{\n\n    [MenuItem(\"GameObject/UI/Align/Top\")]\n    static void AlignTop()\n    {\n        Align(1);\n    }\n    [MenuItem(\"GameObject/UI/Align/Left\")]\n    static void AlignLeft()\n    {\n        Align(2);\n    }\n    [MenuItem(\"GameObject/UI/Align/Right\")]\n    static void AlignRight()\n    {\n        Align(3);\n    }\n    [MenuItem(\"GameObject/UI/Align/Bottom\")]\n    static void AlignBottom()\n    {\n        Align(4);\n    }\n    [MenuItem(\"GameObject/UI/Align/Horizontal\")]\n    static void AlignHorizontal()\n    {\n        Align(5);\n    }\n    [MenuItem(\"GameObject/UI/Align/Vertical\")]\n    static void AlignVertical()\n    {\n        Align(6);\n    }\n\n    static void Align(int type)\n    {\n        List<RectTransform> rects = new List<RectTransform>();\n        GameObject[] objects = Selection.gameObjects;\n        foreach (var obj in objects)\n        {\n            RectTransform rect = obj.GetComponent<RectTransform>();\n            if (rect != null)\n                rects.Add(rect);\n        }\n\n        if (rects.Count > 1)\n        {\n            Align(type, rects);\n        }\n    }\n\n\n\n    static void Align(int type, List<RectTransform> rects)\n    {\n        RectTransform tenplate = rects[0];\n        float w = tenplate.sizeDelta.x * tenplate.lossyScale.x;//消除缩放影响\n        float h = tenplate.sizeDelta.y * tenplate.localScale.y;\n\n        float x = tenplate.position.x - tenplate.pivot.x * w; //消除中心点并非pivot非（0.5，0.5）影响\n        float y = tenplate.position.y - tenplate.pivot.y * h;\n\n        switch (type)\n        {\n            case 1://上对齐\n                for (int i = 1; i < rects.Count; i++)\n                {\n                    RectTransform trans = rects[i];\n                    float th = trans.sizeDelta.y * trans.localScale.y;\n                    Vector3 pos = trans.position;\n                    pos.y = y + h - th + trans.pivot.y * th;\n                    trans.position = pos;\n                }\n\n\n                break;\n            case 2://左对齐\n                for (int i = 1; i < rects.Count; i++)\n                {\n                    RectTransform trans = rects[i];\n                    float tw = trans.sizeDelta.x * trans.lossyScale.x;\n                    Vector3 pos = trans.position;\n                    pos.x = x + tw*trans.pivot.x;\n                    trans.position = pos;\n                }\n                break;\n            case 3://右对齐\n                for (int i = 1; i < rects.Count; i++)\n                {\n                    RectTransform trans = rects[i];\n                    float tw = trans.sizeDelta.x * trans.lossyScale.x;\n                    Vector3 pos = trans.position;\n                    pos.x = x+ w - tw + tw * trans.pivot.x;\n                    trans.position = pos;\n                }\n                break;\n            case 4://下对齐\n                for (int i = 1; i < rects.Count; i++)\n                {\n                    RectTransform trans = rects[i];\n                    float th = trans.sizeDelta.y * trans.localScale.y;\n                    Vector3 pos = trans.position;\n                    pos.y = y + th*trans.pivot.y;\n                    trans.position = pos;\n                }\n                break;\n            case 5://水平对齐\n                for (int i = 1; i < rects.Count; i++)\n                {\n                    RectTransform trans = rects[i];\n                    float th = trans.sizeDelta.y * trans.localScale.y;\n                    Vector3 pos = trans.position;\n                    pos.y = y + 0.5f * h - 0.5f*th + th * trans.pivot.y;\n                    trans.position = pos;\n                }\n                break;\n            case 6://垂直对齐\n                for (int i = 1; i < rects.Count; i++)\n                {\n                    RectTransform trans = rects[i];\n                    float tw = trans.sizeDelta.x * trans.lossyScale.x;\n                    Vector3 pos = trans.position;\n                    pos.x = x + 0.5f * w - 0.5f * tw + tw * trans.pivot.x;\n                    trans.position = pos;\n                }\n                break;\n        }\n    }\n\n}\n\n```\n\n","slug":"一键排版对齐","published":1,"updated":"2017-10-26T11:22:25.437Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj9fm90u500132cobbjhhj79h","content":"<p>好久没有写东西了，因为最近忙，做一些项目上具体的功能。由于偶尔还是要拼一下UI，感觉对齐还是一个问题。虽然在以前写过一个<a href=\"https://garsonlab.github.io/2017/02/27/%E4%B8%80%E9%94%AE%E5%AF%B9%E9%BD%90%E7%88%B6%E8%8A%82%E7%82%B9/\" target=\"_blank\" rel=\"external\">一键对齐父节点</a>的东西，可还是不够用，Unity中没有其他工具一样的辅助线。。。so,如果要让两个UI项以某种方式对齐排列，自己手动摆毛事总有那么一点点误差，除非你改坐标。我的功能是这样的：<br><img src=\"http://img.blog.csdn.net/20170523162739024?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvQ2hlbmc2MjQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\" alt=\"我的csdn\"></p>\n<p><img src=\"http://img.blog.csdn.net/20170523162818399?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvQ2hlbmc2MjQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\" alt=\"我的csdn\"></p>\n<p>支持  <strong>缩放、锚点、中心点</strong> 不同，全部一键搞定。</p>\n<pre class=\"line-numbers language-csharp\"><code class=\"language-csharp\">\n<span class=\"token keyword\">using</span> System<span class=\"token punctuation\">.</span>Collections<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> System<span class=\"token punctuation\">.</span>Collections<span class=\"token punctuation\">.</span>Generic<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> UnityEditor<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> UnityEngine<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/// &lt;summary></span>\n<span class=\"token comment\" spellcheck=\"true\">/// Introduction: GUIAlignOthers</span>\n<span class=\"token comment\" spellcheck=\"true\">/// Author:     Cheng</span>\n<span class=\"token comment\" spellcheck=\"true\">/// Time: </span>\n<span class=\"token comment\" spellcheck=\"true\">/// &lt;/summary></span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">GUIAlignOthers</span> <span class=\"token punctuation\">:</span>Editor\n<span class=\"token punctuation\">{</span>\n\n    <span class=\"token punctuation\">[</span><span class=\"token function\">MenuItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"GameObject/UI/Align/Top\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">AlignTop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">Align</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">[</span><span class=\"token function\">MenuItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"GameObject/UI/Align/Left\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">AlignLeft</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">Align</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">[</span><span class=\"token function\">MenuItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"GameObject/UI/Align/Right\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">AlignRight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">Align</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">[</span><span class=\"token function\">MenuItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"GameObject/UI/Align/Bottom\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">AlignBottom</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">Align</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">[</span><span class=\"token function\">MenuItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"GameObject/UI/Align/Horizontal\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">AlignHorizontal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">Align</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">[</span><span class=\"token function\">MenuItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"GameObject/UI/Align/Vertical\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">AlignVertical</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">Align</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">Align</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> type<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        List<span class=\"token operator\">&lt;</span>RectTransform<span class=\"token operator\">></span> rects <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">List</span><span class=\"token operator\">&lt;</span>RectTransform<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        GameObject<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> objects <span class=\"token operator\">=</span> Selection<span class=\"token punctuation\">.</span>gameObjects<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> obj <span class=\"token keyword\">in</span> objects<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            RectTransform rect <span class=\"token operator\">=</span> obj<span class=\"token punctuation\">.</span><span class=\"token generic-method function\">GetComponent<span class=\"token punctuation\">&lt;</span>RectTransform<span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>rect <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n                rects<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>rect<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>rects<span class=\"token punctuation\">.</span>Count <span class=\"token operator\">></span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">Align</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">,</span> rects<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n\n\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">Align</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> type<span class=\"token punctuation\">,</span> List<span class=\"token operator\">&lt;</span>RectTransform<span class=\"token operator\">></span> rects<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        RectTransform tenplate <span class=\"token operator\">=</span> rects<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">float</span> w <span class=\"token operator\">=</span> tenplate<span class=\"token punctuation\">.</span>sizeDelta<span class=\"token punctuation\">.</span>x <span class=\"token operator\">*</span> tenplate<span class=\"token punctuation\">.</span>lossyScale<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//消除缩放影响</span>\n        <span class=\"token keyword\">float</span> h <span class=\"token operator\">=</span> tenplate<span class=\"token punctuation\">.</span>sizeDelta<span class=\"token punctuation\">.</span>y <span class=\"token operator\">*</span> tenplate<span class=\"token punctuation\">.</span>localScale<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">float</span> x <span class=\"token operator\">=</span> tenplate<span class=\"token punctuation\">.</span>position<span class=\"token punctuation\">.</span>x <span class=\"token operator\">-</span> tenplate<span class=\"token punctuation\">.</span>pivot<span class=\"token punctuation\">.</span>x <span class=\"token operator\">*</span> w<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">//消除中心点并非pivot非（0.5，0.5）影响</span>\n        <span class=\"token keyword\">float</span> y <span class=\"token operator\">=</span> tenplate<span class=\"token punctuation\">.</span>position<span class=\"token punctuation\">.</span>y <span class=\"token operator\">-</span> tenplate<span class=\"token punctuation\">.</span>pivot<span class=\"token punctuation\">.</span>y <span class=\"token operator\">*</span> h<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">case</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span>上对齐\n                <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> rects<span class=\"token punctuation\">.</span>Count<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">{</span>\n                    RectTransform trans <span class=\"token operator\">=</span> rects<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">float</span> th <span class=\"token operator\">=</span> trans<span class=\"token punctuation\">.</span>sizeDelta<span class=\"token punctuation\">.</span>y <span class=\"token operator\">*</span> trans<span class=\"token punctuation\">.</span>localScale<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">;</span>\n                    Vector3 pos <span class=\"token operator\">=</span> trans<span class=\"token punctuation\">.</span>position<span class=\"token punctuation\">;</span>\n                    pos<span class=\"token punctuation\">.</span>y <span class=\"token operator\">=</span> y <span class=\"token operator\">+</span> h <span class=\"token operator\">-</span> th <span class=\"token operator\">+</span> trans<span class=\"token punctuation\">.</span>pivot<span class=\"token punctuation\">.</span>y <span class=\"token operator\">*</span> th<span class=\"token punctuation\">;</span>\n                    trans<span class=\"token punctuation\">.</span>position <span class=\"token operator\">=</span> pos<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n\n\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">case</span> <span class=\"token number\">2</span><span class=\"token punctuation\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span>左对齐\n                <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> rects<span class=\"token punctuation\">.</span>Count<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">{</span>\n                    RectTransform trans <span class=\"token operator\">=</span> rects<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">float</span> tw <span class=\"token operator\">=</span> trans<span class=\"token punctuation\">.</span>sizeDelta<span class=\"token punctuation\">.</span>x <span class=\"token operator\">*</span> trans<span class=\"token punctuation\">.</span>lossyScale<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">;</span>\n                    Vector3 pos <span class=\"token operator\">=</span> trans<span class=\"token punctuation\">.</span>position<span class=\"token punctuation\">;</span>\n                    pos<span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> x <span class=\"token operator\">+</span> tw<span class=\"token operator\">*</span>trans<span class=\"token punctuation\">.</span>pivot<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">;</span>\n                    trans<span class=\"token punctuation\">.</span>position <span class=\"token operator\">=</span> pos<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">case</span> <span class=\"token number\">3</span><span class=\"token punctuation\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span>右对齐\n                <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> rects<span class=\"token punctuation\">.</span>Count<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">{</span>\n                    RectTransform trans <span class=\"token operator\">=</span> rects<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">float</span> tw <span class=\"token operator\">=</span> trans<span class=\"token punctuation\">.</span>sizeDelta<span class=\"token punctuation\">.</span>x <span class=\"token operator\">*</span> trans<span class=\"token punctuation\">.</span>lossyScale<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">;</span>\n                    Vector3 pos <span class=\"token operator\">=</span> trans<span class=\"token punctuation\">.</span>position<span class=\"token punctuation\">;</span>\n                    pos<span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> x<span class=\"token operator\">+</span> w <span class=\"token operator\">-</span> tw <span class=\"token operator\">+</span> tw <span class=\"token operator\">*</span> trans<span class=\"token punctuation\">.</span>pivot<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">;</span>\n                    trans<span class=\"token punctuation\">.</span>position <span class=\"token operator\">=</span> pos<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">case</span> <span class=\"token number\">4</span><span class=\"token punctuation\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span>下对齐\n                <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> rects<span class=\"token punctuation\">.</span>Count<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">{</span>\n                    RectTransform trans <span class=\"token operator\">=</span> rects<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">float</span> th <span class=\"token operator\">=</span> trans<span class=\"token punctuation\">.</span>sizeDelta<span class=\"token punctuation\">.</span>y <span class=\"token operator\">*</span> trans<span class=\"token punctuation\">.</span>localScale<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">;</span>\n                    Vector3 pos <span class=\"token operator\">=</span> trans<span class=\"token punctuation\">.</span>position<span class=\"token punctuation\">;</span>\n                    pos<span class=\"token punctuation\">.</span>y <span class=\"token operator\">=</span> y <span class=\"token operator\">+</span> th<span class=\"token operator\">*</span>trans<span class=\"token punctuation\">.</span>pivot<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">;</span>\n                    trans<span class=\"token punctuation\">.</span>position <span class=\"token operator\">=</span> pos<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">case</span> <span class=\"token number\">5</span><span class=\"token punctuation\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span>水平对齐\n                <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> rects<span class=\"token punctuation\">.</span>Count<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">{</span>\n                    RectTransform trans <span class=\"token operator\">=</span> rects<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">float</span> th <span class=\"token operator\">=</span> trans<span class=\"token punctuation\">.</span>sizeDelta<span class=\"token punctuation\">.</span>y <span class=\"token operator\">*</span> trans<span class=\"token punctuation\">.</span>localScale<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">;</span>\n                    Vector3 pos <span class=\"token operator\">=</span> trans<span class=\"token punctuation\">.</span>position<span class=\"token punctuation\">;</span>\n                    pos<span class=\"token punctuation\">.</span>y <span class=\"token operator\">=</span> y <span class=\"token operator\">+</span> <span class=\"token number\">0.5f</span> <span class=\"token operator\">*</span> h <span class=\"token operator\">-</span> <span class=\"token number\">0.5f</span><span class=\"token operator\">*</span>th <span class=\"token operator\">+</span> th <span class=\"token operator\">*</span> trans<span class=\"token punctuation\">.</span>pivot<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">;</span>\n                    trans<span class=\"token punctuation\">.</span>position <span class=\"token operator\">=</span> pos<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">case</span> <span class=\"token number\">6</span><span class=\"token punctuation\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span>垂直对齐\n                <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> rects<span class=\"token punctuation\">.</span>Count<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">{</span>\n                    RectTransform trans <span class=\"token operator\">=</span> rects<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">float</span> tw <span class=\"token operator\">=</span> trans<span class=\"token punctuation\">.</span>sizeDelta<span class=\"token punctuation\">.</span>x <span class=\"token operator\">*</span> trans<span class=\"token punctuation\">.</span>lossyScale<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">;</span>\n                    Vector3 pos <span class=\"token operator\">=</span> trans<span class=\"token punctuation\">.</span>position<span class=\"token punctuation\">;</span>\n                    pos<span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> x <span class=\"token operator\">+</span> <span class=\"token number\">0.5f</span> <span class=\"token operator\">*</span> w <span class=\"token operator\">-</span> <span class=\"token number\">0.5f</span> <span class=\"token operator\">*</span> tw <span class=\"token operator\">+</span> tw <span class=\"token operator\">*</span> trans<span class=\"token punctuation\">.</span>pivot<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">;</span>\n                    trans<span class=\"token punctuation\">.</span>position <span class=\"token operator\">=</span> pos<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{"gallery":{"美女":{"full_link":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1508912200438&di=d5b3eacf86d8f94c149c6fc68fe4da67&imgtype=0&src=http%3A%2F%2Fpic01.taopic.com%2F151014%2F234732-15101410452229-lp.jpg","thumb_link":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1508912200438&di=d5b3eacf86d8f94c149c6fc68fe4da67&imgtype=0&src=http%3A%2F%2Fpic01.taopic.com%2F151014%2F234732-15101410452229-lp.jpg","descr":"美女插画"}},"links":{"Github":{"link":"https://github.com/garsonlab","avatar":"https://avatars3.githubusercontent.com/u/13958934?s=460&v=4","descr":"My Github","type":"Blog"},"OnLineTools":{"link":"http://tool.lu/","avatar":"http://qn11.tool.lu/201710/15/103320SbM84Ql4tETjg49a_28x28.png","descr":"在线工具","type":"Tools"},"CMDMarkdown":{"link":"https://www.zybuluo.com/","avatar":"https://www.zybuluo.com/static/img/logo.png","descr":"Markdown在线编辑","type":"Tools"},"Hexo文档":{"link":"https://hexo.io/zh-cn/docs/","avatar":"https://hexo.io/logo.svg","descr":"Hexo中文官方文档","type":"Community"},"游戏蛮牛":{"link":"http://www.manew.com/forum.php","avatar":"http://www.manew.com/template/manew2016/images/logo.png","descr":"unity交流社区","type":"Unity"},"FairyGUI":{"link":"http://www.fairygui.com/","avatar":"http://www.fairygui.com/images/20170728151207.png","descr":"FairyGUI官方网站","type":"Site"}},"linktypes":{"Blog":{"name":"关注的博客"},"Unity":{"name":"Unity3D"},"Community":{"name":"浏览的社区"},"Tools":{"name":"工具"},"Site":{"name":"收藏的网址"}}}},"excerpt":"","more":"<p>好久没有写东西了，因为最近忙，做一些项目上具体的功能。由于偶尔还是要拼一下UI，感觉对齐还是一个问题。虽然在以前写过一个<a href=\"https://garsonlab.github.io/2017/02/27/%E4%B8%80%E9%94%AE%E5%AF%B9%E9%BD%90%E7%88%B6%E8%8A%82%E7%82%B9/\" target=\"_blank\" rel=\"external\">一键对齐父节点</a>的东西，可还是不够用，Unity中没有其他工具一样的辅助线。。。so,如果要让两个UI项以某种方式对齐排列，自己手动摆毛事总有那么一点点误差，除非你改坐标。我的功能是这样的：<br><img src=\"http://img.blog.csdn.net/20170523162739024?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvQ2hlbmc2MjQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\" alt=\"我的csdn\"></p>\n<p><img src=\"http://img.blog.csdn.net/20170523162818399?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvQ2hlbmc2MjQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\" alt=\"我的csdn\"></p>\n<p>支持  <strong>缩放、锚点、中心点</strong> 不同，全部一键搞定。</p>\n<pre><code class=\"csharp\">\nusing System.Collections;\nusing System.Collections.Generic;\nusing UnityEditor;\nusing UnityEngine;\n\n/// &lt;summary&gt;\n/// Introduction: GUIAlignOthers\n/// Author:     Cheng\n/// Time: \n/// &lt;/summary&gt;\npublic class GUIAlignOthers :Editor\n{\n\n    [MenuItem(&quot;GameObject/UI/Align/Top&quot;)]\n    static void AlignTop()\n    {\n        Align(1);\n    }\n    [MenuItem(&quot;GameObject/UI/Align/Left&quot;)]\n    static void AlignLeft()\n    {\n        Align(2);\n    }\n    [MenuItem(&quot;GameObject/UI/Align/Right&quot;)]\n    static void AlignRight()\n    {\n        Align(3);\n    }\n    [MenuItem(&quot;GameObject/UI/Align/Bottom&quot;)]\n    static void AlignBottom()\n    {\n        Align(4);\n    }\n    [MenuItem(&quot;GameObject/UI/Align/Horizontal&quot;)]\n    static void AlignHorizontal()\n    {\n        Align(5);\n    }\n    [MenuItem(&quot;GameObject/UI/Align/Vertical&quot;)]\n    static void AlignVertical()\n    {\n        Align(6);\n    }\n\n    static void Align(int type)\n    {\n        List&lt;RectTransform&gt; rects = new List&lt;RectTransform&gt;();\n        GameObject[] objects = Selection.gameObjects;\n        foreach (var obj in objects)\n        {\n            RectTransform rect = obj.GetComponent&lt;RectTransform&gt;();\n            if (rect != null)\n                rects.Add(rect);\n        }\n\n        if (rects.Count &gt; 1)\n        {\n            Align(type, rects);\n        }\n    }\n\n\n\n    static void Align(int type, List&lt;RectTransform&gt; rects)\n    {\n        RectTransform tenplate = rects[0];\n        float w = tenplate.sizeDelta.x * tenplate.lossyScale.x;//消除缩放影响\n        float h = tenplate.sizeDelta.y * tenplate.localScale.y;\n\n        float x = tenplate.position.x - tenplate.pivot.x * w; //消除中心点并非pivot非（0.5，0.5）影响\n        float y = tenplate.position.y - tenplate.pivot.y * h;\n\n        switch (type)\n        {\n            case 1://上对齐\n                for (int i = 1; i &lt; rects.Count; i++)\n                {\n                    RectTransform trans = rects[i];\n                    float th = trans.sizeDelta.y * trans.localScale.y;\n                    Vector3 pos = trans.position;\n                    pos.y = y + h - th + trans.pivot.y * th;\n                    trans.position = pos;\n                }\n\n\n                break;\n            case 2://左对齐\n                for (int i = 1; i &lt; rects.Count; i++)\n                {\n                    RectTransform trans = rects[i];\n                    float tw = trans.sizeDelta.x * trans.lossyScale.x;\n                    Vector3 pos = trans.position;\n                    pos.x = x + tw*trans.pivot.x;\n                    trans.position = pos;\n                }\n                break;\n            case 3://右对齐\n                for (int i = 1; i &lt; rects.Count; i++)\n                {\n                    RectTransform trans = rects[i];\n                    float tw = trans.sizeDelta.x * trans.lossyScale.x;\n                    Vector3 pos = trans.position;\n                    pos.x = x+ w - tw + tw * trans.pivot.x;\n                    trans.position = pos;\n                }\n                break;\n            case 4://下对齐\n                for (int i = 1; i &lt; rects.Count; i++)\n                {\n                    RectTransform trans = rects[i];\n                    float th = trans.sizeDelta.y * trans.localScale.y;\n                    Vector3 pos = trans.position;\n                    pos.y = y + th*trans.pivot.y;\n                    trans.position = pos;\n                }\n                break;\n            case 5://水平对齐\n                for (int i = 1; i &lt; rects.Count; i++)\n                {\n                    RectTransform trans = rects[i];\n                    float th = trans.sizeDelta.y * trans.localScale.y;\n                    Vector3 pos = trans.position;\n                    pos.y = y + 0.5f * h - 0.5f*th + th * trans.pivot.y;\n                    trans.position = pos;\n                }\n                break;\n            case 6://垂直对齐\n                for (int i = 1; i &lt; rects.Count; i++)\n                {\n                    RectTransform trans = rects[i];\n                    float tw = trans.sizeDelta.x * trans.lossyScale.x;\n                    Vector3 pos = trans.position;\n                    pos.x = x + 0.5f * w - 0.5f * tw + tw * trans.pivot.x;\n                    trans.position = pos;\n                }\n                break;\n        }\n    }\n\n}\n</code></pre>\n"},{"title":"扫雷 unity版","date":"2017-02-19T16:00:00.000Z","_content":"\n\n以前看没想过扫雷的实现，昨天看到一个帖子发的扫雷，写的很恶心，所以自己就尝试了一下，直接新建一个cs脚本复制以下代码就可以了。\n先看看效果\n![扫雷图来源于我的csdn](http://img.blog.csdn.net/20170220105031070?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvQ2hlbmc2MjQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center)\n\n代码：\n``` csharp\n\nusing System.Collections.Generic;\nusing UnityEngine;\n\npublic class MineSweeper : MonoBehaviour\n{\n    public static MineSweeper instance;\n    private GameObject prefab;\n    private List<MineCube> objects; \n\n    public int Row = 5;\n    public int Col = 5;\n    public int Mine = 10;\n    private int totalCount;\n\n    void Start()\n    {\n        instance = this;\n        CreatePrefab();\n        objects = new List<MineCube>();\n    }\n\n    void Create()\n    {\n        //mine总数小于格子数\n        if(Mine > Row*Col) {Debug.LogError(\"Mine's count canot more than grid's count!\");return;}\n        totalCount = Row*Col;\n        //清除所有旧物体\n        int count = objects.Count;\n        for (int i = count-1; i >=0 ; i--)\n        {\n            objects[i].DoDestroy();\n        }\n        objects.Clear();\n        //创建物体\n        for (int i = 0; i < Row; i++)\n        {\n            for (int j = 0; j < Col; j++)\n            {\n                CreateObject(i, j);\n            }\n        }\n        //创建mine\n        CreateMines();\n        //更新数据\n        UpdateMines();\n    }\n\n    void OnGUI()\n    {\n        GUI.Label(new Rect(Screen.width * 0.5f - 100, 0, 200, 30),  \"TotalBlock: \" + Row * Col + \" Mine: \" + Mine);\n        GUI.Label(new Rect(0,0,50,30),\"Row\" );\n        string row = GUI.TextField(new Rect(50, 0, 50, 30), Row.ToString());\n        if (!int.TryParse(row, out Row))\n            Row = 3;\n        GUI.Label(new Rect(0, 35, 50, 30), \"Col\");\n        string col = GUI.TextField(new Rect(50, 35, 50, 30), Col.ToString());\n        if (!int.TryParse(col, out Col))\n            Col = 3;\n        GUI.Label(new Rect(0, 70, 50, 30), \"Mine\");\n        string mine = GUI.TextField(new Rect(50, 70, 50, 30), Mine.ToString());\n        if (!int.TryParse(mine, out Mine))\n            Mine = 3;\n        if(GUI.Button(new Rect(10, 110, 50, 30), \"Create\"))\n            Create();\n\n    }\n\n    /// <summary>\n    /// 创建预制体，附加TextMesh\n    /// </summary>\n    void CreatePrefab()\n    {\n        prefab = GameObject.CreatePrimitive(PrimitiveType.Cube);\n        GameObject text = new GameObject(\"Text\");\n        text.AddComponent<MeshRenderer>();\n        TextMesh txtMesh = text.AddComponent<TextMesh>();\n        text.transform.parent = prefab.transform;\n        text.transform.localPosition = Vector3.zero;\n\n        txtMesh.color = Color.black;\n        txtMesh.anchor = TextAnchor.MiddleCenter;\n        txtMesh.alignment = TextAlignment.Center;\n        txtMesh.fontSize = 10;\n\n        prefab.SetActive(false);\n        prefab.AddComponent<MineCube>();\n        prefab.transform.localScale = Vector3.one * 0.9f;\n    }\n\n    void CreateObject(int x, int y)\n    {\n        GameObject obj = Instantiate(prefab);\n        obj.SetActive(true);\n        MineCube mineCube = obj.GetComponent<MineCube>();\n        mineCube.Set(x, y, objects.Count);\n        objects.Add(mineCube);\n    }\n\n    void CreateMines()\n    {\n        //Mine个不重复随机数\n        List<int> randoms = new List<int>();\n        for (int i = 0; i < Mine; i++)\n        {\n            int r = Random.Range(0, objects.Count-1);\n            while (randoms.Contains(r))\n            {\n                r = (r + 1)%objects.Count;\n            }\n            randoms.Add(r);\n        }\n        //设置mine\n        for (int i = 0; i < Mine; i++)\n        {\n            objects[randoms[i]].SetState(1);\n        }\n    }\n\n    /// <summary>\n    /// （该部分可优化）\n    /// 如果是mine，跳过\n    /// 否则，判断周围是否有mine\n    ///         是：直接统计九宫格内mine 个数\n    ///         否：把周围空格标记\n    /// </summary>\n    void UpdateMines()\n    {\n        for (int i = 0; i < Row; i++)\n        {\n            for (int j = 0; j < Col; j++)\n            {\n                MineCube mine = objects[i*Col + j];\n                if(mine.isMine()) continue;\n                for (int k = i-1; k <= i+1; k++)\n                {\n                    for (int l = j-1; l <= j+1; l++)\n                    {\n                        if(k < 0 || k >= Row || l < 0 || l >= Col) continue;//划定九宫格界限\n                        if(k == i && l == j) continue;//排除自身\n                        if (objects[k*Col + l].isMine())\n                            mine.AddAroundMine();\n                        else\n                            mine.AddAroundBlock(objects[k*Col + l]);\n                    }\n                }\n            }\n        }\n    }\n\n    internal void GameOver()\n    {\n        Debug.Log(\"GameOver!\");\n    }\n\n    /// <summary>\n    /// 点击判断，根据剩下的格子数判断输赢\n    /// </summary>\n    /// <param name=\"ismine\"></param>\n    internal void SendCount(bool ismine)\n    {\n        if (!ismine)\n        {\n            totalCount--;\n            if (totalCount == Mine)\n            {\n                Debug.Log(\"Congratulations! You Win\");\n            }\n        }\n    }\n}\n\n\npublic class MineCube : MonoBehaviour\n{\n    private TextMesh textMesh;\n    private int x;\n    private int y;\n    private int num;\n    private int state;//0空白， 1mine\n    private Material mat;\n\n    public int aroundMine;\n    private List<MineCube> aroundBlock;\n\n    public bool selected;//是否选中\n\n    void Awake()\n    {\n        textMesh = GetComponentInChildren<TextMesh>();\n        mat = GetComponent<Renderer>().material;\n        state = 0;\n        aroundMine = 0;\n        aroundBlock = new List<MineCube>();\n        selected = false;\n    }\n\n    public void OnMouseDown()\n    {\n        if(selected) return;\n        selected = true;//标记选中\n        MineSweeper.instance.SendCount(isMine());\n        Show();\n        if (isMine())//该块是mine则游戏结束\n        {\n            MineSweeper.instance.GameOver();\n            return;\n        }\n    }\n\n    /// <summary>\n    /// 是mine标记X， 不是则判断周围有显示数字，没有则把相邻的所有没有的都显示出来\n    /// </summary>\n    private void Show()\n    {\n        if (isMine())\n        {\n            textMesh.text = \"X\";\n            mat.SetColor(\"_Color\", Color.red);\n        }\n        else\n        {\n            if (aroundMine != 0)\n                textMesh.text = aroundMine.ToString();\n            else\n            {\n                ShowAroundBlock();\n            }\n            mat.SetColor(\"_Color\", Color.gray);\n        }\n\n    }\n\n    /// <summary>\n    /// 显示周围空白格\n    /// </summary>\n    public void ShowAroundBlock()\n    {\n        if (!selected)\n        {\n            this.selected = true;\n            MineSweeper.instance.SendCount(false);\n        }\n        mat.SetColor(\"_Color\", Color.gray);\n        foreach (var _block in aroundBlock)//遍历周围的空白方格\n        {\n            if (!_block.selected && !_block.isMine() && _block.aroundMine == 0)//该方格未被选中且同样和当前方格一样是一个空白的，周围没有mine的\n            {//点击到空白的时要一起显示空白\n                _block.ShowAroundBlock();\n            }\n        }\n    }\n\n\n    /// <summary>\n    /// 鼠标进入时设置颜色、因为创建的预制体有碰撞器，故OnMouse***函数有效\n    /// </summary>\n    public void OnMouseEnter()\n    {\n        mat.SetColor(\"_Color\", Color.green);\n    }\n\n    /// <summary>\n    /// 鼠标退出时恢复原状\n    /// </summary>\n    public void OnMouseExit()\n    {\n        if (selected)\n        {\n            if(!isMine())\n                mat.SetColor(\"_Color\", Color.gray);\n            else\n                mat.SetColor(\"_Color\", Color.red);\n        }\n        else\n            mat.SetColor(\"_Color\", Color.white);\n    }\n    \n\n\n    internal void Set(int x, int y, int num)\n    {\n        this.x = x;\n        this.y = y;\n        this.num = num;\n        transform.position = new Vector3(x, y, 0);\n    }\n\n    internal void DoDestroy()\n    {\n        Destroy(gameObject);\n    }\n\n    /// <summary>\n    /// state 的 0:空白没有mine\n    ///          1:是mine\n    /// </summary>\n    /// <param name=\"p\"></param>\n    internal void SetState(int p)\n    {\n        state = p;\n    }\n\n    /// <summary>\n    /// 判断是否是mine\n    /// </summary>\n    /// <returns></returns>\n    internal bool isMine()\n    {\n        return state == 1;\n    }\n\n    /// <summary>\n    /// 在UpdateMines中用来更新该block周围的Mine数量\n    /// </summary>\n    internal void AddAroundMine()\n    {\n        aroundMine++;\n    }\n\n    /// <summary>\n    /// 当前格为空block时标记周围八个格中没有mine的格\n    /// 用来显示连续显示\n    /// </summary>\n    /// <param name=\"block\"></param>\n    internal void AddAroundBlock(MineCube block)\n    {\n        aroundBlock.Add(block);\n    }\n}\n```\n\n","source":"_posts/扫雷unity版.md","raw":"---\ntitle: 扫雷 unity版\ndate: 2017-2-20\ntags:\n- 扫雷\n- Unity\ncategories: UnityScript\n---\n\n\n以前看没想过扫雷的实现，昨天看到一个帖子发的扫雷，写的很恶心，所以自己就尝试了一下，直接新建一个cs脚本复制以下代码就可以了。\n先看看效果\n![扫雷图来源于我的csdn](http://img.blog.csdn.net/20170220105031070?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvQ2hlbmc2MjQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center)\n\n代码：\n``` csharp\n\nusing System.Collections.Generic;\nusing UnityEngine;\n\npublic class MineSweeper : MonoBehaviour\n{\n    public static MineSweeper instance;\n    private GameObject prefab;\n    private List<MineCube> objects; \n\n    public int Row = 5;\n    public int Col = 5;\n    public int Mine = 10;\n    private int totalCount;\n\n    void Start()\n    {\n        instance = this;\n        CreatePrefab();\n        objects = new List<MineCube>();\n    }\n\n    void Create()\n    {\n        //mine总数小于格子数\n        if(Mine > Row*Col) {Debug.LogError(\"Mine's count canot more than grid's count!\");return;}\n        totalCount = Row*Col;\n        //清除所有旧物体\n        int count = objects.Count;\n        for (int i = count-1; i >=0 ; i--)\n        {\n            objects[i].DoDestroy();\n        }\n        objects.Clear();\n        //创建物体\n        for (int i = 0; i < Row; i++)\n        {\n            for (int j = 0; j < Col; j++)\n            {\n                CreateObject(i, j);\n            }\n        }\n        //创建mine\n        CreateMines();\n        //更新数据\n        UpdateMines();\n    }\n\n    void OnGUI()\n    {\n        GUI.Label(new Rect(Screen.width * 0.5f - 100, 0, 200, 30),  \"TotalBlock: \" + Row * Col + \" Mine: \" + Mine);\n        GUI.Label(new Rect(0,0,50,30),\"Row\" );\n        string row = GUI.TextField(new Rect(50, 0, 50, 30), Row.ToString());\n        if (!int.TryParse(row, out Row))\n            Row = 3;\n        GUI.Label(new Rect(0, 35, 50, 30), \"Col\");\n        string col = GUI.TextField(new Rect(50, 35, 50, 30), Col.ToString());\n        if (!int.TryParse(col, out Col))\n            Col = 3;\n        GUI.Label(new Rect(0, 70, 50, 30), \"Mine\");\n        string mine = GUI.TextField(new Rect(50, 70, 50, 30), Mine.ToString());\n        if (!int.TryParse(mine, out Mine))\n            Mine = 3;\n        if(GUI.Button(new Rect(10, 110, 50, 30), \"Create\"))\n            Create();\n\n    }\n\n    /// <summary>\n    /// 创建预制体，附加TextMesh\n    /// </summary>\n    void CreatePrefab()\n    {\n        prefab = GameObject.CreatePrimitive(PrimitiveType.Cube);\n        GameObject text = new GameObject(\"Text\");\n        text.AddComponent<MeshRenderer>();\n        TextMesh txtMesh = text.AddComponent<TextMesh>();\n        text.transform.parent = prefab.transform;\n        text.transform.localPosition = Vector3.zero;\n\n        txtMesh.color = Color.black;\n        txtMesh.anchor = TextAnchor.MiddleCenter;\n        txtMesh.alignment = TextAlignment.Center;\n        txtMesh.fontSize = 10;\n\n        prefab.SetActive(false);\n        prefab.AddComponent<MineCube>();\n        prefab.transform.localScale = Vector3.one * 0.9f;\n    }\n\n    void CreateObject(int x, int y)\n    {\n        GameObject obj = Instantiate(prefab);\n        obj.SetActive(true);\n        MineCube mineCube = obj.GetComponent<MineCube>();\n        mineCube.Set(x, y, objects.Count);\n        objects.Add(mineCube);\n    }\n\n    void CreateMines()\n    {\n        //Mine个不重复随机数\n        List<int> randoms = new List<int>();\n        for (int i = 0; i < Mine; i++)\n        {\n            int r = Random.Range(0, objects.Count-1);\n            while (randoms.Contains(r))\n            {\n                r = (r + 1)%objects.Count;\n            }\n            randoms.Add(r);\n        }\n        //设置mine\n        for (int i = 0; i < Mine; i++)\n        {\n            objects[randoms[i]].SetState(1);\n        }\n    }\n\n    /// <summary>\n    /// （该部分可优化）\n    /// 如果是mine，跳过\n    /// 否则，判断周围是否有mine\n    ///         是：直接统计九宫格内mine 个数\n    ///         否：把周围空格标记\n    /// </summary>\n    void UpdateMines()\n    {\n        for (int i = 0; i < Row; i++)\n        {\n            for (int j = 0; j < Col; j++)\n            {\n                MineCube mine = objects[i*Col + j];\n                if(mine.isMine()) continue;\n                for (int k = i-1; k <= i+1; k++)\n                {\n                    for (int l = j-1; l <= j+1; l++)\n                    {\n                        if(k < 0 || k >= Row || l < 0 || l >= Col) continue;//划定九宫格界限\n                        if(k == i && l == j) continue;//排除自身\n                        if (objects[k*Col + l].isMine())\n                            mine.AddAroundMine();\n                        else\n                            mine.AddAroundBlock(objects[k*Col + l]);\n                    }\n                }\n            }\n        }\n    }\n\n    internal void GameOver()\n    {\n        Debug.Log(\"GameOver!\");\n    }\n\n    /// <summary>\n    /// 点击判断，根据剩下的格子数判断输赢\n    /// </summary>\n    /// <param name=\"ismine\"></param>\n    internal void SendCount(bool ismine)\n    {\n        if (!ismine)\n        {\n            totalCount--;\n            if (totalCount == Mine)\n            {\n                Debug.Log(\"Congratulations! You Win\");\n            }\n        }\n    }\n}\n\n\npublic class MineCube : MonoBehaviour\n{\n    private TextMesh textMesh;\n    private int x;\n    private int y;\n    private int num;\n    private int state;//0空白， 1mine\n    private Material mat;\n\n    public int aroundMine;\n    private List<MineCube> aroundBlock;\n\n    public bool selected;//是否选中\n\n    void Awake()\n    {\n        textMesh = GetComponentInChildren<TextMesh>();\n        mat = GetComponent<Renderer>().material;\n        state = 0;\n        aroundMine = 0;\n        aroundBlock = new List<MineCube>();\n        selected = false;\n    }\n\n    public void OnMouseDown()\n    {\n        if(selected) return;\n        selected = true;//标记选中\n        MineSweeper.instance.SendCount(isMine());\n        Show();\n        if (isMine())//该块是mine则游戏结束\n        {\n            MineSweeper.instance.GameOver();\n            return;\n        }\n    }\n\n    /// <summary>\n    /// 是mine标记X， 不是则判断周围有显示数字，没有则把相邻的所有没有的都显示出来\n    /// </summary>\n    private void Show()\n    {\n        if (isMine())\n        {\n            textMesh.text = \"X\";\n            mat.SetColor(\"_Color\", Color.red);\n        }\n        else\n        {\n            if (aroundMine != 0)\n                textMesh.text = aroundMine.ToString();\n            else\n            {\n                ShowAroundBlock();\n            }\n            mat.SetColor(\"_Color\", Color.gray);\n        }\n\n    }\n\n    /// <summary>\n    /// 显示周围空白格\n    /// </summary>\n    public void ShowAroundBlock()\n    {\n        if (!selected)\n        {\n            this.selected = true;\n            MineSweeper.instance.SendCount(false);\n        }\n        mat.SetColor(\"_Color\", Color.gray);\n        foreach (var _block in aroundBlock)//遍历周围的空白方格\n        {\n            if (!_block.selected && !_block.isMine() && _block.aroundMine == 0)//该方格未被选中且同样和当前方格一样是一个空白的，周围没有mine的\n            {//点击到空白的时要一起显示空白\n                _block.ShowAroundBlock();\n            }\n        }\n    }\n\n\n    /// <summary>\n    /// 鼠标进入时设置颜色、因为创建的预制体有碰撞器，故OnMouse***函数有效\n    /// </summary>\n    public void OnMouseEnter()\n    {\n        mat.SetColor(\"_Color\", Color.green);\n    }\n\n    /// <summary>\n    /// 鼠标退出时恢复原状\n    /// </summary>\n    public void OnMouseExit()\n    {\n        if (selected)\n        {\n            if(!isMine())\n                mat.SetColor(\"_Color\", Color.gray);\n            else\n                mat.SetColor(\"_Color\", Color.red);\n        }\n        else\n            mat.SetColor(\"_Color\", Color.white);\n    }\n    \n\n\n    internal void Set(int x, int y, int num)\n    {\n        this.x = x;\n        this.y = y;\n        this.num = num;\n        transform.position = new Vector3(x, y, 0);\n    }\n\n    internal void DoDestroy()\n    {\n        Destroy(gameObject);\n    }\n\n    /// <summary>\n    /// state 的 0:空白没有mine\n    ///          1:是mine\n    /// </summary>\n    /// <param name=\"p\"></param>\n    internal void SetState(int p)\n    {\n        state = p;\n    }\n\n    /// <summary>\n    /// 判断是否是mine\n    /// </summary>\n    /// <returns></returns>\n    internal bool isMine()\n    {\n        return state == 1;\n    }\n\n    /// <summary>\n    /// 在UpdateMines中用来更新该block周围的Mine数量\n    /// </summary>\n    internal void AddAroundMine()\n    {\n        aroundMine++;\n    }\n\n    /// <summary>\n    /// 当前格为空block时标记周围八个格中没有mine的格\n    /// 用来显示连续显示\n    /// </summary>\n    /// <param name=\"block\"></param>\n    internal void AddAroundBlock(MineCube block)\n    {\n        aroundBlock.Add(block);\n    }\n}\n```\n\n","slug":"扫雷unity版","published":1,"updated":"2017-10-26T10:05:38.869Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj9fm90u600172cobo5xsx1wy","content":"<p>以前看没想过扫雷的实现，昨天看到一个帖子发的扫雷，写的很恶心，所以自己就尝试了一下，直接新建一个cs脚本复制以下代码就可以了。<br>先看看效果<br><img src=\"http://img.blog.csdn.net/20170220105031070?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvQ2hlbmc2MjQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\" alt=\"扫雷图来源于我的csdn\"></p>\n<p>代码：</p>\n<pre class=\"line-numbers language-csharp\"><code class=\"language-csharp\">\n<span class=\"token keyword\">using</span> System<span class=\"token punctuation\">.</span>Collections<span class=\"token punctuation\">.</span>Generic<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> UnityEngine<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MineSweeper</span> <span class=\"token punctuation\">:</span> MonoBehaviour\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> MineSweeper instance<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> GameObject prefab<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> List<span class=\"token operator\">&lt;</span>MineCube<span class=\"token operator\">></span> objects<span class=\"token punctuation\">;</span> \n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> Row <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> Col <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> Mine <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> totalCount<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">void</span> <span class=\"token function\">Start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        instance <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">CreatePrefab</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        objects <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">List</span><span class=\"token operator\">&lt;</span>MineCube<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">void</span> <span class=\"token function\">Create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\" spellcheck=\"true\">//mine总数小于格子数</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>Mine <span class=\"token operator\">></span> Row<span class=\"token operator\">*</span>Col<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>Debug<span class=\"token punctuation\">.</span><span class=\"token function\">LogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Mine's count canot more than grid's count!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span>\n        totalCount <span class=\"token operator\">=</span> Row<span class=\"token operator\">*</span>Col<span class=\"token punctuation\">;</span>\n        <span class=\"token comment\" spellcheck=\"true\">//清除所有旧物体</span>\n        <span class=\"token keyword\">int</span> count <span class=\"token operator\">=</span> objects<span class=\"token punctuation\">.</span>Count<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> count<span class=\"token number\">-1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">>=</span><span class=\"token number\">0</span> <span class=\"token punctuation\">;</span> i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            objects<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">DoDestroy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        objects<span class=\"token punctuation\">.</span><span class=\"token function\">Clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\" spellcheck=\"true\">//创建物体</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> Row<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> Col<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token function\">CreateObject</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\" spellcheck=\"true\">//创建mine</span>\n        <span class=\"token function\">CreateMines</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\" spellcheck=\"true\">//更新数据</span>\n        <span class=\"token function\">UpdateMines</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">void</span> <span class=\"token function\">OnGUI</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        GUI<span class=\"token punctuation\">.</span><span class=\"token function\">Label</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Rect</span><span class=\"token punctuation\">(</span>Screen<span class=\"token punctuation\">.</span>width <span class=\"token operator\">*</span> <span class=\"token number\">0.5f</span> <span class=\"token operator\">-</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>  <span class=\"token string\">\"TotalBlock: \"</span> <span class=\"token operator\">+</span> Row <span class=\"token operator\">*</span> Col <span class=\"token operator\">+</span> <span class=\"token string\">\" Mine: \"</span> <span class=\"token operator\">+</span> Mine<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        GUI<span class=\"token punctuation\">.</span><span class=\"token function\">Label</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Rect</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">50</span><span class=\"token punctuation\">,</span><span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"Row\"</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">string</span> row <span class=\"token operator\">=</span> GUI<span class=\"token punctuation\">.</span><span class=\"token function\">TextField</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Rect</span><span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> Row<span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">.</span><span class=\"token function\">TryParse</span><span class=\"token punctuation\">(</span>row<span class=\"token punctuation\">,</span> <span class=\"token keyword\">out</span> Row<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            Row <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n        GUI<span class=\"token punctuation\">.</span><span class=\"token function\">Label</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Rect</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">35</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Col\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">string</span> col <span class=\"token operator\">=</span> GUI<span class=\"token punctuation\">.</span><span class=\"token function\">TextField</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Rect</span><span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">,</span> <span class=\"token number\">35</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> Col<span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">.</span><span class=\"token function\">TryParse</span><span class=\"token punctuation\">(</span>col<span class=\"token punctuation\">,</span> <span class=\"token keyword\">out</span> Col<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            Col <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n        GUI<span class=\"token punctuation\">.</span><span class=\"token function\">Label</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Rect</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">70</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Mine\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">string</span> mine <span class=\"token operator\">=</span> GUI<span class=\"token punctuation\">.</span><span class=\"token function\">TextField</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Rect</span><span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">,</span> <span class=\"token number\">70</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> Mine<span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">.</span><span class=\"token function\">TryParse</span><span class=\"token punctuation\">(</span>mine<span class=\"token punctuation\">,</span> <span class=\"token keyword\">out</span> Mine<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            Mine <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>GUI<span class=\"token punctuation\">.</span><span class=\"token function\">Button</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Rect</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">110</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Create\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token function\">Create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">/// &lt;summary></span>\n    <span class=\"token comment\" spellcheck=\"true\">/// 创建预制体，附加TextMesh</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// &lt;/summary></span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">CreatePrefab</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        prefab <span class=\"token operator\">=</span> GameObject<span class=\"token punctuation\">.</span><span class=\"token function\">CreatePrimitive</span><span class=\"token punctuation\">(</span>PrimitiveType<span class=\"token punctuation\">.</span>Cube<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        GameObject text <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">GameObject</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Text\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        text<span class=\"token punctuation\">.</span><span class=\"token generic-method function\">AddComponent<span class=\"token punctuation\">&lt;</span>MeshRenderer<span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        TextMesh txtMesh <span class=\"token operator\">=</span> text<span class=\"token punctuation\">.</span><span class=\"token generic-method function\">AddComponent<span class=\"token punctuation\">&lt;</span>TextMesh<span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        text<span class=\"token punctuation\">.</span>transform<span class=\"token punctuation\">.</span>parent <span class=\"token operator\">=</span> prefab<span class=\"token punctuation\">.</span>transform<span class=\"token punctuation\">;</span>\n        text<span class=\"token punctuation\">.</span>transform<span class=\"token punctuation\">.</span>localPosition <span class=\"token operator\">=</span> Vector3<span class=\"token punctuation\">.</span>zero<span class=\"token punctuation\">;</span>\n\n        txtMesh<span class=\"token punctuation\">.</span>color <span class=\"token operator\">=</span> Color<span class=\"token punctuation\">.</span>black<span class=\"token punctuation\">;</span>\n        txtMesh<span class=\"token punctuation\">.</span>anchor <span class=\"token operator\">=</span> TextAnchor<span class=\"token punctuation\">.</span>MiddleCenter<span class=\"token punctuation\">;</span>\n        txtMesh<span class=\"token punctuation\">.</span>alignment <span class=\"token operator\">=</span> TextAlignment<span class=\"token punctuation\">.</span>Center<span class=\"token punctuation\">;</span>\n        txtMesh<span class=\"token punctuation\">.</span>fontSize <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n\n        prefab<span class=\"token punctuation\">.</span><span class=\"token function\">SetActive</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        prefab<span class=\"token punctuation\">.</span><span class=\"token generic-method function\">AddComponent<span class=\"token punctuation\">&lt;</span>MineCube<span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        prefab<span class=\"token punctuation\">.</span>transform<span class=\"token punctuation\">.</span>localScale <span class=\"token operator\">=</span> Vector3<span class=\"token punctuation\">.</span>one <span class=\"token operator\">*</span> <span class=\"token number\">0.9f</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">void</span> <span class=\"token function\">CreateObject</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        GameObject obj <span class=\"token operator\">=</span> <span class=\"token function\">Instantiate</span><span class=\"token punctuation\">(</span>prefab<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        obj<span class=\"token punctuation\">.</span><span class=\"token function\">SetActive</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        MineCube mineCube <span class=\"token operator\">=</span> obj<span class=\"token punctuation\">.</span><span class=\"token generic-method function\">GetComponent<span class=\"token punctuation\">&lt;</span>MineCube<span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        mineCube<span class=\"token punctuation\">.</span><span class=\"token function\">Set</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> objects<span class=\"token punctuation\">.</span>Count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        objects<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>mineCube<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">void</span> <span class=\"token function\">CreateMines</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\" spellcheck=\"true\">//Mine个不重复随机数</span>\n        List<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> randoms <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">List</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> Mine<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">int</span> r <span class=\"token operator\">=</span> Random<span class=\"token punctuation\">.</span><span class=\"token function\">Range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> objects<span class=\"token punctuation\">.</span>Count<span class=\"token number\">-1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>randoms<span class=\"token punctuation\">.</span><span class=\"token function\">Contains</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                r <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>r <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">%</span>objects<span class=\"token punctuation\">.</span>Count<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            randoms<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\" spellcheck=\"true\">//设置mine</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> Mine<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            objects<span class=\"token punctuation\">[</span>randoms<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">SetState</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">/// &lt;summary></span>\n    <span class=\"token comment\" spellcheck=\"true\">/// （该部分可优化）</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// 如果是mine，跳过</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// 否则，判断周围是否有mine</span>\n    <span class=\"token comment\" spellcheck=\"true\">///         是：直接统计九宫格内mine 个数</span>\n    <span class=\"token comment\" spellcheck=\"true\">///         否：把周围空格标记</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// &lt;/summary></span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">UpdateMines</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> Row<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> Col<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                MineCube mine <span class=\"token operator\">=</span> objects<span class=\"token punctuation\">[</span>i<span class=\"token operator\">*</span>Col <span class=\"token operator\">+</span> j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>mine<span class=\"token punctuation\">.</span><span class=\"token function\">isMine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> k <span class=\"token operator\">=</span> i<span class=\"token number\">-1</span><span class=\"token punctuation\">;</span> k <span class=\"token operator\">&lt;=</span> i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> k<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> l <span class=\"token operator\">=</span> j<span class=\"token number\">-1</span><span class=\"token punctuation\">;</span> l <span class=\"token operator\">&lt;=</span> j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> l<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">{</span>\n                        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>k <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> k <span class=\"token operator\">>=</span> Row <span class=\"token operator\">||</span> l <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> l <span class=\"token operator\">>=</span> Col<span class=\"token punctuation\">)</span> <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//划定九宫格界限</span>\n                        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>k <span class=\"token operator\">==</span> i <span class=\"token operator\">&amp;&amp;</span> l <span class=\"token operator\">==</span> j<span class=\"token punctuation\">)</span> <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//排除自身</span>\n                        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>objects<span class=\"token punctuation\">[</span>k<span class=\"token operator\">*</span>Col <span class=\"token operator\">+</span> l<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">isMine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                            mine<span class=\"token punctuation\">.</span><span class=\"token function\">AddAroundMine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token keyword\">else</span>\n                            mine<span class=\"token punctuation\">.</span><span class=\"token function\">AddAroundBlock</span><span class=\"token punctuation\">(</span>objects<span class=\"token punctuation\">[</span>k<span class=\"token operator\">*</span>Col <span class=\"token operator\">+</span> l<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">internal</span> <span class=\"token keyword\">void</span> <span class=\"token function\">GameOver</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        Debug<span class=\"token punctuation\">.</span><span class=\"token function\">Log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"GameOver!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">/// &lt;summary></span>\n    <span class=\"token comment\" spellcheck=\"true\">/// 点击判断，根据剩下的格子数判断输赢</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// &lt;/summary></span>\n    <span class=\"token comment\" spellcheck=\"true\">/// &lt;param name=\"ismine\">&lt;/param></span>\n    <span class=\"token keyword\">internal</span> <span class=\"token keyword\">void</span> <span class=\"token function\">SendCount</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">bool</span> ismine<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>ismine<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            totalCount<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>totalCount <span class=\"token operator\">==</span> Mine<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                Debug<span class=\"token punctuation\">.</span><span class=\"token function\">Log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Congratulations! You Win\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MineCube</span> <span class=\"token punctuation\">:</span> MonoBehaviour\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> TextMesh textMesh<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> x<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> num<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> state<span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//0空白， 1mine</span>\n    <span class=\"token keyword\">private</span> Material mat<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> aroundMine<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> List<span class=\"token operator\">&lt;</span>MineCube<span class=\"token operator\">></span> aroundBlock<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">bool</span> selected<span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//是否选中</span>\n\n    <span class=\"token keyword\">void</span> <span class=\"token function\">Awake</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        textMesh <span class=\"token operator\">=</span> <span class=\"token generic-method function\">GetComponentInChildren<span class=\"token punctuation\">&lt;</span>TextMesh<span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        mat <span class=\"token operator\">=</span> <span class=\"token generic-method function\">GetComponent<span class=\"token punctuation\">&lt;</span>Renderer<span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>material<span class=\"token punctuation\">;</span>\n        state <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        aroundMine <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        aroundBlock <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">List</span><span class=\"token operator\">&lt;</span>MineCube<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        selected <span class=\"token operator\">=</span> <span class=\"token keyword\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">OnMouseDown</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>selected<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        selected <span class=\"token operator\">=</span> <span class=\"token keyword\">true</span><span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//标记选中</span>\n        MineSweeper<span class=\"token punctuation\">.</span>instance<span class=\"token punctuation\">.</span><span class=\"token function\">SendCount</span><span class=\"token punctuation\">(</span><span class=\"token function\">isMine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">Show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isMine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token comment\" spellcheck=\"true\">//该块是mine则游戏结束</span>\n        <span class=\"token punctuation\">{</span>\n            MineSweeper<span class=\"token punctuation\">.</span>instance<span class=\"token punctuation\">.</span><span class=\"token function\">GameOver</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">/// &lt;summary></span>\n    <span class=\"token comment\" spellcheck=\"true\">/// 是mine标记X， 不是则判断周围有显示数字，没有则把相邻的所有没有的都显示出来</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// &lt;/summary></span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">Show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isMine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            textMesh<span class=\"token punctuation\">.</span>text <span class=\"token operator\">=</span> <span class=\"token string\">\"X\"</span><span class=\"token punctuation\">;</span>\n            mat<span class=\"token punctuation\">.</span><span class=\"token function\">SetColor</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"_Color\"</span><span class=\"token punctuation\">,</span> Color<span class=\"token punctuation\">.</span>red<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">else</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>aroundMine <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n                textMesh<span class=\"token punctuation\">.</span>text <span class=\"token operator\">=</span> aroundMine<span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">else</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token function\">ShowAroundBlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            mat<span class=\"token punctuation\">.</span><span class=\"token function\">SetColor</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"_Color\"</span><span class=\"token punctuation\">,</span> Color<span class=\"token punctuation\">.</span>gray<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">/// &lt;summary></span>\n    <span class=\"token comment\" spellcheck=\"true\">/// 显示周围空白格</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// &lt;/summary></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">ShowAroundBlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>selected<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>selected <span class=\"token operator\">=</span> <span class=\"token keyword\">true</span><span class=\"token punctuation\">;</span>\n            MineSweeper<span class=\"token punctuation\">.</span>instance<span class=\"token punctuation\">.</span><span class=\"token function\">SendCount</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        mat<span class=\"token punctuation\">.</span><span class=\"token function\">SetColor</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"_Color\"</span><span class=\"token punctuation\">,</span> Color<span class=\"token punctuation\">.</span>gray<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> _block <span class=\"token keyword\">in</span> aroundBlock<span class=\"token punctuation\">)</span><span class=\"token comment\" spellcheck=\"true\">//遍历周围的空白方格</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>_block<span class=\"token punctuation\">.</span>selected <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>_block<span class=\"token punctuation\">.</span><span class=\"token function\">isMine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> _block<span class=\"token punctuation\">.</span>aroundMine <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token comment\" spellcheck=\"true\">//该方格未被选中且同样和当前方格一样是一个空白的，周围没有mine的</span>\n            <span class=\"token punctuation\">{</span><span class=\"token comment\" spellcheck=\"true\">//点击到空白的时要一起显示空白</span>\n                _block<span class=\"token punctuation\">.</span><span class=\"token function\">ShowAroundBlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n\n    <span class=\"token comment\" spellcheck=\"true\">/// &lt;summary></span>\n    <span class=\"token comment\" spellcheck=\"true\">/// 鼠标进入时设置颜色、因为创建的预制体有碰撞器，故OnMouse***函数有效</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// &lt;/summary></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">OnMouseEnter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        mat<span class=\"token punctuation\">.</span><span class=\"token function\">SetColor</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"_Color\"</span><span class=\"token punctuation\">,</span> Color<span class=\"token punctuation\">.</span>green<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">/// &lt;summary></span>\n    <span class=\"token comment\" spellcheck=\"true\">/// 鼠标退出时恢复原状</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// &lt;/summary></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">OnMouseExit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>selected<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">isMine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                mat<span class=\"token punctuation\">.</span><span class=\"token function\">SetColor</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"_Color\"</span><span class=\"token punctuation\">,</span> Color<span class=\"token punctuation\">.</span>gray<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">else</span>\n                mat<span class=\"token punctuation\">.</span><span class=\"token function\">SetColor</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"_Color\"</span><span class=\"token punctuation\">,</span> Color<span class=\"token punctuation\">.</span>red<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">else</span>\n            mat<span class=\"token punctuation\">.</span><span class=\"token function\">SetColor</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"_Color\"</span><span class=\"token punctuation\">,</span> Color<span class=\"token punctuation\">.</span>white<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n\n\n    <span class=\"token keyword\">internal</span> <span class=\"token keyword\">void</span> <span class=\"token function\">Set</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> num<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>y <span class=\"token operator\">=</span> y<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>num <span class=\"token operator\">=</span> num<span class=\"token punctuation\">;</span>\n        transform<span class=\"token punctuation\">.</span>position <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Vector3</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">internal</span> <span class=\"token keyword\">void</span> <span class=\"token function\">DoDestroy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">Destroy</span><span class=\"token punctuation\">(</span>gameObject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">/// &lt;summary></span>\n    <span class=\"token comment\" spellcheck=\"true\">/// state 的 0:空白没有mine</span>\n    <span class=\"token comment\" spellcheck=\"true\">///          1:是mine</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// &lt;/summary></span>\n    <span class=\"token comment\" spellcheck=\"true\">/// &lt;param name=\"p\">&lt;/param></span>\n    <span class=\"token keyword\">internal</span> <span class=\"token keyword\">void</span> <span class=\"token function\">SetState</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> p<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        state <span class=\"token operator\">=</span> p<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">/// &lt;summary></span>\n    <span class=\"token comment\" spellcheck=\"true\">/// 判断是否是mine</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// &lt;/summary></span>\n    <span class=\"token comment\" spellcheck=\"true\">/// &lt;returns>&lt;/returns></span>\n    <span class=\"token keyword\">internal</span> <span class=\"token keyword\">bool</span> <span class=\"token function\">isMine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> state <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">/// &lt;summary></span>\n    <span class=\"token comment\" spellcheck=\"true\">/// 在UpdateMines中用来更新该block周围的Mine数量</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// &lt;/summary></span>\n    <span class=\"token keyword\">internal</span> <span class=\"token keyword\">void</span> <span class=\"token function\">AddAroundMine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        aroundMine<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">/// &lt;summary></span>\n    <span class=\"token comment\" spellcheck=\"true\">/// 当前格为空block时标记周围八个格中没有mine的格</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// 用来显示连续显示</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// &lt;/summary></span>\n    <span class=\"token comment\" spellcheck=\"true\">/// &lt;param name=\"block\">&lt;/param></span>\n    <span class=\"token keyword\">internal</span> <span class=\"token keyword\">void</span> <span class=\"token function\">AddAroundBlock</span><span class=\"token punctuation\">(</span>MineCube block<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        aroundBlock<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>block<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{"gallery":{"美女":{"full_link":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1508912200438&di=d5b3eacf86d8f94c149c6fc68fe4da67&imgtype=0&src=http%3A%2F%2Fpic01.taopic.com%2F151014%2F234732-15101410452229-lp.jpg","thumb_link":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1508912200438&di=d5b3eacf86d8f94c149c6fc68fe4da67&imgtype=0&src=http%3A%2F%2Fpic01.taopic.com%2F151014%2F234732-15101410452229-lp.jpg","descr":"美女插画"}},"links":{"Github":{"link":"https://github.com/garsonlab","avatar":"https://avatars3.githubusercontent.com/u/13958934?s=460&v=4","descr":"My Github","type":"Blog"},"OnLineTools":{"link":"http://tool.lu/","avatar":"http://qn11.tool.lu/201710/15/103320SbM84Ql4tETjg49a_28x28.png","descr":"在线工具","type":"Tools"},"CMDMarkdown":{"link":"https://www.zybuluo.com/","avatar":"https://www.zybuluo.com/static/img/logo.png","descr":"Markdown在线编辑","type":"Tools"},"Hexo文档":{"link":"https://hexo.io/zh-cn/docs/","avatar":"https://hexo.io/logo.svg","descr":"Hexo中文官方文档","type":"Community"},"游戏蛮牛":{"link":"http://www.manew.com/forum.php","avatar":"http://www.manew.com/template/manew2016/images/logo.png","descr":"unity交流社区","type":"Unity"},"FairyGUI":{"link":"http://www.fairygui.com/","avatar":"http://www.fairygui.com/images/20170728151207.png","descr":"FairyGUI官方网站","type":"Site"}},"linktypes":{"Blog":{"name":"关注的博客"},"Unity":{"name":"Unity3D"},"Community":{"name":"浏览的社区"},"Tools":{"name":"工具"},"Site":{"name":"收藏的网址"}}}},"excerpt":"","more":"<p>以前看没想过扫雷的实现，昨天看到一个帖子发的扫雷，写的很恶心，所以自己就尝试了一下，直接新建一个cs脚本复制以下代码就可以了。<br>先看看效果<br><img src=\"http://img.blog.csdn.net/20170220105031070?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvQ2hlbmc2MjQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\" alt=\"扫雷图来源于我的csdn\"></p>\n<p>代码：</p>\n<pre><code class=\"csharp\">\nusing System.Collections.Generic;\nusing UnityEngine;\n\npublic class MineSweeper : MonoBehaviour\n{\n    public static MineSweeper instance;\n    private GameObject prefab;\n    private List&lt;MineCube&gt; objects; \n\n    public int Row = 5;\n    public int Col = 5;\n    public int Mine = 10;\n    private int totalCount;\n\n    void Start()\n    {\n        instance = this;\n        CreatePrefab();\n        objects = new List&lt;MineCube&gt;();\n    }\n\n    void Create()\n    {\n        //mine总数小于格子数\n        if(Mine &gt; Row*Col) {Debug.LogError(&quot;Mine&#39;s count canot more than grid&#39;s count!&quot;);return;}\n        totalCount = Row*Col;\n        //清除所有旧物体\n        int count = objects.Count;\n        for (int i = count-1; i &gt;=0 ; i--)\n        {\n            objects[i].DoDestroy();\n        }\n        objects.Clear();\n        //创建物体\n        for (int i = 0; i &lt; Row; i++)\n        {\n            for (int j = 0; j &lt; Col; j++)\n            {\n                CreateObject(i, j);\n            }\n        }\n        //创建mine\n        CreateMines();\n        //更新数据\n        UpdateMines();\n    }\n\n    void OnGUI()\n    {\n        GUI.Label(new Rect(Screen.width * 0.5f - 100, 0, 200, 30),  &quot;TotalBlock: &quot; + Row * Col + &quot; Mine: &quot; + Mine);\n        GUI.Label(new Rect(0,0,50,30),&quot;Row&quot; );\n        string row = GUI.TextField(new Rect(50, 0, 50, 30), Row.ToString());\n        if (!int.TryParse(row, out Row))\n            Row = 3;\n        GUI.Label(new Rect(0, 35, 50, 30), &quot;Col&quot;);\n        string col = GUI.TextField(new Rect(50, 35, 50, 30), Col.ToString());\n        if (!int.TryParse(col, out Col))\n            Col = 3;\n        GUI.Label(new Rect(0, 70, 50, 30), &quot;Mine&quot;);\n        string mine = GUI.TextField(new Rect(50, 70, 50, 30), Mine.ToString());\n        if (!int.TryParse(mine, out Mine))\n            Mine = 3;\n        if(GUI.Button(new Rect(10, 110, 50, 30), &quot;Create&quot;))\n            Create();\n\n    }\n\n    /// &lt;summary&gt;\n    /// 创建预制体，附加TextMesh\n    /// &lt;/summary&gt;\n    void CreatePrefab()\n    {\n        prefab = GameObject.CreatePrimitive(PrimitiveType.Cube);\n        GameObject text = new GameObject(&quot;Text&quot;);\n        text.AddComponent&lt;MeshRenderer&gt;();\n        TextMesh txtMesh = text.AddComponent&lt;TextMesh&gt;();\n        text.transform.parent = prefab.transform;\n        text.transform.localPosition = Vector3.zero;\n\n        txtMesh.color = Color.black;\n        txtMesh.anchor = TextAnchor.MiddleCenter;\n        txtMesh.alignment = TextAlignment.Center;\n        txtMesh.fontSize = 10;\n\n        prefab.SetActive(false);\n        prefab.AddComponent&lt;MineCube&gt;();\n        prefab.transform.localScale = Vector3.one * 0.9f;\n    }\n\n    void CreateObject(int x, int y)\n    {\n        GameObject obj = Instantiate(prefab);\n        obj.SetActive(true);\n        MineCube mineCube = obj.GetComponent&lt;MineCube&gt;();\n        mineCube.Set(x, y, objects.Count);\n        objects.Add(mineCube);\n    }\n\n    void CreateMines()\n    {\n        //Mine个不重复随机数\n        List&lt;int&gt; randoms = new List&lt;int&gt;();\n        for (int i = 0; i &lt; Mine; i++)\n        {\n            int r = Random.Range(0, objects.Count-1);\n            while (randoms.Contains(r))\n            {\n                r = (r + 1)%objects.Count;\n            }\n            randoms.Add(r);\n        }\n        //设置mine\n        for (int i = 0; i &lt; Mine; i++)\n        {\n            objects[randoms[i]].SetState(1);\n        }\n    }\n\n    /// &lt;summary&gt;\n    /// （该部分可优化）\n    /// 如果是mine，跳过\n    /// 否则，判断周围是否有mine\n    ///         是：直接统计九宫格内mine 个数\n    ///         否：把周围空格标记\n    /// &lt;/summary&gt;\n    void UpdateMines()\n    {\n        for (int i = 0; i &lt; Row; i++)\n        {\n            for (int j = 0; j &lt; Col; j++)\n            {\n                MineCube mine = objects[i*Col + j];\n                if(mine.isMine()) continue;\n                for (int k = i-1; k &lt;= i+1; k++)\n                {\n                    for (int l = j-1; l &lt;= j+1; l++)\n                    {\n                        if(k &lt; 0 || k &gt;= Row || l &lt; 0 || l &gt;= Col) continue;//划定九宫格界限\n                        if(k == i &amp;&amp; l == j) continue;//排除自身\n                        if (objects[k*Col + l].isMine())\n                            mine.AddAroundMine();\n                        else\n                            mine.AddAroundBlock(objects[k*Col + l]);\n                    }\n                }\n            }\n        }\n    }\n\n    internal void GameOver()\n    {\n        Debug.Log(&quot;GameOver!&quot;);\n    }\n\n    /// &lt;summary&gt;\n    /// 点击判断，根据剩下的格子数判断输赢\n    /// &lt;/summary&gt;\n    /// &lt;param name=&quot;ismine&quot;&gt;&lt;/param&gt;\n    internal void SendCount(bool ismine)\n    {\n        if (!ismine)\n        {\n            totalCount--;\n            if (totalCount == Mine)\n            {\n                Debug.Log(&quot;Congratulations! You Win&quot;);\n            }\n        }\n    }\n}\n\n\npublic class MineCube : MonoBehaviour\n{\n    private TextMesh textMesh;\n    private int x;\n    private int y;\n    private int num;\n    private int state;//0空白， 1mine\n    private Material mat;\n\n    public int aroundMine;\n    private List&lt;MineCube&gt; aroundBlock;\n\n    public bool selected;//是否选中\n\n    void Awake()\n    {\n        textMesh = GetComponentInChildren&lt;TextMesh&gt;();\n        mat = GetComponent&lt;Renderer&gt;().material;\n        state = 0;\n        aroundMine = 0;\n        aroundBlock = new List&lt;MineCube&gt;();\n        selected = false;\n    }\n\n    public void OnMouseDown()\n    {\n        if(selected) return;\n        selected = true;//标记选中\n        MineSweeper.instance.SendCount(isMine());\n        Show();\n        if (isMine())//该块是mine则游戏结束\n        {\n            MineSweeper.instance.GameOver();\n            return;\n        }\n    }\n\n    /// &lt;summary&gt;\n    /// 是mine标记X， 不是则判断周围有显示数字，没有则把相邻的所有没有的都显示出来\n    /// &lt;/summary&gt;\n    private void Show()\n    {\n        if (isMine())\n        {\n            textMesh.text = &quot;X&quot;;\n            mat.SetColor(&quot;_Color&quot;, Color.red);\n        }\n        else\n        {\n            if (aroundMine != 0)\n                textMesh.text = aroundMine.ToString();\n            else\n            {\n                ShowAroundBlock();\n            }\n            mat.SetColor(&quot;_Color&quot;, Color.gray);\n        }\n\n    }\n\n    /// &lt;summary&gt;\n    /// 显示周围空白格\n    /// &lt;/summary&gt;\n    public void ShowAroundBlock()\n    {\n        if (!selected)\n        {\n            this.selected = true;\n            MineSweeper.instance.SendCount(false);\n        }\n        mat.SetColor(&quot;_Color&quot;, Color.gray);\n        foreach (var _block in aroundBlock)//遍历周围的空白方格\n        {\n            if (!_block.selected &amp;&amp; !_block.isMine() &amp;&amp; _block.aroundMine == 0)//该方格未被选中且同样和当前方格一样是一个空白的，周围没有mine的\n            {//点击到空白的时要一起显示空白\n                _block.ShowAroundBlock();\n            }\n        }\n    }\n\n\n    /// &lt;summary&gt;\n    /// 鼠标进入时设置颜色、因为创建的预制体有碰撞器，故OnMouse***函数有效\n    /// &lt;/summary&gt;\n    public void OnMouseEnter()\n    {\n        mat.SetColor(&quot;_Color&quot;, Color.green);\n    }\n\n    /// &lt;summary&gt;\n    /// 鼠标退出时恢复原状\n    /// &lt;/summary&gt;\n    public void OnMouseExit()\n    {\n        if (selected)\n        {\n            if(!isMine())\n                mat.SetColor(&quot;_Color&quot;, Color.gray);\n            else\n                mat.SetColor(&quot;_Color&quot;, Color.red);\n        }\n        else\n            mat.SetColor(&quot;_Color&quot;, Color.white);\n    }\n\n\n\n    internal void Set(int x, int y, int num)\n    {\n        this.x = x;\n        this.y = y;\n        this.num = num;\n        transform.position = new Vector3(x, y, 0);\n    }\n\n    internal void DoDestroy()\n    {\n        Destroy(gameObject);\n    }\n\n    /// &lt;summary&gt;\n    /// state 的 0:空白没有mine\n    ///          1:是mine\n    /// &lt;/summary&gt;\n    /// &lt;param name=&quot;p&quot;&gt;&lt;/param&gt;\n    internal void SetState(int p)\n    {\n        state = p;\n    }\n\n    /// &lt;summary&gt;\n    /// 判断是否是mine\n    /// &lt;/summary&gt;\n    /// &lt;returns&gt;&lt;/returns&gt;\n    internal bool isMine()\n    {\n        return state == 1;\n    }\n\n    /// &lt;summary&gt;\n    /// 在UpdateMines中用来更新该block周围的Mine数量\n    /// &lt;/summary&gt;\n    internal void AddAroundMine()\n    {\n        aroundMine++;\n    }\n\n    /// &lt;summary&gt;\n    /// 当前格为空block时标记周围八个格中没有mine的格\n    /// 用来显示连续显示\n    /// &lt;/summary&gt;\n    /// &lt;param name=&quot;block&quot;&gt;&lt;/param&gt;\n    internal void AddAroundBlock(MineCube block)\n    {\n        aroundBlock.Add(block);\n    }\n}\n</code></pre>\n"},{"title":"摇摆的小草——顶点动画","date":"2017-03-22T16:00:00.000Z","_content":"\nShader 动画的主要点在坐标变换，代码：\n\n``` cpp\n\nShader \"Custom/Grass\" {\n\tProperties {\n\t\t_MainTex (\"Grass Texture\", 2D) = \"white\" {}\n\t\t_TimeScale (\"Time Scale\", float) = 1\n\t}\n\n\tSubShader{\n\t\tTags{\"Queue\"=\"Transparent\" \"RenderType\"=\"Opaque\" \"IgnoreProject\"=\"True\"}\n\t\tPass{\n\t\t\tTags{\"LightMode\"=\"ForwardBase\"}\n\n\t\t\tZWrite Off\n\t\t\tBlend SrcAlpha OneMinusSrcAlpha\n\t\t\tCull Off\n\n\t\t\tCGPROGRAM\n\t\t\t#pragma vertex vert\n\t\t\t#pragma fragment frag\n\t\t\t#include \"UnityCG.cginc\" \n\n\t\t\tsampler2D _MainTex;\n\t\t\thalf _TimeScale;\n\n\t\t\tstruct a2v {\n\t\t\t\tfloat4 vertex : POSITION;\n\t\t\t\tfloat4 texcoord : TEXCOORD0;\n\t\t\t};\n\t\t\t\n\t\t\tstruct v2f {\n\t\t\t\tfloat4 pos : SV_POSITION;\n\t\t\t\tfloat2 uv : TEXCOORD0;\n\t\t\t};\n\n\n\t\t\tv2f vert(a2v v){\n\t\t\t\tv2f o;\n\t\t\t\tfloat4 offset = float4(0,0,0,0);\n\t\t\t\toffset.x = sin(3.1416 * _Time.y * clamp(v.texcoord.y-0.5, 0, 1))  * _TimeScale;\n\t\t\t\to.pos = mul(UNITY_MATRIX_MVP, v.vertex + offset);\n\t\t\t\to.uv = v.texcoord.xy;\n\t\t\t\treturn o;\n\t\t\t}\n\n\t\t\tfixed4 frag(v2f i) : SV_Target{\n\t\t\t\treturn tex2D(_MainTex, i.uv);\n\t\t\t}\n\n\t\t\tENDCG\n\t\t}\n\t}\n\tFallBack Off\n}\n\n```\n\nShader中设置渲染队列为 Transparent， 如果需要batch场景中模型的话需要在 Tags 中加上 “DisableBatching=True”， 不允许批处理。\n关闭深度写入 Zwrite off。 关闭剔除，渲染双面Cull Off。开启混合为了显示透明 Blend SrcAlpha OneMinusSrcAlpha。\n\nvertex函数中， 必须把坐标转换成视觉空间， 所以我们把操作就集中在这里，我的想法是： \n草是延 Y 轴生长的， 而且根不能动。所以，在判断当前的坐标有两种情况：\n1， 如果 y 坐标靠近 0 时，我们认为他是根部，根部不需要改变。\n2， 其他高度， y  需要沿着某个方向做来回的摇摆pingpong运动。\n\n![图片来源我的csdn](http://img.blog.csdn.net/20170323164133449?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvQ2hlbmc2MjQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center)\n\n当把根部看做原点，草的运动可以当成正弦函数， 取坐标距离底部的距离做一个限制，使底部摆动小clamp(v.texcoord.y-0.5, 0, 1)。 clamp(x, a, b) 的作用时当 x< a时 x=a， 当x > b 时 x=b。\n我们做一个x方向的偏移（也可以z），sin(3.1416 * _Time.y * clamp(v.texcoord.y-0.5, 0, 1))， _Time是一个时间变化量，最后在乘上一个我们偏移的最大距离 _TimeScale即可。\n最后，把SV_POSITION寄存器中的坐标设置为原本的坐标vertex 加上便宜坐标offset 后的转换。\n\n![图片来源我的csdn](http://img.blog.csdn.net/20170323165203481?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvQ2hlbmc2MjQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center)\n","source":"_posts/摇摆的小草——顶点动画.md","raw":"---\ntitle: 摇摆的小草——顶点动画\ndate: 2017-3-23\ntags:\n- Shader\n- Unity\ncategories: UnityShader\n---\n\nShader 动画的主要点在坐标变换，代码：\n\n``` cpp\n\nShader \"Custom/Grass\" {\n\tProperties {\n\t\t_MainTex (\"Grass Texture\", 2D) = \"white\" {}\n\t\t_TimeScale (\"Time Scale\", float) = 1\n\t}\n\n\tSubShader{\n\t\tTags{\"Queue\"=\"Transparent\" \"RenderType\"=\"Opaque\" \"IgnoreProject\"=\"True\"}\n\t\tPass{\n\t\t\tTags{\"LightMode\"=\"ForwardBase\"}\n\n\t\t\tZWrite Off\n\t\t\tBlend SrcAlpha OneMinusSrcAlpha\n\t\t\tCull Off\n\n\t\t\tCGPROGRAM\n\t\t\t#pragma vertex vert\n\t\t\t#pragma fragment frag\n\t\t\t#include \"UnityCG.cginc\" \n\n\t\t\tsampler2D _MainTex;\n\t\t\thalf _TimeScale;\n\n\t\t\tstruct a2v {\n\t\t\t\tfloat4 vertex : POSITION;\n\t\t\t\tfloat4 texcoord : TEXCOORD0;\n\t\t\t};\n\t\t\t\n\t\t\tstruct v2f {\n\t\t\t\tfloat4 pos : SV_POSITION;\n\t\t\t\tfloat2 uv : TEXCOORD0;\n\t\t\t};\n\n\n\t\t\tv2f vert(a2v v){\n\t\t\t\tv2f o;\n\t\t\t\tfloat4 offset = float4(0,0,0,0);\n\t\t\t\toffset.x = sin(3.1416 * _Time.y * clamp(v.texcoord.y-0.5, 0, 1))  * _TimeScale;\n\t\t\t\to.pos = mul(UNITY_MATRIX_MVP, v.vertex + offset);\n\t\t\t\to.uv = v.texcoord.xy;\n\t\t\t\treturn o;\n\t\t\t}\n\n\t\t\tfixed4 frag(v2f i) : SV_Target{\n\t\t\t\treturn tex2D(_MainTex, i.uv);\n\t\t\t}\n\n\t\t\tENDCG\n\t\t}\n\t}\n\tFallBack Off\n}\n\n```\n\nShader中设置渲染队列为 Transparent， 如果需要batch场景中模型的话需要在 Tags 中加上 “DisableBatching=True”， 不允许批处理。\n关闭深度写入 Zwrite off。 关闭剔除，渲染双面Cull Off。开启混合为了显示透明 Blend SrcAlpha OneMinusSrcAlpha。\n\nvertex函数中， 必须把坐标转换成视觉空间， 所以我们把操作就集中在这里，我的想法是： \n草是延 Y 轴生长的， 而且根不能动。所以，在判断当前的坐标有两种情况：\n1， 如果 y 坐标靠近 0 时，我们认为他是根部，根部不需要改变。\n2， 其他高度， y  需要沿着某个方向做来回的摇摆pingpong运动。\n\n![图片来源我的csdn](http://img.blog.csdn.net/20170323164133449?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvQ2hlbmc2MjQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center)\n\n当把根部看做原点，草的运动可以当成正弦函数， 取坐标距离底部的距离做一个限制，使底部摆动小clamp(v.texcoord.y-0.5, 0, 1)。 clamp(x, a, b) 的作用时当 x< a时 x=a， 当x > b 时 x=b。\n我们做一个x方向的偏移（也可以z），sin(3.1416 * _Time.y * clamp(v.texcoord.y-0.5, 0, 1))， _Time是一个时间变化量，最后在乘上一个我们偏移的最大距离 _TimeScale即可。\n最后，把SV_POSITION寄存器中的坐标设置为原本的坐标vertex 加上便宜坐标offset 后的转换。\n\n![图片来源我的csdn](http://img.blog.csdn.net/20170323165203481?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvQ2hlbmc2MjQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center)\n","slug":"摇摆的小草——顶点动画","published":1,"updated":"2017-10-26T10:47:40.677Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj9fm90u9001b2cob40wnwbik","content":"<p>Shader 动画的主要点在坐标变换，代码：</p>\n<pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\">\nShader <span class=\"token string\">\"Custom/Grass\"</span> <span class=\"token punctuation\">{</span>\n    Properties <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">_MainTex</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"Grass Texture\"</span><span class=\"token punctuation\">,</span> 2D<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"white\"</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n        <span class=\"token function\">_TimeScale</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"Time Scale\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n    <span class=\"token punctuation\">}</span>\n\n    SubShader<span class=\"token punctuation\">{</span>\n        Tags<span class=\"token punctuation\">{</span><span class=\"token string\">\"Queue\"</span><span class=\"token operator\">=</span><span class=\"token string\">\"Transparent\"</span> <span class=\"token string\">\"RenderType\"</span><span class=\"token operator\">=</span><span class=\"token string\">\"Opaque\"</span> <span class=\"token string\">\"IgnoreProject\"</span><span class=\"token operator\">=</span><span class=\"token string\">\"True\"</span><span class=\"token punctuation\">}</span>\n        Pass<span class=\"token punctuation\">{</span>\n            Tags<span class=\"token punctuation\">{</span><span class=\"token string\">\"LightMode\"</span><span class=\"token operator\">=</span><span class=\"token string\">\"ForwardBase\"</span><span class=\"token punctuation\">}</span>\n\n            ZWrite Off\n            Blend SrcAlpha OneMinusSrcAlpha\n            Cull Off\n\n            CGPROGRAM\n            <span class=\"token macro property\">#<span class=\"token directive keyword\">pragma</span> vertex vert</span>\n            <span class=\"token macro property\">#<span class=\"token directive keyword\">pragma</span> fragment frag</span>\n            <span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"UnityCG.cginc\"</span> </span>\n\n            sampler2D _MainTex<span class=\"token punctuation\">;</span>\n            half _TimeScale<span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">struct</span> a2v <span class=\"token punctuation\">{</span>\n                float4 vertex <span class=\"token operator\">:</span> POSITION<span class=\"token punctuation\">;</span>\n                float4 texcoord <span class=\"token operator\">:</span> TEXCOORD0<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">struct</span> v2f <span class=\"token punctuation\">{</span>\n                float4 pos <span class=\"token operator\">:</span> SV_POSITION<span class=\"token punctuation\">;</span>\n                float2 uv <span class=\"token operator\">:</span> TEXCOORD0<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n\n            v2f <span class=\"token function\">vert</span><span class=\"token punctuation\">(</span>a2v v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                v2f o<span class=\"token punctuation\">;</span>\n                float4 offset <span class=\"token operator\">=</span> <span class=\"token function\">float4</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                offset<span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> <span class=\"token function\">sin</span><span class=\"token punctuation\">(</span><span class=\"token number\">3.1416</span> <span class=\"token operator\">*</span> _Time<span class=\"token punctuation\">.</span>y <span class=\"token operator\">*</span> <span class=\"token function\">clamp</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">.</span>texcoord<span class=\"token punctuation\">.</span>y<span class=\"token number\">-0.5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token operator\">*</span> _TimeScale<span class=\"token punctuation\">;</span>\n                o<span class=\"token punctuation\">.</span>pos <span class=\"token operator\">=</span> <span class=\"token function\">mul</span><span class=\"token punctuation\">(</span>UNITY_MATRIX_MVP<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">.</span>vertex <span class=\"token operator\">+</span> offset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                o<span class=\"token punctuation\">.</span>uv <span class=\"token operator\">=</span> v<span class=\"token punctuation\">.</span>texcoord<span class=\"token punctuation\">.</span>xy<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">return</span> o<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            fixed4 <span class=\"token function\">frag</span><span class=\"token punctuation\">(</span>v2f i<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> SV_Target<span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span> <span class=\"token function\">tex2D</span><span class=\"token punctuation\">(</span>_MainTex<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">.</span>uv<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            ENDCG\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    FallBack Off\n<span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>Shader中设置渲染队列为 Transparent， 如果需要batch场景中模型的话需要在 Tags 中加上 “DisableBatching=True”， 不允许批处理。<br>关闭深度写入 Zwrite off。 关闭剔除，渲染双面Cull Off。开启混合为了显示透明 Blend SrcAlpha OneMinusSrcAlpha。</p>\n<p>vertex函数中， 必须把坐标转换成视觉空间， 所以我们把操作就集中在这里，我的想法是：<br>草是延 Y 轴生长的， 而且根不能动。所以，在判断当前的坐标有两种情况：<br>1， 如果 y 坐标靠近 0 时，我们认为他是根部，根部不需要改变。<br>2， 其他高度， y  需要沿着某个方向做来回的摇摆pingpong运动。</p>\n<p><img src=\"http://img.blog.csdn.net/20170323164133449?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvQ2hlbmc2MjQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\" alt=\"图片来源我的csdn\"></p>\n<p>当把根部看做原点，草的运动可以当成正弦函数， 取坐标距离底部的距离做一个限制，使底部摆动小clamp(v.texcoord.y-0.5, 0, 1)。 clamp(x, a, b) 的作用时当 x&lt; a时 x=a， 当x &gt; b 时 x=b。<br>我们做一个x方向的偏移（也可以z），sin(3.1416 <em> _Time.y </em> clamp(v.texcoord.y-0.5, 0, 1))， _Time是一个时间变化量，最后在乘上一个我们偏移的最大距离 _TimeScale即可。<br>最后，把SV_POSITION寄存器中的坐标设置为原本的坐标vertex 加上便宜坐标offset 后的转换。</p>\n<p><img src=\"http://img.blog.csdn.net/20170323165203481?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvQ2hlbmc2MjQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\" alt=\"图片来源我的csdn\"></p>\n","site":{"data":{"gallery":{"美女":{"full_link":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1508912200438&di=d5b3eacf86d8f94c149c6fc68fe4da67&imgtype=0&src=http%3A%2F%2Fpic01.taopic.com%2F151014%2F234732-15101410452229-lp.jpg","thumb_link":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1508912200438&di=d5b3eacf86d8f94c149c6fc68fe4da67&imgtype=0&src=http%3A%2F%2Fpic01.taopic.com%2F151014%2F234732-15101410452229-lp.jpg","descr":"美女插画"}},"links":{"Github":{"link":"https://github.com/garsonlab","avatar":"https://avatars3.githubusercontent.com/u/13958934?s=460&v=4","descr":"My Github","type":"Blog"},"OnLineTools":{"link":"http://tool.lu/","avatar":"http://qn11.tool.lu/201710/15/103320SbM84Ql4tETjg49a_28x28.png","descr":"在线工具","type":"Tools"},"CMDMarkdown":{"link":"https://www.zybuluo.com/","avatar":"https://www.zybuluo.com/static/img/logo.png","descr":"Markdown在线编辑","type":"Tools"},"Hexo文档":{"link":"https://hexo.io/zh-cn/docs/","avatar":"https://hexo.io/logo.svg","descr":"Hexo中文官方文档","type":"Community"},"游戏蛮牛":{"link":"http://www.manew.com/forum.php","avatar":"http://www.manew.com/template/manew2016/images/logo.png","descr":"unity交流社区","type":"Unity"},"FairyGUI":{"link":"http://www.fairygui.com/","avatar":"http://www.fairygui.com/images/20170728151207.png","descr":"FairyGUI官方网站","type":"Site"}},"linktypes":{"Blog":{"name":"关注的博客"},"Unity":{"name":"Unity3D"},"Community":{"name":"浏览的社区"},"Tools":{"name":"工具"},"Site":{"name":"收藏的网址"}}}},"excerpt":"","more":"<p>Shader 动画的主要点在坐标变换，代码：</p>\n<pre><code class=\"cpp\">\nShader &quot;Custom/Grass&quot; {\n    Properties {\n        _MainTex (&quot;Grass Texture&quot;, 2D) = &quot;white&quot; {}\n        _TimeScale (&quot;Time Scale&quot;, float) = 1\n    }\n\n    SubShader{\n        Tags{&quot;Queue&quot;=&quot;Transparent&quot; &quot;RenderType&quot;=&quot;Opaque&quot; &quot;IgnoreProject&quot;=&quot;True&quot;}\n        Pass{\n            Tags{&quot;LightMode&quot;=&quot;ForwardBase&quot;}\n\n            ZWrite Off\n            Blend SrcAlpha OneMinusSrcAlpha\n            Cull Off\n\n            CGPROGRAM\n            #pragma vertex vert\n            #pragma fragment frag\n            #include &quot;UnityCG.cginc&quot; \n\n            sampler2D _MainTex;\n            half _TimeScale;\n\n            struct a2v {\n                float4 vertex : POSITION;\n                float4 texcoord : TEXCOORD0;\n            };\n\n            struct v2f {\n                float4 pos : SV_POSITION;\n                float2 uv : TEXCOORD0;\n            };\n\n\n            v2f vert(a2v v){\n                v2f o;\n                float4 offset = float4(0,0,0,0);\n                offset.x = sin(3.1416 * _Time.y * clamp(v.texcoord.y-0.5, 0, 1))  * _TimeScale;\n                o.pos = mul(UNITY_MATRIX_MVP, v.vertex + offset);\n                o.uv = v.texcoord.xy;\n                return o;\n            }\n\n            fixed4 frag(v2f i) : SV_Target{\n                return tex2D(_MainTex, i.uv);\n            }\n\n            ENDCG\n        }\n    }\n    FallBack Off\n}\n</code></pre>\n<p>Shader中设置渲染队列为 Transparent， 如果需要batch场景中模型的话需要在 Tags 中加上 “DisableBatching=True”， 不允许批处理。<br>关闭深度写入 Zwrite off。 关闭剔除，渲染双面Cull Off。开启混合为了显示透明 Blend SrcAlpha OneMinusSrcAlpha。</p>\n<p>vertex函数中， 必须把坐标转换成视觉空间， 所以我们把操作就集中在这里，我的想法是：<br>草是延 Y 轴生长的， 而且根不能动。所以，在判断当前的坐标有两种情况：<br>1， 如果 y 坐标靠近 0 时，我们认为他是根部，根部不需要改变。<br>2， 其他高度， y  需要沿着某个方向做来回的摇摆pingpong运动。</p>\n<p><img src=\"http://img.blog.csdn.net/20170323164133449?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvQ2hlbmc2MjQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\" alt=\"图片来源我的csdn\"></p>\n<p>当把根部看做原点，草的运动可以当成正弦函数， 取坐标距离底部的距离做一个限制，使底部摆动小clamp(v.texcoord.y-0.5, 0, 1)。 clamp(x, a, b) 的作用时当 x&lt; a时 x=a， 当x &gt; b 时 x=b。<br>我们做一个x方向的偏移（也可以z），sin(3.1416 <em> _Time.y </em> clamp(v.texcoord.y-0.5, 0, 1))， _Time是一个时间变化量，最后在乘上一个我们偏移的最大距离 _TimeScale即可。<br>最后，把SV_POSITION寄存器中的坐标设置为原本的坐标vertex 加上便宜坐标offset 后的转换。</p>\n<p><img src=\"http://img.blog.csdn.net/20170323165203481?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvQ2hlbmc2MjQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\" alt=\"图片来源我的csdn\"></p>\n"},{"title":"永远的主视图","date":"2017-03-23T16:00:00.000Z","_content":"\nUnity中，X、Y、Z坐标轴分别对应左、上、前，摄像机人视觉的方向在Z轴上。所以，当我们从Z轴看物体看的是正反面，Y轴看的是上下面，X看的是左右面。\n一个面片Quad只有四个顶点、两个三角形，我们从Z上看是矩形，但是从其他的两个方向上看我们是看不见的。而场景中烟花的粒子，一个正在旋转的黑洞等大都是一个面片，我们希望从任意角度看这个物体时它都和从正面看到的一样，怎么办呢？简单的想想有两种方法：\n1，让面片永远的LookAt 摄像机（个人觉得有点Low）\n2，使用Shader重绘顶点\n3，没想...\n现在说说关于2的实现。\n如下面第一张图是我们正常的视觉，把物体的中心点设置为坐标的元点，从正前方看。当我们改变视线，从Z1向物体看去，把原来的坐标轴按照新的视线进行对应得到图2。现在我们的目的转换成求转换后坐标轴即可，把点转换成我们新构建的坐标空间。\n\n![图片来源我的csdn](http://img.blog.csdn.net/20170324182224160?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvQ2hlbmc2MjQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center)![图片来源我的csdn](http://img.blog.csdn.net/20170324182245707?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvQ2hlbmc2MjQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center)\n\n得到Z1是新的视觉方向，那么先预计一个大概的Y方向。如果新的Z1靠近原Y,那么我们估计他的新Y为(0,0,1),否则还当作(0,1,0)， 只要这两个向量是在同一个水平面上就行。然后通过向量的叉乘求得X1：\nX1 = 预估Y1 x Z1;\n再去求得准确的Y1:\nY1 = Z1 x X1;\n得到改变后的坐标向量（X1,Y1,Z1），把模型上的坐标点距离我们选定的中心点的向量转换到新的坐标系中就可。\n\n``` cpp\n\n// Upgrade NOTE: replaced '_World2Object' with 'unity_WorldToObject'\n\nShader \"Custom/MainView\" {\n\tProperties {\n\t\t_Color (\"Color\", Color) = (1,1,1,1)\n\t\t_MainTex (\"Albedo (RGB)\", 2D) = \"white\" {}\n\t}\n\n\tSubShader{\n\t\tTags{\"Queue\"=\"Transparent\" \"RenderType\"=\"Transparent\" \"IgnoreProject\"=\"True\" \"DisableBatching\"=\"True\"}\n\t\tPass{\n\t\t\tTags{\"LightMode\"=\"ForwardBase\"}\n\n\t\t\tZWrite Off\n\t\t\tBlend SrcAlpha OneMinusSrcAlpha\n\t\t\tCull Off\n\n\t\t\tCGPROGRAM\n\t\t\t#pragma vertex vert\n\t\t\t#pragma fragment frag\n\t\t\t#include \"UnityCG.cginc\"\n\n\t\t\tfixed4 _Color;\n\t\t\tsampler2D _MainTex;\n\n\t\t\tstruct a2v {\n\t\t\t\tfloat4 vertex : POSITION;\n\t\t\t\tfloat4 texcoord : TEXCOORD0;\n\t\t\t};\n\n\t\t\tstruct v2f {\n\t\t\t\tfloat4 pos : SV_POSITION;\n\t\t\t\tfloat2 uv : TEXCOORD0;\n\t\t\t};\n\n\t\t\tv2f vert(a2v v) {\n\t\t\t\tv2f o;\n\t\t\t\tfloat3 center = float3(0,0,0);\n\t\t\t\tfloat3 viewerPos = mul(unity_WorldToObject, float4(_WorldSpaceCameraPos, 1));\n\n\t\t\t\tfloat3 z1 = normalize(viewerPos - center);//视觉向量，新的Z1\n\t\t\t\t//上方，模型的向上方向向量，和视觉方向垂直，当视觉方向接近垂直时设为世界坐标的水平方向\n\t\t\t\tfloat3 y1 = abs(z1.y) > 0.999 ? float3(0,0,1) : float3(0,1,0);\n\t\t\t\tfloat3 x1 = normalize(cross(y1, z1));//叉乘得垂直\n\t\t\t\ty1 = normalize(cross(z1, x1));//获取准确的向上分量\n\n\t\t\t\tfloat3 curVector = v.vertex.xyz - center;//当前坐标向量\n\t\t\t\t//向量在三个方向上的分量为最终坐标，相当于重构坐标轴\n\t\t\t\tfloat3 newPos = center + x1 * curVector.x + y1 * curVector.y + z1 * curVector.z;//转化到新坐标系\n\t\t\t\to.pos = mul(UNITY_MATRIX_MVP, float4(newPos, 1));\n\t\t\t\to.uv = v.texcoord.xy;\n\t\t\t\treturn o;\n\t\t\t}\n\n\t\t\tfixed4 frag(v2f i) : SV_Target {\n\t\t\t\treturn tex2D(_MainTex, i.uv) * _Color;\n\t\t\t}\n\n\t\t\tENDCG\n\t\t}\n\t}\n\n\tFallBack Off\n}\n\n```\n\nDisableBatching的作用说过了，其他的都是满满的线性代数0.0\n![图片来源我的csdn](http://img.blog.csdn.net/20170324183553383?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvQ2hlbmc2MjQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center)\n\n可以看到当我们旋转从不同角度看时看到的基本上都是一样的。","source":"_posts/永远的主视图.md","raw":"---\ntitle: 永远的主视图\ndate: 2017-3-24\ntags:\n- Shader\n- Unity\ncategories: UnityShader\n---\n\nUnity中，X、Y、Z坐标轴分别对应左、上、前，摄像机人视觉的方向在Z轴上。所以，当我们从Z轴看物体看的是正反面，Y轴看的是上下面，X看的是左右面。\n一个面片Quad只有四个顶点、两个三角形，我们从Z上看是矩形，但是从其他的两个方向上看我们是看不见的。而场景中烟花的粒子，一个正在旋转的黑洞等大都是一个面片，我们希望从任意角度看这个物体时它都和从正面看到的一样，怎么办呢？简单的想想有两种方法：\n1，让面片永远的LookAt 摄像机（个人觉得有点Low）\n2，使用Shader重绘顶点\n3，没想...\n现在说说关于2的实现。\n如下面第一张图是我们正常的视觉，把物体的中心点设置为坐标的元点，从正前方看。当我们改变视线，从Z1向物体看去，把原来的坐标轴按照新的视线进行对应得到图2。现在我们的目的转换成求转换后坐标轴即可，把点转换成我们新构建的坐标空间。\n\n![图片来源我的csdn](http://img.blog.csdn.net/20170324182224160?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvQ2hlbmc2MjQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center)![图片来源我的csdn](http://img.blog.csdn.net/20170324182245707?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvQ2hlbmc2MjQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center)\n\n得到Z1是新的视觉方向，那么先预计一个大概的Y方向。如果新的Z1靠近原Y,那么我们估计他的新Y为(0,0,1),否则还当作(0,1,0)， 只要这两个向量是在同一个水平面上就行。然后通过向量的叉乘求得X1：\nX1 = 预估Y1 x Z1;\n再去求得准确的Y1:\nY1 = Z1 x X1;\n得到改变后的坐标向量（X1,Y1,Z1），把模型上的坐标点距离我们选定的中心点的向量转换到新的坐标系中就可。\n\n``` cpp\n\n// Upgrade NOTE: replaced '_World2Object' with 'unity_WorldToObject'\n\nShader \"Custom/MainView\" {\n\tProperties {\n\t\t_Color (\"Color\", Color) = (1,1,1,1)\n\t\t_MainTex (\"Albedo (RGB)\", 2D) = \"white\" {}\n\t}\n\n\tSubShader{\n\t\tTags{\"Queue\"=\"Transparent\" \"RenderType\"=\"Transparent\" \"IgnoreProject\"=\"True\" \"DisableBatching\"=\"True\"}\n\t\tPass{\n\t\t\tTags{\"LightMode\"=\"ForwardBase\"}\n\n\t\t\tZWrite Off\n\t\t\tBlend SrcAlpha OneMinusSrcAlpha\n\t\t\tCull Off\n\n\t\t\tCGPROGRAM\n\t\t\t#pragma vertex vert\n\t\t\t#pragma fragment frag\n\t\t\t#include \"UnityCG.cginc\"\n\n\t\t\tfixed4 _Color;\n\t\t\tsampler2D _MainTex;\n\n\t\t\tstruct a2v {\n\t\t\t\tfloat4 vertex : POSITION;\n\t\t\t\tfloat4 texcoord : TEXCOORD0;\n\t\t\t};\n\n\t\t\tstruct v2f {\n\t\t\t\tfloat4 pos : SV_POSITION;\n\t\t\t\tfloat2 uv : TEXCOORD0;\n\t\t\t};\n\n\t\t\tv2f vert(a2v v) {\n\t\t\t\tv2f o;\n\t\t\t\tfloat3 center = float3(0,0,0);\n\t\t\t\tfloat3 viewerPos = mul(unity_WorldToObject, float4(_WorldSpaceCameraPos, 1));\n\n\t\t\t\tfloat3 z1 = normalize(viewerPos - center);//视觉向量，新的Z1\n\t\t\t\t//上方，模型的向上方向向量，和视觉方向垂直，当视觉方向接近垂直时设为世界坐标的水平方向\n\t\t\t\tfloat3 y1 = abs(z1.y) > 0.999 ? float3(0,0,1) : float3(0,1,0);\n\t\t\t\tfloat3 x1 = normalize(cross(y1, z1));//叉乘得垂直\n\t\t\t\ty1 = normalize(cross(z1, x1));//获取准确的向上分量\n\n\t\t\t\tfloat3 curVector = v.vertex.xyz - center;//当前坐标向量\n\t\t\t\t//向量在三个方向上的分量为最终坐标，相当于重构坐标轴\n\t\t\t\tfloat3 newPos = center + x1 * curVector.x + y1 * curVector.y + z1 * curVector.z;//转化到新坐标系\n\t\t\t\to.pos = mul(UNITY_MATRIX_MVP, float4(newPos, 1));\n\t\t\t\to.uv = v.texcoord.xy;\n\t\t\t\treturn o;\n\t\t\t}\n\n\t\t\tfixed4 frag(v2f i) : SV_Target {\n\t\t\t\treturn tex2D(_MainTex, i.uv) * _Color;\n\t\t\t}\n\n\t\t\tENDCG\n\t\t}\n\t}\n\n\tFallBack Off\n}\n\n```\n\nDisableBatching的作用说过了，其他的都是满满的线性代数0.0\n![图片来源我的csdn](http://img.blog.csdn.net/20170324183553383?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvQ2hlbmc2MjQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center)\n\n可以看到当我们旋转从不同角度看时看到的基本上都是一样的。","slug":"永远的主视图","published":1,"updated":"2017-10-26T10:50:39.209Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj9fm90ua001f2cobayrj1e75","content":"<p>Unity中，X、Y、Z坐标轴分别对应左、上、前，摄像机人视觉的方向在Z轴上。所以，当我们从Z轴看物体看的是正反面，Y轴看的是上下面，X看的是左右面。<br>一个面片Quad只有四个顶点、两个三角形，我们从Z上看是矩形，但是从其他的两个方向上看我们是看不见的。而场景中烟花的粒子，一个正在旋转的黑洞等大都是一个面片，我们希望从任意角度看这个物体时它都和从正面看到的一样，怎么办呢？简单的想想有两种方法：<br>1，让面片永远的LookAt 摄像机（个人觉得有点Low）<br>2，使用Shader重绘顶点<br>3，没想…<br>现在说说关于2的实现。<br>如下面第一张图是我们正常的视觉，把物体的中心点设置为坐标的元点，从正前方看。当我们改变视线，从Z1向物体看去，把原来的坐标轴按照新的视线进行对应得到图2。现在我们的目的转换成求转换后坐标轴即可，把点转换成我们新构建的坐标空间。</p>\n<p><img src=\"http://img.blog.csdn.net/20170324182224160?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvQ2hlbmc2MjQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\" alt=\"图片来源我的csdn\"><img src=\"http://img.blog.csdn.net/20170324182245707?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvQ2hlbmc2MjQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\" alt=\"图片来源我的csdn\"></p>\n<p>得到Z1是新的视觉方向，那么先预计一个大概的Y方向。如果新的Z1靠近原Y,那么我们估计他的新Y为(0,0,1),否则还当作(0,1,0)， 只要这两个向量是在同一个水平面上就行。然后通过向量的叉乘求得X1：<br>X1 = 预估Y1 x Z1;<br>再去求得准确的Y1:<br>Y1 = Z1 x X1;<br>得到改变后的坐标向量（X1,Y1,Z1），把模型上的坐标点距离我们选定的中心点的向量转换到新的坐标系中就可。</p>\n<pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\">\n<span class=\"token comment\" spellcheck=\"true\">// Upgrade NOTE: replaced '_World2Object' with 'unity_WorldToObject'</span>\n\nShader <span class=\"token string\">\"Custom/MainView\"</span> <span class=\"token punctuation\">{</span>\n    Properties <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">_Color</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"Color\"</span><span class=\"token punctuation\">,</span> Color<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        <span class=\"token function\">_MainTex</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"Albedo (RGB)\"</span><span class=\"token punctuation\">,</span> 2D<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"white\"</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    SubShader<span class=\"token punctuation\">{</span>\n        Tags<span class=\"token punctuation\">{</span><span class=\"token string\">\"Queue\"</span><span class=\"token operator\">=</span><span class=\"token string\">\"Transparent\"</span> <span class=\"token string\">\"RenderType\"</span><span class=\"token operator\">=</span><span class=\"token string\">\"Transparent\"</span> <span class=\"token string\">\"IgnoreProject\"</span><span class=\"token operator\">=</span><span class=\"token string\">\"True\"</span> <span class=\"token string\">\"DisableBatching\"</span><span class=\"token operator\">=</span><span class=\"token string\">\"True\"</span><span class=\"token punctuation\">}</span>\n        Pass<span class=\"token punctuation\">{</span>\n            Tags<span class=\"token punctuation\">{</span><span class=\"token string\">\"LightMode\"</span><span class=\"token operator\">=</span><span class=\"token string\">\"ForwardBase\"</span><span class=\"token punctuation\">}</span>\n\n            ZWrite Off\n            Blend SrcAlpha OneMinusSrcAlpha\n            Cull Off\n\n            CGPROGRAM\n            <span class=\"token macro property\">#<span class=\"token directive keyword\">pragma</span> vertex vert</span>\n            <span class=\"token macro property\">#<span class=\"token directive keyword\">pragma</span> fragment frag</span>\n            <span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"UnityCG.cginc\"</span></span>\n\n            fixed4 _Color<span class=\"token punctuation\">;</span>\n            sampler2D _MainTex<span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">struct</span> a2v <span class=\"token punctuation\">{</span>\n                float4 vertex <span class=\"token operator\">:</span> POSITION<span class=\"token punctuation\">;</span>\n                float4 texcoord <span class=\"token operator\">:</span> TEXCOORD0<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">struct</span> v2f <span class=\"token punctuation\">{</span>\n                float4 pos <span class=\"token operator\">:</span> SV_POSITION<span class=\"token punctuation\">;</span>\n                float2 uv <span class=\"token operator\">:</span> TEXCOORD0<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n            v2f <span class=\"token function\">vert</span><span class=\"token punctuation\">(</span>a2v v<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                v2f o<span class=\"token punctuation\">;</span>\n                float3 center <span class=\"token operator\">=</span> <span class=\"token function\">float3</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                float3 viewerPos <span class=\"token operator\">=</span> <span class=\"token function\">mul</span><span class=\"token punctuation\">(</span>unity_WorldToObject<span class=\"token punctuation\">,</span> <span class=\"token function\">float4</span><span class=\"token punctuation\">(</span>_WorldSpaceCameraPos<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                float3 z1 <span class=\"token operator\">=</span> <span class=\"token function\">normalize</span><span class=\"token punctuation\">(</span>viewerPos <span class=\"token operator\">-</span> center<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//视觉向量，新的Z1</span>\n                <span class=\"token comment\" spellcheck=\"true\">//上方，模型的向上方向向量，和视觉方向垂直，当视觉方向接近垂直时设为世界坐标的水平方向</span>\n                float3 y1 <span class=\"token operator\">=</span> <span class=\"token function\">abs</span><span class=\"token punctuation\">(</span>z1<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0.999</span> <span class=\"token operator\">?</span> <span class=\"token function\">float3</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">float3</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                float3 x1 <span class=\"token operator\">=</span> <span class=\"token function\">normalize</span><span class=\"token punctuation\">(</span><span class=\"token function\">cross</span><span class=\"token punctuation\">(</span>y1<span class=\"token punctuation\">,</span> z1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//叉乘得垂直</span>\n                y1 <span class=\"token operator\">=</span> <span class=\"token function\">normalize</span><span class=\"token punctuation\">(</span><span class=\"token function\">cross</span><span class=\"token punctuation\">(</span>z1<span class=\"token punctuation\">,</span> x1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//获取准确的向上分量</span>\n\n                float3 curVector <span class=\"token operator\">=</span> v<span class=\"token punctuation\">.</span>vertex<span class=\"token punctuation\">.</span>xyz <span class=\"token operator\">-</span> center<span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//当前坐标向量</span>\n                <span class=\"token comment\" spellcheck=\"true\">//向量在三个方向上的分量为最终坐标，相当于重构坐标轴</span>\n                float3 newPos <span class=\"token operator\">=</span> center <span class=\"token operator\">+</span> x1 <span class=\"token operator\">*</span> curVector<span class=\"token punctuation\">.</span>x <span class=\"token operator\">+</span> y1 <span class=\"token operator\">*</span> curVector<span class=\"token punctuation\">.</span>y <span class=\"token operator\">+</span> z1 <span class=\"token operator\">*</span> curVector<span class=\"token punctuation\">.</span>z<span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//转化到新坐标系</span>\n                o<span class=\"token punctuation\">.</span>pos <span class=\"token operator\">=</span> <span class=\"token function\">mul</span><span class=\"token punctuation\">(</span>UNITY_MATRIX_MVP<span class=\"token punctuation\">,</span> <span class=\"token function\">float4</span><span class=\"token punctuation\">(</span>newPos<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                o<span class=\"token punctuation\">.</span>uv <span class=\"token operator\">=</span> v<span class=\"token punctuation\">.</span>texcoord<span class=\"token punctuation\">.</span>xy<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">return</span> o<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            fixed4 <span class=\"token function\">frag</span><span class=\"token punctuation\">(</span>v2f i<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> SV_Target <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span> <span class=\"token function\">tex2D</span><span class=\"token punctuation\">(</span>_MainTex<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">.</span>uv<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> _Color<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            ENDCG\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    FallBack Off\n<span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>DisableBatching的作用说过了，其他的都是满满的线性代数0.0<br><img src=\"http://img.blog.csdn.net/20170324183553383?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvQ2hlbmc2MjQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\" alt=\"图片来源我的csdn\"></p>\n<p>可以看到当我们旋转从不同角度看时看到的基本上都是一样的。</p>\n","site":{"data":{"gallery":{"美女":{"full_link":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1508912200438&di=d5b3eacf86d8f94c149c6fc68fe4da67&imgtype=0&src=http%3A%2F%2Fpic01.taopic.com%2F151014%2F234732-15101410452229-lp.jpg","thumb_link":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1508912200438&di=d5b3eacf86d8f94c149c6fc68fe4da67&imgtype=0&src=http%3A%2F%2Fpic01.taopic.com%2F151014%2F234732-15101410452229-lp.jpg","descr":"美女插画"}},"links":{"Github":{"link":"https://github.com/garsonlab","avatar":"https://avatars3.githubusercontent.com/u/13958934?s=460&v=4","descr":"My Github","type":"Blog"},"OnLineTools":{"link":"http://tool.lu/","avatar":"http://qn11.tool.lu/201710/15/103320SbM84Ql4tETjg49a_28x28.png","descr":"在线工具","type":"Tools"},"CMDMarkdown":{"link":"https://www.zybuluo.com/","avatar":"https://www.zybuluo.com/static/img/logo.png","descr":"Markdown在线编辑","type":"Tools"},"Hexo文档":{"link":"https://hexo.io/zh-cn/docs/","avatar":"https://hexo.io/logo.svg","descr":"Hexo中文官方文档","type":"Community"},"游戏蛮牛":{"link":"http://www.manew.com/forum.php","avatar":"http://www.manew.com/template/manew2016/images/logo.png","descr":"unity交流社区","type":"Unity"},"FairyGUI":{"link":"http://www.fairygui.com/","avatar":"http://www.fairygui.com/images/20170728151207.png","descr":"FairyGUI官方网站","type":"Site"}},"linktypes":{"Blog":{"name":"关注的博客"},"Unity":{"name":"Unity3D"},"Community":{"name":"浏览的社区"},"Tools":{"name":"工具"},"Site":{"name":"收藏的网址"}}}},"excerpt":"","more":"<p>Unity中，X、Y、Z坐标轴分别对应左、上、前，摄像机人视觉的方向在Z轴上。所以，当我们从Z轴看物体看的是正反面，Y轴看的是上下面，X看的是左右面。<br>一个面片Quad只有四个顶点、两个三角形，我们从Z上看是矩形，但是从其他的两个方向上看我们是看不见的。而场景中烟花的粒子，一个正在旋转的黑洞等大都是一个面片，我们希望从任意角度看这个物体时它都和从正面看到的一样，怎么办呢？简单的想想有两种方法：<br>1，让面片永远的LookAt 摄像机（个人觉得有点Low）<br>2，使用Shader重绘顶点<br>3，没想…<br>现在说说关于2的实现。<br>如下面第一张图是我们正常的视觉，把物体的中心点设置为坐标的元点，从正前方看。当我们改变视线，从Z1向物体看去，把原来的坐标轴按照新的视线进行对应得到图2。现在我们的目的转换成求转换后坐标轴即可，把点转换成我们新构建的坐标空间。</p>\n<p><img src=\"http://img.blog.csdn.net/20170324182224160?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvQ2hlbmc2MjQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\" alt=\"图片来源我的csdn\"><img src=\"http://img.blog.csdn.net/20170324182245707?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvQ2hlbmc2MjQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\" alt=\"图片来源我的csdn\"></p>\n<p>得到Z1是新的视觉方向，那么先预计一个大概的Y方向。如果新的Z1靠近原Y,那么我们估计他的新Y为(0,0,1),否则还当作(0,1,0)， 只要这两个向量是在同一个水平面上就行。然后通过向量的叉乘求得X1：<br>X1 = 预估Y1 x Z1;<br>再去求得准确的Y1:<br>Y1 = Z1 x X1;<br>得到改变后的坐标向量（X1,Y1,Z1），把模型上的坐标点距离我们选定的中心点的向量转换到新的坐标系中就可。</p>\n<pre><code class=\"cpp\">\n// Upgrade NOTE: replaced &#39;_World2Object&#39; with &#39;unity_WorldToObject&#39;\n\nShader &quot;Custom/MainView&quot; {\n    Properties {\n        _Color (&quot;Color&quot;, Color) = (1,1,1,1)\n        _MainTex (&quot;Albedo (RGB)&quot;, 2D) = &quot;white&quot; {}\n    }\n\n    SubShader{\n        Tags{&quot;Queue&quot;=&quot;Transparent&quot; &quot;RenderType&quot;=&quot;Transparent&quot; &quot;IgnoreProject&quot;=&quot;True&quot; &quot;DisableBatching&quot;=&quot;True&quot;}\n        Pass{\n            Tags{&quot;LightMode&quot;=&quot;ForwardBase&quot;}\n\n            ZWrite Off\n            Blend SrcAlpha OneMinusSrcAlpha\n            Cull Off\n\n            CGPROGRAM\n            #pragma vertex vert\n            #pragma fragment frag\n            #include &quot;UnityCG.cginc&quot;\n\n            fixed4 _Color;\n            sampler2D _MainTex;\n\n            struct a2v {\n                float4 vertex : POSITION;\n                float4 texcoord : TEXCOORD0;\n            };\n\n            struct v2f {\n                float4 pos : SV_POSITION;\n                float2 uv : TEXCOORD0;\n            };\n\n            v2f vert(a2v v) {\n                v2f o;\n                float3 center = float3(0,0,0);\n                float3 viewerPos = mul(unity_WorldToObject, float4(_WorldSpaceCameraPos, 1));\n\n                float3 z1 = normalize(viewerPos - center);//视觉向量，新的Z1\n                //上方，模型的向上方向向量，和视觉方向垂直，当视觉方向接近垂直时设为世界坐标的水平方向\n                float3 y1 = abs(z1.y) &gt; 0.999 ? float3(0,0,1) : float3(0,1,0);\n                float3 x1 = normalize(cross(y1, z1));//叉乘得垂直\n                y1 = normalize(cross(z1, x1));//获取准确的向上分量\n\n                float3 curVector = v.vertex.xyz - center;//当前坐标向量\n                //向量在三个方向上的分量为最终坐标，相当于重构坐标轴\n                float3 newPos = center + x1 * curVector.x + y1 * curVector.y + z1 * curVector.z;//转化到新坐标系\n                o.pos = mul(UNITY_MATRIX_MVP, float4(newPos, 1));\n                o.uv = v.texcoord.xy;\n                return o;\n            }\n\n            fixed4 frag(v2f i) : SV_Target {\n                return tex2D(_MainTex, i.uv) * _Color;\n            }\n\n            ENDCG\n        }\n    }\n\n    FallBack Off\n}\n</code></pre>\n<p>DisableBatching的作用说过了，其他的都是满满的线性代数0.0<br><img src=\"http://img.blog.csdn.net/20170324183553383?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvQ2hlbmc2MjQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\" alt=\"图片来源我的csdn\"></p>\n<p>可以看到当我们旋转从不同角度看时看到的基本上都是一样的。</p>\n"},{"title":"无限列表 ScrollView List","date":"2017-05-01T16:00:00.000Z","_content":"\n无线列表的实现好处有一些，主要方法是在ScrollView的值改变的时候改变已存在的渲染子节点位置。最核心的是计算Content的大小及里面的节点位置设置。\n\n``` csharp\nusing System;\nusing System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\nusing UnityEngine.UI;\n\nnamespace Assets.UI\n{\n    /// <summary>\n    /// Introduction: ScrollList\n    /// Author:     Cheng\n    /// Time: \n    /// </summary>\n    [DisallowMultipleComponent]\n    [RequireComponent(typeof (ScrollRect))]\n    public class ScrollList : MonoBehaviour\n    {\n        public delegate void OnItemRender(int index, Transform child);\n\n        public OnItemRender onItemRender;\n\n        /// <summary>\n        /// 排序方式\n        /// </summary>\n        public enum Arrangement\n        {\n            /// <summary>\n            /// 横排\n            /// </summary>\n            Horizontal = 0,\n\n            /// <summary>\n            /// 竖排\n            /// </summary>\n            Vertical,\n        }\n\n        /// <summary>\n        /// 水平对齐\n        /// </summary>\n        public enum HorizontalAlign\n        {\n            /// <summary>\n            /// 居左\n            /// </summary>\n            Left,\n\n            /// <summary>\n            /// 居中\n            /// </summary>\n            Middle,\n\n            /// <summary>\n            /// 局右\n            /// </summary>\n            Right,\n        }\n\n        /// <summary>\n        /// 垂直对齐\n        /// </summary>\n        public enum VerticalAlign\n        {\n            /// <summary>\n            /// 居上\n            /// </summary>\n            Top,\n\n            /// <summary>\n            /// 居中\n            /// </summary>\n            Middle,\n\n            /// <summary>\n            /// 局下\n            /// </summary>\n            Bottom,\n        }\n\n\n        public Arrangement arrangement = Arrangement.Vertical;\n\n        /// <summary>\n        /// 当选择水平或垂直流动是有用，指每行/列最大个数\n        /// </summary>\n        public int MaxPerLine\n        {\n            get { return maxPerLine; }\n            set { SetMaxPerLine(value); }\n        }\n\n        /// <summary>\n        /// 行距\n        /// </summary>\n        public float rowSpace = 0;\n\n        /// <summary>\n        /// 列距\n        /// </summary>\n        public float columuSpace = 0;\n\n        public HorizontalAlign horizontalAlign = HorizontalAlign.Left;\n        public VerticalAlign verticalAlign = VerticalAlign.Top;\n\n        /// <summary>\n        /// 边缘留空 上\n        /// </summary>\n        public float marginTop = 0;\n\n        /// <summary>\n        /// 边缘留空 下\n        /// </summary>\n        public float marginBottom = 0;\n\n        /// <summary>\n        /// 边缘留空 左\n        /// </summary>\n        public float marginLeft = 0;\n\n        /// <summary>\n        /// 边缘留空 右\n        /// </summary>\n        public float marginRight = 0;\n\n        /// <summary>\n        /// 渲染子节点\n        /// </summary>\n        public GameObject Item\n        {\n            get { return item; }\n            set { SetItem(value); }\n        }\n\n        /// <summary>\n        /// 总个数\n        /// </summary>\n        public int ChildCount\n        {\n            get { return childCount; }\n            set { SetChildCount(value, true); }\n        }\n\n        /// <summary>\n        /// 设置显示窗口大小\n        /// </summary>\n        public Vector2 ViewPort\n        {\n            get { return viewPort; }\n            set { SetViewPort(value); }\n        }\n\n        GameObject item;\n        ScrollRect scrollRect;\n        // RectTransform mask;\n        Vector2 viewPort;\n        RectTransform content;\n        Vector2 itemSize;\n        List<Transform> items;\n        Dictionary<int, int> contains;\n        List<int> outOfContains;\n        int childCount; //需要渲染的总数据个数\n        int scrollLineIndex; //当前第一个元素索引\n        int totalCount; //在UI中显示的个数(不乘以maxPerLine)\n        Vector2 startPos; //第一个元素所在位置\n        int startIndex; //当前渲染起始坐标\n        int endIndex; //当前渲染结束坐标\n        int maxPerLine;\n\n        void Start()\n        {\n            maxPerLine = maxPerLine == 0 ? 1 : maxPerLine;\n            items = new List<Transform>();\n            contains = new Dictionary<int, int>();\n            outOfContains = new List<int>();\n            scrollRect = transform.GetComponent<ScrollRect>();\n            // mask = scrollRect.GetComponentInChildren<Mask>().rectTransform;\n            content = scrollRect.content;\n            if (content == null)\n            {\n                Debug.Log(\"ScrollRect \" + scrollRect.gameObject.name + \" Has No Content, Please Check And Retry.\");\n                return;\n            }\n            content.anchorMax = new Vector2(0, 1);\n            content.anchorMin = new Vector2(0, 1);\n            content.pivot = new Vector2(0, 1);\n            ReBuild();\n        }\n\n\n        /// <summary>\n        /// 当子节点、Mask、maxPerLine\n        /// </summary>\n        public void ReBuild()\n        {\n            if (scrollRect == null || content == null || item == null) return;\n            ResetChildren();\n\n            Vector2 maskSize = viewPort;\n            int count = 0;\n\n            if (arrangement == Arrangement.Horizontal)\n            {\n                count = Mathf.CeilToInt(maskSize.x/itemSize.x) + 1; //横向列数\n                startPos = Vector2.zero;\n                startPos.x = marginLeft;\n                if (verticalAlign == VerticalAlign.Top)\n                {\n                    startPos.y = -marginTop;\n                }\n                else if (verticalAlign == VerticalAlign.Middle)\n                {\n                    startPos.y = -(maskSize.y*0.5f - (itemSize.y*maxPerLine + (maxPerLine - 1)*rowSpace)*0.5f);\n                }\n                else if (verticalAlign == VerticalAlign.Bottom)\n                {\n                    startPos.y = -(maskSize.y - marginBottom - itemSize.y*maxPerLine - rowSpace*(maxPerLine - 1));\n                }\n\n                for (int i = 0; i < count; i++)\n                {\n                    for (int j = 0; j < maxPerLine; j++)\n                    {\n                        RectTransform child = CreateItem(i*maxPerLine + j);\n                        child.localPosition = startPos +\n                                              new Vector2(i*itemSize.x + i*columuSpace, -j*itemSize.y - j*rowSpace);\n                    }\n                }\n            }\n            else if (arrangement == Arrangement.Vertical)\n            {\n                count = Mathf.CeilToInt(maskSize.y/itemSize.y) + 1; //竖向行数\n                startPos = Vector2.zero;\n                startPos.y = -marginTop; //重置开始节点位置\n                if (horizontalAlign == HorizontalAlign.Left)\n                {\n                    startPos.x = marginLeft;\n                }\n                else if (horizontalAlign == HorizontalAlign.Middle)\n                {\n                    startPos.x = (maskSize.x*0.5f - (itemSize.x*maxPerLine + (maxPerLine - 1)*columuSpace)*0.5f);\n                }\n                else if (horizontalAlign == HorizontalAlign.Right)\n                {\n                    startPos.x = maskSize.x - marginRight - itemSize.x*maxPerLine - columuSpace*(maxPerLine - 1);\n                }\n\n                for (int i = 0; i < count; i++)\n                {\n                    for (int j = 0; j < maxPerLine; j++)\n                    {\n                        RectTransform child = CreateItem(i*maxPerLine + j);\n                        child.localPosition = startPos +\n                                              new Vector2(j*itemSize.x + j*columuSpace, -i*itemSize.y - i*rowSpace);\n                    }\n                }\n            }\n            totalCount = count;\n\n            SetChildCount(childCount, true);\n            BackTop();\n\n            scrollRect.onValueChanged.RemoveAllListeners();\n            scrollRect.onValueChanged.AddListener(OnValueChanged);\n        }\n\n        /// <summary>\n        /// 列表滚动\n        /// </summary>\n        /// <param name=\"vec\"></param>\n        private void OnValueChanged(Vector2 vec)\n        {\n            switch (arrangement)\n            {\n                case Arrangement.Horizontal:\n                 //   if (vec.x < 0.0f || vec.x >= 1.0f)\n                 //       return;\n                        vec.x = Mathf.Clamp(vec.x, 0, 1);\n                    break;\n                case Arrangement.Vertical:\n                 //   if (vec.y <= 0.0f || vec.y >= 1.0f)\n                 //       return;\n                        vec.y = Mathf.Clamp(vec.y, 0, 1);\n                    break;\n            }\n\n            int curLineIndex = GetCurLineIndex();\n            if (curLineIndex != scrollLineIndex)\n                UpdateRectItem(curLineIndex, false);\n        }\n\n        /// <summary>\n        /// 获取页面第一行索引\n        /// </summary>\n        /// <returns></returns>\n        private int GetCurLineIndex()\n        {\n            switch (arrangement)\n            {\n                case Arrangement.Horizontal:\n                    return\n                        Mathf.FloorToInt(Mathf.Abs(Mathf.Abs(content.anchoredPosition.x) - marginLeft)/\n                                         (columuSpace + itemSize.x));\n                case Arrangement.Vertical:\n                    return\n                        Mathf.FloorToInt(Mathf.Abs(Mathf.Abs(content.anchoredPosition.y) - marginTop)/\n                                         (rowSpace + itemSize.y));\n            }\n            return 0;\n        }\n\n        /// <summary>\n        /// 更新数据（待修改问出现的才刷新）\n        /// </summary>\n        /// <param name=\"curLineIndex\"></param>\n        /// <param name=\"forceRender\"></param>\n        private void UpdateRectItem(int curLineIndex, bool forceRender)\n        {\n            if (curLineIndex < 0)\n                return;\n            startIndex = curLineIndex*maxPerLine;\n            endIndex = (curLineIndex + totalCount)*maxPerLine;\n            if (endIndex >= childCount)\n                endIndex = childCount;\n\n            contains.Clear(); //渲染序号\n            outOfContains.Clear(); //items的索引\n            for (int i = 0; i < items.Count; i++)//如果当前已渲染的item中包含\n            {\n                int index = int.Parse(items[i].gameObject.name);\n                if (index < startIndex || index >= endIndex)\n                {\n                    outOfContains.Add(i);\n                    items[i].gameObject.SetActive(false);\n                }\n                else\n                {\n                    items[i].gameObject.SetActive(true);\n                    contains.Add(index, i);\n                }\n            }\n\n            // *************更改渲染****************\n            for (int i = startIndex; i < endIndex; i++)\n            {\n                if (!contains.ContainsKey(i))\n                {\n                    Transform child = items[outOfContains[0]];\n                    outOfContains.RemoveAt(0);\n                    child.gameObject.SetActive(true);\n                    int row = i/maxPerLine;\n                    int col = i%maxPerLine;\n                    if (arrangement == Arrangement.Vertical)\n                        child.localPosition = startPos +\n                                              new Vector2(col*itemSize.x + (col)*columuSpace,\n                                                  -row*itemSize.y - (row)*rowSpace);\n                    else\n                        child.localPosition = startPos +\n                                              new Vector2(row*itemSize.x + (row)*columuSpace,\n                                                  -col*itemSize.y - (col)*rowSpace);\n                    child.gameObject.name = i.ToString();\n                    if (onItemRender != null)\n                        onItemRender(i, child);\n                }\n                else if (forceRender)\n                {\n                    if (onItemRender != null)\n                        onItemRender(i, items[contains[i]]);\n                }\n            }\n\n            scrollLineIndex = curLineIndex;\n        }\n\n        /// <summary>\n        /// 移除当前所有\n        /// </summary>\n        private void ResetChildren()\n        {\n            items.Clear();\n            for (int i = 0; i < content.childCount; i++)\n            {\n                Transform child = content.GetChild(i);\n                child.gameObject.SetActive(false);\n            }\n        }\n\n        /// <summary>\n        /// 创建新节点\n        /// </summary>\n        /// <param name=\"index\"></param>\n        private RectTransform CreateItem(int index)\n        {\n            Transform child;\n            if (content.childCount > index)\n            {\n                child = content.GetChild(index);\n            }\n            else\n            {\n                GameObject obj = GameObject.Instantiate(item) as GameObject;\n                obj.transform.SetParent(content);\n                obj.transform.localScale = Vector3.one;\n                child = obj.transform;\n            }\n            child.gameObject.name = index.ToString();\n            items.Add(child);\n\n            return child as RectTransform;\n        }\n\n        /// <summary>\n        /// 设置资源\n        /// </summary>\n        /// <param name=\"child\"></param>\n        public void SetItem(GameObject child)\n        {\n            if (child == null) return;\n            this.item = child;\n            RectTransform itemTrans = child.transform as RectTransform;\n            itemTrans.pivot = new Vector2(0, 1);\n            itemSize = itemTrans.sizeDelta;\n            ReBuild();\n        }\n\n        /// <summary>\n        /// 更新需要渲染的个数\n        /// </summary>\n        /// <param name=\"value\"></param>\n        public void SetChildCount(int value, bool forceRender)\n        {\n            if (value < 0) childCount = 0;\n            else childCount = value;\n\n            if (content == null) return;\n\n            int rc = Mathf.CeilToInt((float) childCount/(float) maxPerLine); //设置content的大小\n            if (arrangement == Arrangement.Horizontal)\n            {\n                content.sizeDelta = new Vector2(marginLeft + marginRight + itemSize.x*rc + columuSpace*(rc - 1),\n                    viewPort.y);\n                if (content.sizeDelta.x > viewPort.x && content.anchoredPosition.x < viewPort.x - content.sizeDelta.x)\n                    content.anchoredPosition = new Vector2(viewPort.x - content.sizeDelta.x, content.anchoredPosition.y);\n            }\n            else\n            {\n                content.sizeDelta = new Vector2(viewPort.x, marginTop + marginBottom + itemSize.y*rc + rowSpace*(rc - 1));\n                if (content.sizeDelta.y > viewPort.y && content.anchoredPosition.y > content.sizeDelta.y - viewPort.y)\n                    content.anchoredPosition = new Vector2(content.anchoredPosition.x, content.sizeDelta.y - viewPort.y);\n            }\n            UpdateRectItem(GetCurLineIndex(), true);\n        }\n\n        /// <summary>\n        /// 添加子节点\n        /// </summary>\n        /// <param name=\"index\"></param>\n        public void AddChild(int index)\n        {\n            if (index < 0) return;\n            startIndex = scrollLineIndex*maxPerLine;\n            endIndex = (scrollLineIndex + totalCount)*maxPerLine;\n            SetChildCount(childCount + 1, index >= startIndex && index < endIndex);\n        }\n\n        /// <summary>\n        /// 删除子节点\n        /// </summary>\n        /// <param name=\"index\"></param>\n        public void RemoveChild(int index)\n        {\n            if (index < 0 || index >= childCount) return;\n            startIndex = scrollLineIndex*maxPerLine;\n            endIndex = (scrollLineIndex + totalCount)*maxPerLine;\n            SetChildCount(childCount - 1, index >= startIndex && index < endIndex);\n        }\n\n\n        /// <summary>\n        /// 设置显示窗口大小\n        /// </summary>\n        /// <param name=\"port\"></param>\n        public void SetViewPort(Vector2 port)\n        {\n            if (port == viewPort) return;\n            viewPort = port;\n            ReBuild();\n        }\n\n        /// <summary>\n        /// 设置行列最大\n        /// </summary>\n        /// <param name=\"max\"></param>\n        public void SetMaxPerLine(int max)\n        {\n            maxPerLine = max;\n            ReBuild();\n        }\n\n        /// <summary>\n        /// 返回顶部\n        /// </summary>\n        public void BackTop()\n        {\n            content.localPosition = Vector3.zero;\n            UpdateRectItem(0, true);\n        }\n\n        /// <summary>\n        /// 返回底部\n        /// </summary>\n        public void BackBottom()\n        {\n            if (arrangement == Arrangement.Vertical)\n            {\n                content.localPosition = new Vector3(0, -viewPort.y + content.sizeDelta.y, 0);\n            }\n            else\n            {\n                content.localPosition = new Vector3(viewPort.x - content.sizeDelta.x, 0);\n            }\n            UpdateRectItem(Mathf.CeilToInt((float) childCount/(float) maxPerLine) - totalCount + 1, true);\n        }\n\n        public void RefreshViewItem()\n        {\n            UpdateRectItem(scrollLineIndex, true);\n        }\n\n    }\n}\n```\n\n效果：\n![图片来源我的csdn](http://img.blog.csdn.net/20170502192738648?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvQ2hlbmc2MjQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center)\n\n当选择水平布局的时候“每行个数”会切换为“每列个数”。\n由于Mask的锚点设置时相对父节点全局拉伸，我没看到怎么获取他的Size， 所以写了一个 “显示窗口” 及ViewPort来手动填他的大小。\n\n**实际使用中发现了一些问题，做出一些优化，最终代码为：**\n\n``` csharp\n\nusing System;\nusing System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\nusing UnityEngine.UI;\n\nnamespace Assets.UI\n{\n    /// <summary>\n    /// Introduction: 无限列表\n    ///             Content上禁止挂载ContentSizeFilter和LayOutGroup之类组件\n    /// Author:     Cheng\n    /// Time: \n    /// </summary>\n    [DisallowMultipleComponent]\n    [RequireComponent(typeof (ScrollRect))]\n    public class ScrollList : MonoBehaviour\n    {\n        public delegate void OnItemRender(int index, Transform child);\n\n        public OnItemRender onItemRender;\n\n        /// <summary>\n        /// 排序方式\n        /// </summary>\n        public enum Arrangement\n        {\n            /// <summary>\n            /// 横排\n            /// </summary>\n            Horizontal = 0,\n\n            /// <summary>\n            /// 竖排\n            /// </summary>\n            Vertical,\n        }\n\n        /// <summary>\n        /// 水平对齐\n        /// </summary>\n        public enum HorizontalAlign\n        {\n            /// <summary>\n            /// 居左\n            /// </summary>\n            Left,\n\n            /// <summary>\n            /// 居中\n            /// </summary>\n            Middle,\n\n            /// <summary>\n            /// 局右\n            /// </summary>\n            Right,\n        }\n\n        /// <summary>\n        /// 垂直对齐\n        /// </summary>\n        public enum VerticalAlign\n        {\n            /// <summary>\n            /// 居上\n            /// </summary>\n            Top,\n\n            /// <summary>\n            /// 居中\n            /// </summary>\n            Middle,\n\n            /// <summary>\n            /// 局下\n            /// </summary>\n            Bottom,\n        }\n\n\n        public Arrangement arrangement = Arrangement.Vertical;\n\n        /// <summary>\n        /// 当选择水平或垂直流动是有用，指每行/列最大个数\n        /// </summary>\n        public int MaxPerLine\n        {\n            get { return maxPerLine; }\n            set { SetMaxPerLine(value); }\n        }\n\n        /// <summary>\n        /// 行距\n        /// </summary>\n        public float rowSpace = 0;\n\n        /// <summary>\n        /// 列距\n        /// </summary>\n        public float columuSpace = 0;\n\n        public HorizontalAlign horizontalAlign = HorizontalAlign.Left;\n        public VerticalAlign verticalAlign = VerticalAlign.Top;\n\n        /// <summary>\n        /// 边缘留空 上\n        /// </summary>\n        public float marginTop = 0;\n\n        /// <summary>\n        /// 边缘留空 下\n        /// </summary>\n        public float marginBottom = 0;\n\n        /// <summary>\n        /// 边缘留空 左\n        /// </summary>\n        public float marginLeft = 0;\n\n        /// <summary>\n        /// 边缘留空 右\n        /// </summary>\n        public float marginRight = 0;\n\n        /// <summary>\n        /// 渲染子节点\n        /// </summary>\n        public GameObject Child\n        {\n            get { return item; }\n            set { SetItem(value); }\n        }\n\n        /// <summary>\n        /// 总个数\n        /// </summary>\n        public int ChildCount\n        {\n            get { return childCount; }\n            set { SetChildCount(value, true); }\n        }\n\n        /// <summary>\n        /// 设置显示窗口大小\n        /// </summary>\n        public Vector2 ViewPort\n        {\n            get { return viewPort; }\n            set { SetViewPort(value); }\n        }\n\n        GameObject item;\n        ScrollRect scrollRect;\n        Vector2 viewPort;\n        RectTransform content;\n        Vector2 itemSize;\n        List<Transform> items;\n        Dictionary<int, int> contains;\n        List<int> outOfContains;\n        int childCount; //需要渲染的总数据个数\n        int scrollLineIndex; //当前第一个元素索引\n        int totalCount; //在UI中显示的个数(不乘以maxPerLine)\n        Vector2 startPos; //第一个元素所在位置\n        int startIndex; //当前渲染起始坐标\n        int endIndex; //当前渲染结束坐标\n        int maxPerLine;\n\n        void Start()\n        {\n            maxPerLine = maxPerLine == 0 ? 1 : maxPerLine;\n            items = new List<Transform>();\n            contains = new Dictionary<int, int>();\n            outOfContains = new List<int>();\n            scrollRect = transform.GetComponent<ScrollRect>();\n            content = scrollRect.content;\n            if (content == null)\n            {\n                Debug.Log(\"ScrollRect \" + scrollRect.gameObject.name + \" Has No Content, Please Check And Retry.\");\n                return;\n            }\n            viewPort = scrollRect.viewport.rect.size;\n\n            content.anchorMax = new Vector2(0, 1);\n            content.anchorMin = new Vector2(0, 1);\n            content.pivot = new Vector2(0, 1);\n            ReBuild();\n        }\n\n\n        /// <summary>\n        /// 当子节点、Mask、maxPerLine\n        /// </summary>\n        public void ReBuild()\n        {\n            if (scrollRect == null || content == null || item == null) return;\n            ResetChildren();\n\n            Vector2 maskSize = viewPort;\n            int count = 0;\n\n            if (arrangement == Arrangement.Horizontal)\n            {\n                count = Mathf.CeilToInt(maskSize.x/itemSize.x) + 1; //横向列数\n                startPos = Vector2.zero;\n                startPos.x = marginLeft;\n                if (verticalAlign == VerticalAlign.Top)\n                {\n                    startPos.y = -marginTop;\n                }\n                else if (verticalAlign == VerticalAlign.Middle)\n                {\n                    startPos.y = -(maskSize.y*0.5f - (itemSize.y*maxPerLine + (maxPerLine - 1)*rowSpace)*0.5f);\n                }\n                else if (verticalAlign == VerticalAlign.Bottom)\n                {\n                    startPos.y = -(maskSize.y - marginBottom - itemSize.y*maxPerLine - rowSpace*(maxPerLine - 1));\n                }\n                //优化：不在一开始生产所有的可见格子\n                //for (int i = 0; i < count; i++)\n                //{\n                //    for (int j = 0; j < maxPerLine; j++)\n                //    {\n                //        RectTransform child = CreateItem(i*maxPerLine + j);\n                //        child.localPosition = startPos +\n                //                              new Vector2(i*itemSize.x + i*columuSpace, -j*itemSize.y - j*rowSpace);\n                //    }\n                //}\n            }\n            else if (arrangement == Arrangement.Vertical)\n            {\n                count = Mathf.CeilToInt(maskSize.y/itemSize.y) + 1; //竖向行数\n                startPos = Vector2.zero;\n                startPos.y = -marginTop; //重置开始节点位置\n                if (horizontalAlign == HorizontalAlign.Left)\n                {\n                    startPos.x = marginLeft;\n                }\n                else if (horizontalAlign == HorizontalAlign.Middle)\n                {\n                    startPos.x = (maskSize.x*0.5f - (itemSize.x*maxPerLine + (maxPerLine - 1)*columuSpace)*0.5f);\n                }\n                else if (horizontalAlign == HorizontalAlign.Right)\n                {\n                    startPos.x = maskSize.x - marginRight - itemSize.x*maxPerLine - columuSpace*(maxPerLine - 1);\n                }\n\n                //for (int i = 0; i < count; i++)\n                //{\n                //    for (int j = 0; j < maxPerLine; j++)\n                //    {\n                //        RectTransform child = CreateItem(i*maxPerLine + j);\n                //        child.localPosition = startPos +\n                //                              new Vector2(j*itemSize.x + j*columuSpace, -i*itemSize.y - i*rowSpace);\n                //    }\n                //}\n            }\n            totalCount = count;\n\n            SetChildCount(childCount, true);\n            BackTop();\n\n            scrollRect.onValueChanged.RemoveAllListeners();\n            scrollRect.onValueChanged.AddListener(OnValueChanged);\n        }\n\n        /// <summary>\n        /// 列表滚动\n        /// </summary>\n        /// <param name=\"vec\"></param>\n        private void OnValueChanged(Vector2 vec)\n        {\n            switch (arrangement)\n            {\n                case Arrangement.Horizontal:\n                 //   if (vec.x < 0.0f || vec.x >= 1.0f)\n                 //       return;\n                        vec.x = Mathf.Clamp(vec.x, 0, 1);\n                    break;\n                case Arrangement.Vertical:\n                 //   if (vec.y <= 0.0f || vec.y >= 1.0f)\n                 //       return;\n                        vec.y = Mathf.Clamp(vec.y, 0, 1);\n                    break;\n            }\n\n            int curLineIndex = GetCurLineIndex();\n            if (curLineIndex != scrollLineIndex)\n                UpdateRectItem(curLineIndex, false);\n        }\n\n        /// <summary>\n        /// 获取页面第一行索引\n        /// </summary>\n        /// <returns></returns>\n        private int GetCurLineIndex()\n        {\n            switch (arrangement)\n            {\n                case Arrangement.Horizontal:\n                    return\n                        Mathf.FloorToInt(Mathf.Abs(content.anchoredPosition.x < 0.1f? content.anchoredPosition.x : 0.1f - marginLeft)/\n                                         (columuSpace + itemSize.x));\n                case Arrangement.Vertical:\n                    return\n                        Mathf.FloorToInt(Mathf.Abs(content.anchoredPosition.y>-0.1f?content.anchoredPosition.y:-0.1f - marginTop)/\n                                         (rowSpace + itemSize.y));\n            }\n            return 0;\n        }\n\n        /// <summary>\n        /// 更新数据（待修改问出现的才刷新）\n        /// </summary>\n        /// <param name=\"curLineIndex\"></param>\n        /// <param name=\"forceRender\"></param>\n        private void UpdateRectItem(int curLineIndex, bool forceRender)\n        {\n            if (curLineIndex < 0)\n                return;\n            startIndex = curLineIndex*maxPerLine;\n            endIndex = (curLineIndex + totalCount)*maxPerLine;\n            if (endIndex >= childCount)\n                endIndex = childCount;\n\n            contains.Clear(); //渲染序号\n            outOfContains.Clear(); //items的索引\n            for (int i = 0; i < items.Count; i++)//如果当前已渲染的item中包含\n            {\n                int index = int.Parse(items[i].gameObject.name);\n                if (index < startIndex || index >= endIndex)\n                {\n                    outOfContains.Add(i);\n                    items[i].gameObject.SetActive(false);\n                }\n                else\n                {\n                    items[i].gameObject.SetActive(true);\n                    contains.Add(index, i);\n                }\n            }\n\n            // *************更改渲染****************\n            for (int i = startIndex; i < endIndex; i++)\n            {\n                if (!contains.ContainsKey(i))\n                {\n                    Transform child = items[outOfContains[0]];\n                    outOfContains.RemoveAt(0);\n                    child.gameObject.SetActive(true);\n                    int row = i/maxPerLine;\n                    int col = i%maxPerLine;\n                    if (arrangement == Arrangement.Vertical)\n                        child.localPosition = startPos +\n                                              new Vector2(col*itemSize.x + (col)*columuSpace,\n                                                  -row*itemSize.y - (row)*rowSpace);\n                    else\n                        child.localPosition = startPos +\n                                              new Vector2(row*itemSize.x + (row)*columuSpace,\n                                                  -col*itemSize.y - (col)*rowSpace);\n                    child.gameObject.name = i.ToString();\n                    if (onItemRender != null)\n                        onItemRender(i, child);\n                }\n                else if (forceRender)\n                {\n                    if (onItemRender != null)\n                        onItemRender(i, items[contains[i]]);\n                }\n            }\n\n            scrollLineIndex = curLineIndex;\n        }\n\n        /// <summary>\n        /// 移除当前所有\n        /// </summary>\n        private void ResetChildren()\n        {\n            items.Clear();\n            for (int i = 0; i < content.childCount; i++)\n            {\n                Transform child = content.GetChild(i);\n                child.gameObject.SetActive(false);\n            }\n        }\n\n        /// <summary>\n        /// 创建新节点\n        /// </summary>\n        /// <param name=\"index\"></param>\n        private RectTransform CreateItem(int index)\n        {\n            Transform child;\n            if (content.childCount > index)\n            {\n                child = content.GetChild(index);\n            }\n            else\n            {\n                GameObject obj = GameObject.Instantiate(item) as GameObject;\n                obj.transform.SetParent(content);\n                obj.transform.localScale = Vector3.one;\n                child = obj.transform;\n            }\n            child.gameObject.name = index.ToString();\n            items.Add(child);\n\n            return child as RectTransform;\n        }\n\n        /// <summary>\n        /// 设置资源\n        /// </summary>\n        /// <param name=\"child\"></param>\n        public void SetItem(GameObject child)\n        {\n            if (child == null) return;\n            this.item = child;\n            RectTransform itemTrans = child.transform as RectTransform;\n            itemTrans.pivot = new Vector2(0, 1);\n            itemSize = itemTrans.sizeDelta;\n            ReBuild();\n        }\n\n        /// <summary>\n        /// 更新需要渲染的个数\n        /// </summary>\n        /// <param name=\"value\"></param>\n        public void SetChildCount(int value, bool forceRender)\n        {\n            if (value < 0) childCount = 0;\n            else childCount = value;\n\n            if(totalCount <= 0)//还未初始化\n                return;\n            if (value > items.Count && items.Count < maxPerLine * totalCount)\n            {\n                //当前格子数量少于应生成的数量\n                int count = items.Count;\n                int max = value < maxPerLine*totalCount ? value : maxPerLine*totalCount;\n                for (int i = count; i < max; i++)\n                {\n                    int row = i / maxPerLine;\n                    int col = i % maxPerLine;\n                    RectTransform child = CreateItem(i);\n                    if (arrangement == Arrangement.Vertical)\n                        child.localPosition = startPos +\n                                              new Vector2(col * itemSize.x + (col) * columuSpace,\n                                                  -row * itemSize.y - (row) * rowSpace);\n                    else\n                        child.localPosition = startPos +\n                                              new Vector2(row * itemSize.x + (row) * columuSpace,\n                                                  -col * itemSize.y - (col) * rowSpace);\n                }\n            } \n\n            if (content == null) return;\n\n            int rc = Mathf.CeilToInt((float) childCount/(float) maxPerLine); //设置content的大小\n            if (arrangement == Arrangement.Horizontal)\n            {\n                content.sizeDelta = new Vector2(marginLeft + marginRight + itemSize.x*rc + columuSpace*(rc - 1),\n                    viewPort.y);\n                if (content.sizeDelta.x > viewPort.x && content.anchoredPosition.x < viewPort.x - content.sizeDelta.x)\n                    content.anchoredPosition = new Vector2(viewPort.x - content.sizeDelta.x, content.anchoredPosition.y);\n            }\n            else\n            {\n                content.sizeDelta = new Vector2(viewPort.x, marginTop + marginBottom + itemSize.y*rc + rowSpace*(rc - 1));\n                if (content.sizeDelta.y > viewPort.y && content.anchoredPosition.y > content.sizeDelta.y - viewPort.y)\n                    content.anchoredPosition = new Vector2(content.anchoredPosition.x, content.sizeDelta.y - viewPort.y);\n            }\n            UpdateRectItem(GetCurLineIndex(), true);\n        }\n\n        /// <summary>\n        /// 添加子节点\n        /// </summary>\n        /// <param name=\"index\"></param>\n        public void AddChild(int index)\n        {\n            if (index < 0) return;\n            startIndex = scrollLineIndex*maxPerLine;\n            endIndex = (scrollLineIndex + totalCount)*maxPerLine;\n            SetChildCount(childCount + 1, index >= startIndex && index < endIndex);\n        }\n\n        /// <summary>\n        /// 删除子节点\n        /// </summary>\n        /// <param name=\"index\"></param>\n        public void RemoveChild(int index)\n        {\n            if (index < 0 || index >= childCount) return;\n            startIndex = scrollLineIndex*maxPerLine;\n            endIndex = (scrollLineIndex + totalCount)*maxPerLine;\n            SetChildCount(childCount - 1, index >= startIndex && index < endIndex);\n        }\n\n\n        /// <summary>\n        /// 设置显示窗口大小(现在貌似可以废弃了)\n        /// </summary>\n        /// <param name=\"port\"></param>\n        public void SetViewPort(Vector2 port)\n        {\n            if (port == viewPort) return;\n            viewPort = port;\n            ReBuild();\n        }\n\n        /// <summary>\n        /// 设置行列最大\n        /// </summary>\n        /// <param name=\"max\"></param>\n        public void SetMaxPerLine(int max)\n        {\n            maxPerLine = max;\n            ReBuild();\n        }\n\n        /// <summary>\n        /// 返回顶部\n        /// </summary>\n        public void BackTop()\n        {\n            content.localPosition = Vector3.zero;\n            UpdateRectItem(0, true);\n        }\n\n        /// <summary>\n        /// 返回底部\n        /// </summary>\n        public void BackBottom()\n        {\n            if (arrangement == Arrangement.Vertical)\n            {\n                content.localPosition = new Vector3(0, -viewPort.y + content.sizeDelta.y, 0);\n            }\n            else\n            {\n                content.localPosition = new Vector3(viewPort.x - content.sizeDelta.x, 0);\n            }\n            UpdateRectItem(Mathf.CeilToInt((float) childCount/(float) maxPerLine) - totalCount + 1, true);\n        }\n\n        public void RefreshViewItem()\n        {\n            UpdateRectItem(scrollLineIndex, true);\n        }\n\n\n        public void SetArrangement(int arr)\n        {\n            arrangement = (Arrangement) arr;\n        }\n\n        public void SetHorizontal(int h)\n        {\n            horizontalAlign = (HorizontalAlign) h;\n        }\n\n        public void SetVerticle(int v)\n        {\n            verticalAlign = (VerticalAlign) v;\n        }\n    }\n}\n```\n\n\n","source":"_posts/无限列表 ScrollView List.md","raw":"---\ntitle: 无限列表 ScrollView List\ndate: 2017-5-2\ntags:\n- UGUI\n- 无限列表\ncategories: UGUI\n---\n\n无线列表的实现好处有一些，主要方法是在ScrollView的值改变的时候改变已存在的渲染子节点位置。最核心的是计算Content的大小及里面的节点位置设置。\n\n``` csharp\nusing System;\nusing System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\nusing UnityEngine.UI;\n\nnamespace Assets.UI\n{\n    /// <summary>\n    /// Introduction: ScrollList\n    /// Author:     Cheng\n    /// Time: \n    /// </summary>\n    [DisallowMultipleComponent]\n    [RequireComponent(typeof (ScrollRect))]\n    public class ScrollList : MonoBehaviour\n    {\n        public delegate void OnItemRender(int index, Transform child);\n\n        public OnItemRender onItemRender;\n\n        /// <summary>\n        /// 排序方式\n        /// </summary>\n        public enum Arrangement\n        {\n            /// <summary>\n            /// 横排\n            /// </summary>\n            Horizontal = 0,\n\n            /// <summary>\n            /// 竖排\n            /// </summary>\n            Vertical,\n        }\n\n        /// <summary>\n        /// 水平对齐\n        /// </summary>\n        public enum HorizontalAlign\n        {\n            /// <summary>\n            /// 居左\n            /// </summary>\n            Left,\n\n            /// <summary>\n            /// 居中\n            /// </summary>\n            Middle,\n\n            /// <summary>\n            /// 局右\n            /// </summary>\n            Right,\n        }\n\n        /// <summary>\n        /// 垂直对齐\n        /// </summary>\n        public enum VerticalAlign\n        {\n            /// <summary>\n            /// 居上\n            /// </summary>\n            Top,\n\n            /// <summary>\n            /// 居中\n            /// </summary>\n            Middle,\n\n            /// <summary>\n            /// 局下\n            /// </summary>\n            Bottom,\n        }\n\n\n        public Arrangement arrangement = Arrangement.Vertical;\n\n        /// <summary>\n        /// 当选择水平或垂直流动是有用，指每行/列最大个数\n        /// </summary>\n        public int MaxPerLine\n        {\n            get { return maxPerLine; }\n            set { SetMaxPerLine(value); }\n        }\n\n        /// <summary>\n        /// 行距\n        /// </summary>\n        public float rowSpace = 0;\n\n        /// <summary>\n        /// 列距\n        /// </summary>\n        public float columuSpace = 0;\n\n        public HorizontalAlign horizontalAlign = HorizontalAlign.Left;\n        public VerticalAlign verticalAlign = VerticalAlign.Top;\n\n        /// <summary>\n        /// 边缘留空 上\n        /// </summary>\n        public float marginTop = 0;\n\n        /// <summary>\n        /// 边缘留空 下\n        /// </summary>\n        public float marginBottom = 0;\n\n        /// <summary>\n        /// 边缘留空 左\n        /// </summary>\n        public float marginLeft = 0;\n\n        /// <summary>\n        /// 边缘留空 右\n        /// </summary>\n        public float marginRight = 0;\n\n        /// <summary>\n        /// 渲染子节点\n        /// </summary>\n        public GameObject Item\n        {\n            get { return item; }\n            set { SetItem(value); }\n        }\n\n        /// <summary>\n        /// 总个数\n        /// </summary>\n        public int ChildCount\n        {\n            get { return childCount; }\n            set { SetChildCount(value, true); }\n        }\n\n        /// <summary>\n        /// 设置显示窗口大小\n        /// </summary>\n        public Vector2 ViewPort\n        {\n            get { return viewPort; }\n            set { SetViewPort(value); }\n        }\n\n        GameObject item;\n        ScrollRect scrollRect;\n        // RectTransform mask;\n        Vector2 viewPort;\n        RectTransform content;\n        Vector2 itemSize;\n        List<Transform> items;\n        Dictionary<int, int> contains;\n        List<int> outOfContains;\n        int childCount; //需要渲染的总数据个数\n        int scrollLineIndex; //当前第一个元素索引\n        int totalCount; //在UI中显示的个数(不乘以maxPerLine)\n        Vector2 startPos; //第一个元素所在位置\n        int startIndex; //当前渲染起始坐标\n        int endIndex; //当前渲染结束坐标\n        int maxPerLine;\n\n        void Start()\n        {\n            maxPerLine = maxPerLine == 0 ? 1 : maxPerLine;\n            items = new List<Transform>();\n            contains = new Dictionary<int, int>();\n            outOfContains = new List<int>();\n            scrollRect = transform.GetComponent<ScrollRect>();\n            // mask = scrollRect.GetComponentInChildren<Mask>().rectTransform;\n            content = scrollRect.content;\n            if (content == null)\n            {\n                Debug.Log(\"ScrollRect \" + scrollRect.gameObject.name + \" Has No Content, Please Check And Retry.\");\n                return;\n            }\n            content.anchorMax = new Vector2(0, 1);\n            content.anchorMin = new Vector2(0, 1);\n            content.pivot = new Vector2(0, 1);\n            ReBuild();\n        }\n\n\n        /// <summary>\n        /// 当子节点、Mask、maxPerLine\n        /// </summary>\n        public void ReBuild()\n        {\n            if (scrollRect == null || content == null || item == null) return;\n            ResetChildren();\n\n            Vector2 maskSize = viewPort;\n            int count = 0;\n\n            if (arrangement == Arrangement.Horizontal)\n            {\n                count = Mathf.CeilToInt(maskSize.x/itemSize.x) + 1; //横向列数\n                startPos = Vector2.zero;\n                startPos.x = marginLeft;\n                if (verticalAlign == VerticalAlign.Top)\n                {\n                    startPos.y = -marginTop;\n                }\n                else if (verticalAlign == VerticalAlign.Middle)\n                {\n                    startPos.y = -(maskSize.y*0.5f - (itemSize.y*maxPerLine + (maxPerLine - 1)*rowSpace)*0.5f);\n                }\n                else if (verticalAlign == VerticalAlign.Bottom)\n                {\n                    startPos.y = -(maskSize.y - marginBottom - itemSize.y*maxPerLine - rowSpace*(maxPerLine - 1));\n                }\n\n                for (int i = 0; i < count; i++)\n                {\n                    for (int j = 0; j < maxPerLine; j++)\n                    {\n                        RectTransform child = CreateItem(i*maxPerLine + j);\n                        child.localPosition = startPos +\n                                              new Vector2(i*itemSize.x + i*columuSpace, -j*itemSize.y - j*rowSpace);\n                    }\n                }\n            }\n            else if (arrangement == Arrangement.Vertical)\n            {\n                count = Mathf.CeilToInt(maskSize.y/itemSize.y) + 1; //竖向行数\n                startPos = Vector2.zero;\n                startPos.y = -marginTop; //重置开始节点位置\n                if (horizontalAlign == HorizontalAlign.Left)\n                {\n                    startPos.x = marginLeft;\n                }\n                else if (horizontalAlign == HorizontalAlign.Middle)\n                {\n                    startPos.x = (maskSize.x*0.5f - (itemSize.x*maxPerLine + (maxPerLine - 1)*columuSpace)*0.5f);\n                }\n                else if (horizontalAlign == HorizontalAlign.Right)\n                {\n                    startPos.x = maskSize.x - marginRight - itemSize.x*maxPerLine - columuSpace*(maxPerLine - 1);\n                }\n\n                for (int i = 0; i < count; i++)\n                {\n                    for (int j = 0; j < maxPerLine; j++)\n                    {\n                        RectTransform child = CreateItem(i*maxPerLine + j);\n                        child.localPosition = startPos +\n                                              new Vector2(j*itemSize.x + j*columuSpace, -i*itemSize.y - i*rowSpace);\n                    }\n                }\n            }\n            totalCount = count;\n\n            SetChildCount(childCount, true);\n            BackTop();\n\n            scrollRect.onValueChanged.RemoveAllListeners();\n            scrollRect.onValueChanged.AddListener(OnValueChanged);\n        }\n\n        /// <summary>\n        /// 列表滚动\n        /// </summary>\n        /// <param name=\"vec\"></param>\n        private void OnValueChanged(Vector2 vec)\n        {\n            switch (arrangement)\n            {\n                case Arrangement.Horizontal:\n                 //   if (vec.x < 0.0f || vec.x >= 1.0f)\n                 //       return;\n                        vec.x = Mathf.Clamp(vec.x, 0, 1);\n                    break;\n                case Arrangement.Vertical:\n                 //   if (vec.y <= 0.0f || vec.y >= 1.0f)\n                 //       return;\n                        vec.y = Mathf.Clamp(vec.y, 0, 1);\n                    break;\n            }\n\n            int curLineIndex = GetCurLineIndex();\n            if (curLineIndex != scrollLineIndex)\n                UpdateRectItem(curLineIndex, false);\n        }\n\n        /// <summary>\n        /// 获取页面第一行索引\n        /// </summary>\n        /// <returns></returns>\n        private int GetCurLineIndex()\n        {\n            switch (arrangement)\n            {\n                case Arrangement.Horizontal:\n                    return\n                        Mathf.FloorToInt(Mathf.Abs(Mathf.Abs(content.anchoredPosition.x) - marginLeft)/\n                                         (columuSpace + itemSize.x));\n                case Arrangement.Vertical:\n                    return\n                        Mathf.FloorToInt(Mathf.Abs(Mathf.Abs(content.anchoredPosition.y) - marginTop)/\n                                         (rowSpace + itemSize.y));\n            }\n            return 0;\n        }\n\n        /// <summary>\n        /// 更新数据（待修改问出现的才刷新）\n        /// </summary>\n        /// <param name=\"curLineIndex\"></param>\n        /// <param name=\"forceRender\"></param>\n        private void UpdateRectItem(int curLineIndex, bool forceRender)\n        {\n            if (curLineIndex < 0)\n                return;\n            startIndex = curLineIndex*maxPerLine;\n            endIndex = (curLineIndex + totalCount)*maxPerLine;\n            if (endIndex >= childCount)\n                endIndex = childCount;\n\n            contains.Clear(); //渲染序号\n            outOfContains.Clear(); //items的索引\n            for (int i = 0; i < items.Count; i++)//如果当前已渲染的item中包含\n            {\n                int index = int.Parse(items[i].gameObject.name);\n                if (index < startIndex || index >= endIndex)\n                {\n                    outOfContains.Add(i);\n                    items[i].gameObject.SetActive(false);\n                }\n                else\n                {\n                    items[i].gameObject.SetActive(true);\n                    contains.Add(index, i);\n                }\n            }\n\n            // *************更改渲染****************\n            for (int i = startIndex; i < endIndex; i++)\n            {\n                if (!contains.ContainsKey(i))\n                {\n                    Transform child = items[outOfContains[0]];\n                    outOfContains.RemoveAt(0);\n                    child.gameObject.SetActive(true);\n                    int row = i/maxPerLine;\n                    int col = i%maxPerLine;\n                    if (arrangement == Arrangement.Vertical)\n                        child.localPosition = startPos +\n                                              new Vector2(col*itemSize.x + (col)*columuSpace,\n                                                  -row*itemSize.y - (row)*rowSpace);\n                    else\n                        child.localPosition = startPos +\n                                              new Vector2(row*itemSize.x + (row)*columuSpace,\n                                                  -col*itemSize.y - (col)*rowSpace);\n                    child.gameObject.name = i.ToString();\n                    if (onItemRender != null)\n                        onItemRender(i, child);\n                }\n                else if (forceRender)\n                {\n                    if (onItemRender != null)\n                        onItemRender(i, items[contains[i]]);\n                }\n            }\n\n            scrollLineIndex = curLineIndex;\n        }\n\n        /// <summary>\n        /// 移除当前所有\n        /// </summary>\n        private void ResetChildren()\n        {\n            items.Clear();\n            for (int i = 0; i < content.childCount; i++)\n            {\n                Transform child = content.GetChild(i);\n                child.gameObject.SetActive(false);\n            }\n        }\n\n        /// <summary>\n        /// 创建新节点\n        /// </summary>\n        /// <param name=\"index\"></param>\n        private RectTransform CreateItem(int index)\n        {\n            Transform child;\n            if (content.childCount > index)\n            {\n                child = content.GetChild(index);\n            }\n            else\n            {\n                GameObject obj = GameObject.Instantiate(item) as GameObject;\n                obj.transform.SetParent(content);\n                obj.transform.localScale = Vector3.one;\n                child = obj.transform;\n            }\n            child.gameObject.name = index.ToString();\n            items.Add(child);\n\n            return child as RectTransform;\n        }\n\n        /// <summary>\n        /// 设置资源\n        /// </summary>\n        /// <param name=\"child\"></param>\n        public void SetItem(GameObject child)\n        {\n            if (child == null) return;\n            this.item = child;\n            RectTransform itemTrans = child.transform as RectTransform;\n            itemTrans.pivot = new Vector2(0, 1);\n            itemSize = itemTrans.sizeDelta;\n            ReBuild();\n        }\n\n        /// <summary>\n        /// 更新需要渲染的个数\n        /// </summary>\n        /// <param name=\"value\"></param>\n        public void SetChildCount(int value, bool forceRender)\n        {\n            if (value < 0) childCount = 0;\n            else childCount = value;\n\n            if (content == null) return;\n\n            int rc = Mathf.CeilToInt((float) childCount/(float) maxPerLine); //设置content的大小\n            if (arrangement == Arrangement.Horizontal)\n            {\n                content.sizeDelta = new Vector2(marginLeft + marginRight + itemSize.x*rc + columuSpace*(rc - 1),\n                    viewPort.y);\n                if (content.sizeDelta.x > viewPort.x && content.anchoredPosition.x < viewPort.x - content.sizeDelta.x)\n                    content.anchoredPosition = new Vector2(viewPort.x - content.sizeDelta.x, content.anchoredPosition.y);\n            }\n            else\n            {\n                content.sizeDelta = new Vector2(viewPort.x, marginTop + marginBottom + itemSize.y*rc + rowSpace*(rc - 1));\n                if (content.sizeDelta.y > viewPort.y && content.anchoredPosition.y > content.sizeDelta.y - viewPort.y)\n                    content.anchoredPosition = new Vector2(content.anchoredPosition.x, content.sizeDelta.y - viewPort.y);\n            }\n            UpdateRectItem(GetCurLineIndex(), true);\n        }\n\n        /// <summary>\n        /// 添加子节点\n        /// </summary>\n        /// <param name=\"index\"></param>\n        public void AddChild(int index)\n        {\n            if (index < 0) return;\n            startIndex = scrollLineIndex*maxPerLine;\n            endIndex = (scrollLineIndex + totalCount)*maxPerLine;\n            SetChildCount(childCount + 1, index >= startIndex && index < endIndex);\n        }\n\n        /// <summary>\n        /// 删除子节点\n        /// </summary>\n        /// <param name=\"index\"></param>\n        public void RemoveChild(int index)\n        {\n            if (index < 0 || index >= childCount) return;\n            startIndex = scrollLineIndex*maxPerLine;\n            endIndex = (scrollLineIndex + totalCount)*maxPerLine;\n            SetChildCount(childCount - 1, index >= startIndex && index < endIndex);\n        }\n\n\n        /// <summary>\n        /// 设置显示窗口大小\n        /// </summary>\n        /// <param name=\"port\"></param>\n        public void SetViewPort(Vector2 port)\n        {\n            if (port == viewPort) return;\n            viewPort = port;\n            ReBuild();\n        }\n\n        /// <summary>\n        /// 设置行列最大\n        /// </summary>\n        /// <param name=\"max\"></param>\n        public void SetMaxPerLine(int max)\n        {\n            maxPerLine = max;\n            ReBuild();\n        }\n\n        /// <summary>\n        /// 返回顶部\n        /// </summary>\n        public void BackTop()\n        {\n            content.localPosition = Vector3.zero;\n            UpdateRectItem(0, true);\n        }\n\n        /// <summary>\n        /// 返回底部\n        /// </summary>\n        public void BackBottom()\n        {\n            if (arrangement == Arrangement.Vertical)\n            {\n                content.localPosition = new Vector3(0, -viewPort.y + content.sizeDelta.y, 0);\n            }\n            else\n            {\n                content.localPosition = new Vector3(viewPort.x - content.sizeDelta.x, 0);\n            }\n            UpdateRectItem(Mathf.CeilToInt((float) childCount/(float) maxPerLine) - totalCount + 1, true);\n        }\n\n        public void RefreshViewItem()\n        {\n            UpdateRectItem(scrollLineIndex, true);\n        }\n\n    }\n}\n```\n\n效果：\n![图片来源我的csdn](http://img.blog.csdn.net/20170502192738648?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvQ2hlbmc2MjQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center)\n\n当选择水平布局的时候“每行个数”会切换为“每列个数”。\n由于Mask的锚点设置时相对父节点全局拉伸，我没看到怎么获取他的Size， 所以写了一个 “显示窗口” 及ViewPort来手动填他的大小。\n\n**实际使用中发现了一些问题，做出一些优化，最终代码为：**\n\n``` csharp\n\nusing System;\nusing System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\nusing UnityEngine.UI;\n\nnamespace Assets.UI\n{\n    /// <summary>\n    /// Introduction: 无限列表\n    ///             Content上禁止挂载ContentSizeFilter和LayOutGroup之类组件\n    /// Author:     Cheng\n    /// Time: \n    /// </summary>\n    [DisallowMultipleComponent]\n    [RequireComponent(typeof (ScrollRect))]\n    public class ScrollList : MonoBehaviour\n    {\n        public delegate void OnItemRender(int index, Transform child);\n\n        public OnItemRender onItemRender;\n\n        /// <summary>\n        /// 排序方式\n        /// </summary>\n        public enum Arrangement\n        {\n            /// <summary>\n            /// 横排\n            /// </summary>\n            Horizontal = 0,\n\n            /// <summary>\n            /// 竖排\n            /// </summary>\n            Vertical,\n        }\n\n        /// <summary>\n        /// 水平对齐\n        /// </summary>\n        public enum HorizontalAlign\n        {\n            /// <summary>\n            /// 居左\n            /// </summary>\n            Left,\n\n            /// <summary>\n            /// 居中\n            /// </summary>\n            Middle,\n\n            /// <summary>\n            /// 局右\n            /// </summary>\n            Right,\n        }\n\n        /// <summary>\n        /// 垂直对齐\n        /// </summary>\n        public enum VerticalAlign\n        {\n            /// <summary>\n            /// 居上\n            /// </summary>\n            Top,\n\n            /// <summary>\n            /// 居中\n            /// </summary>\n            Middle,\n\n            /// <summary>\n            /// 局下\n            /// </summary>\n            Bottom,\n        }\n\n\n        public Arrangement arrangement = Arrangement.Vertical;\n\n        /// <summary>\n        /// 当选择水平或垂直流动是有用，指每行/列最大个数\n        /// </summary>\n        public int MaxPerLine\n        {\n            get { return maxPerLine; }\n            set { SetMaxPerLine(value); }\n        }\n\n        /// <summary>\n        /// 行距\n        /// </summary>\n        public float rowSpace = 0;\n\n        /// <summary>\n        /// 列距\n        /// </summary>\n        public float columuSpace = 0;\n\n        public HorizontalAlign horizontalAlign = HorizontalAlign.Left;\n        public VerticalAlign verticalAlign = VerticalAlign.Top;\n\n        /// <summary>\n        /// 边缘留空 上\n        /// </summary>\n        public float marginTop = 0;\n\n        /// <summary>\n        /// 边缘留空 下\n        /// </summary>\n        public float marginBottom = 0;\n\n        /// <summary>\n        /// 边缘留空 左\n        /// </summary>\n        public float marginLeft = 0;\n\n        /// <summary>\n        /// 边缘留空 右\n        /// </summary>\n        public float marginRight = 0;\n\n        /// <summary>\n        /// 渲染子节点\n        /// </summary>\n        public GameObject Child\n        {\n            get { return item; }\n            set { SetItem(value); }\n        }\n\n        /// <summary>\n        /// 总个数\n        /// </summary>\n        public int ChildCount\n        {\n            get { return childCount; }\n            set { SetChildCount(value, true); }\n        }\n\n        /// <summary>\n        /// 设置显示窗口大小\n        /// </summary>\n        public Vector2 ViewPort\n        {\n            get { return viewPort; }\n            set { SetViewPort(value); }\n        }\n\n        GameObject item;\n        ScrollRect scrollRect;\n        Vector2 viewPort;\n        RectTransform content;\n        Vector2 itemSize;\n        List<Transform> items;\n        Dictionary<int, int> contains;\n        List<int> outOfContains;\n        int childCount; //需要渲染的总数据个数\n        int scrollLineIndex; //当前第一个元素索引\n        int totalCount; //在UI中显示的个数(不乘以maxPerLine)\n        Vector2 startPos; //第一个元素所在位置\n        int startIndex; //当前渲染起始坐标\n        int endIndex; //当前渲染结束坐标\n        int maxPerLine;\n\n        void Start()\n        {\n            maxPerLine = maxPerLine == 0 ? 1 : maxPerLine;\n            items = new List<Transform>();\n            contains = new Dictionary<int, int>();\n            outOfContains = new List<int>();\n            scrollRect = transform.GetComponent<ScrollRect>();\n            content = scrollRect.content;\n            if (content == null)\n            {\n                Debug.Log(\"ScrollRect \" + scrollRect.gameObject.name + \" Has No Content, Please Check And Retry.\");\n                return;\n            }\n            viewPort = scrollRect.viewport.rect.size;\n\n            content.anchorMax = new Vector2(0, 1);\n            content.anchorMin = new Vector2(0, 1);\n            content.pivot = new Vector2(0, 1);\n            ReBuild();\n        }\n\n\n        /// <summary>\n        /// 当子节点、Mask、maxPerLine\n        /// </summary>\n        public void ReBuild()\n        {\n            if (scrollRect == null || content == null || item == null) return;\n            ResetChildren();\n\n            Vector2 maskSize = viewPort;\n            int count = 0;\n\n            if (arrangement == Arrangement.Horizontal)\n            {\n                count = Mathf.CeilToInt(maskSize.x/itemSize.x) + 1; //横向列数\n                startPos = Vector2.zero;\n                startPos.x = marginLeft;\n                if (verticalAlign == VerticalAlign.Top)\n                {\n                    startPos.y = -marginTop;\n                }\n                else if (verticalAlign == VerticalAlign.Middle)\n                {\n                    startPos.y = -(maskSize.y*0.5f - (itemSize.y*maxPerLine + (maxPerLine - 1)*rowSpace)*0.5f);\n                }\n                else if (verticalAlign == VerticalAlign.Bottom)\n                {\n                    startPos.y = -(maskSize.y - marginBottom - itemSize.y*maxPerLine - rowSpace*(maxPerLine - 1));\n                }\n                //优化：不在一开始生产所有的可见格子\n                //for (int i = 0; i < count; i++)\n                //{\n                //    for (int j = 0; j < maxPerLine; j++)\n                //    {\n                //        RectTransform child = CreateItem(i*maxPerLine + j);\n                //        child.localPosition = startPos +\n                //                              new Vector2(i*itemSize.x + i*columuSpace, -j*itemSize.y - j*rowSpace);\n                //    }\n                //}\n            }\n            else if (arrangement == Arrangement.Vertical)\n            {\n                count = Mathf.CeilToInt(maskSize.y/itemSize.y) + 1; //竖向行数\n                startPos = Vector2.zero;\n                startPos.y = -marginTop; //重置开始节点位置\n                if (horizontalAlign == HorizontalAlign.Left)\n                {\n                    startPos.x = marginLeft;\n                }\n                else if (horizontalAlign == HorizontalAlign.Middle)\n                {\n                    startPos.x = (maskSize.x*0.5f - (itemSize.x*maxPerLine + (maxPerLine - 1)*columuSpace)*0.5f);\n                }\n                else if (horizontalAlign == HorizontalAlign.Right)\n                {\n                    startPos.x = maskSize.x - marginRight - itemSize.x*maxPerLine - columuSpace*(maxPerLine - 1);\n                }\n\n                //for (int i = 0; i < count; i++)\n                //{\n                //    for (int j = 0; j < maxPerLine; j++)\n                //    {\n                //        RectTransform child = CreateItem(i*maxPerLine + j);\n                //        child.localPosition = startPos +\n                //                              new Vector2(j*itemSize.x + j*columuSpace, -i*itemSize.y - i*rowSpace);\n                //    }\n                //}\n            }\n            totalCount = count;\n\n            SetChildCount(childCount, true);\n            BackTop();\n\n            scrollRect.onValueChanged.RemoveAllListeners();\n            scrollRect.onValueChanged.AddListener(OnValueChanged);\n        }\n\n        /// <summary>\n        /// 列表滚动\n        /// </summary>\n        /// <param name=\"vec\"></param>\n        private void OnValueChanged(Vector2 vec)\n        {\n            switch (arrangement)\n            {\n                case Arrangement.Horizontal:\n                 //   if (vec.x < 0.0f || vec.x >= 1.0f)\n                 //       return;\n                        vec.x = Mathf.Clamp(vec.x, 0, 1);\n                    break;\n                case Arrangement.Vertical:\n                 //   if (vec.y <= 0.0f || vec.y >= 1.0f)\n                 //       return;\n                        vec.y = Mathf.Clamp(vec.y, 0, 1);\n                    break;\n            }\n\n            int curLineIndex = GetCurLineIndex();\n            if (curLineIndex != scrollLineIndex)\n                UpdateRectItem(curLineIndex, false);\n        }\n\n        /// <summary>\n        /// 获取页面第一行索引\n        /// </summary>\n        /// <returns></returns>\n        private int GetCurLineIndex()\n        {\n            switch (arrangement)\n            {\n                case Arrangement.Horizontal:\n                    return\n                        Mathf.FloorToInt(Mathf.Abs(content.anchoredPosition.x < 0.1f? content.anchoredPosition.x : 0.1f - marginLeft)/\n                                         (columuSpace + itemSize.x));\n                case Arrangement.Vertical:\n                    return\n                        Mathf.FloorToInt(Mathf.Abs(content.anchoredPosition.y>-0.1f?content.anchoredPosition.y:-0.1f - marginTop)/\n                                         (rowSpace + itemSize.y));\n            }\n            return 0;\n        }\n\n        /// <summary>\n        /// 更新数据（待修改问出现的才刷新）\n        /// </summary>\n        /// <param name=\"curLineIndex\"></param>\n        /// <param name=\"forceRender\"></param>\n        private void UpdateRectItem(int curLineIndex, bool forceRender)\n        {\n            if (curLineIndex < 0)\n                return;\n            startIndex = curLineIndex*maxPerLine;\n            endIndex = (curLineIndex + totalCount)*maxPerLine;\n            if (endIndex >= childCount)\n                endIndex = childCount;\n\n            contains.Clear(); //渲染序号\n            outOfContains.Clear(); //items的索引\n            for (int i = 0; i < items.Count; i++)//如果当前已渲染的item中包含\n            {\n                int index = int.Parse(items[i].gameObject.name);\n                if (index < startIndex || index >= endIndex)\n                {\n                    outOfContains.Add(i);\n                    items[i].gameObject.SetActive(false);\n                }\n                else\n                {\n                    items[i].gameObject.SetActive(true);\n                    contains.Add(index, i);\n                }\n            }\n\n            // *************更改渲染****************\n            for (int i = startIndex; i < endIndex; i++)\n            {\n                if (!contains.ContainsKey(i))\n                {\n                    Transform child = items[outOfContains[0]];\n                    outOfContains.RemoveAt(0);\n                    child.gameObject.SetActive(true);\n                    int row = i/maxPerLine;\n                    int col = i%maxPerLine;\n                    if (arrangement == Arrangement.Vertical)\n                        child.localPosition = startPos +\n                                              new Vector2(col*itemSize.x + (col)*columuSpace,\n                                                  -row*itemSize.y - (row)*rowSpace);\n                    else\n                        child.localPosition = startPos +\n                                              new Vector2(row*itemSize.x + (row)*columuSpace,\n                                                  -col*itemSize.y - (col)*rowSpace);\n                    child.gameObject.name = i.ToString();\n                    if (onItemRender != null)\n                        onItemRender(i, child);\n                }\n                else if (forceRender)\n                {\n                    if (onItemRender != null)\n                        onItemRender(i, items[contains[i]]);\n                }\n            }\n\n            scrollLineIndex = curLineIndex;\n        }\n\n        /// <summary>\n        /// 移除当前所有\n        /// </summary>\n        private void ResetChildren()\n        {\n            items.Clear();\n            for (int i = 0; i < content.childCount; i++)\n            {\n                Transform child = content.GetChild(i);\n                child.gameObject.SetActive(false);\n            }\n        }\n\n        /// <summary>\n        /// 创建新节点\n        /// </summary>\n        /// <param name=\"index\"></param>\n        private RectTransform CreateItem(int index)\n        {\n            Transform child;\n            if (content.childCount > index)\n            {\n                child = content.GetChild(index);\n            }\n            else\n            {\n                GameObject obj = GameObject.Instantiate(item) as GameObject;\n                obj.transform.SetParent(content);\n                obj.transform.localScale = Vector3.one;\n                child = obj.transform;\n            }\n            child.gameObject.name = index.ToString();\n            items.Add(child);\n\n            return child as RectTransform;\n        }\n\n        /// <summary>\n        /// 设置资源\n        /// </summary>\n        /// <param name=\"child\"></param>\n        public void SetItem(GameObject child)\n        {\n            if (child == null) return;\n            this.item = child;\n            RectTransform itemTrans = child.transform as RectTransform;\n            itemTrans.pivot = new Vector2(0, 1);\n            itemSize = itemTrans.sizeDelta;\n            ReBuild();\n        }\n\n        /// <summary>\n        /// 更新需要渲染的个数\n        /// </summary>\n        /// <param name=\"value\"></param>\n        public void SetChildCount(int value, bool forceRender)\n        {\n            if (value < 0) childCount = 0;\n            else childCount = value;\n\n            if(totalCount <= 0)//还未初始化\n                return;\n            if (value > items.Count && items.Count < maxPerLine * totalCount)\n            {\n                //当前格子数量少于应生成的数量\n                int count = items.Count;\n                int max = value < maxPerLine*totalCount ? value : maxPerLine*totalCount;\n                for (int i = count; i < max; i++)\n                {\n                    int row = i / maxPerLine;\n                    int col = i % maxPerLine;\n                    RectTransform child = CreateItem(i);\n                    if (arrangement == Arrangement.Vertical)\n                        child.localPosition = startPos +\n                                              new Vector2(col * itemSize.x + (col) * columuSpace,\n                                                  -row * itemSize.y - (row) * rowSpace);\n                    else\n                        child.localPosition = startPos +\n                                              new Vector2(row * itemSize.x + (row) * columuSpace,\n                                                  -col * itemSize.y - (col) * rowSpace);\n                }\n            } \n\n            if (content == null) return;\n\n            int rc = Mathf.CeilToInt((float) childCount/(float) maxPerLine); //设置content的大小\n            if (arrangement == Arrangement.Horizontal)\n            {\n                content.sizeDelta = new Vector2(marginLeft + marginRight + itemSize.x*rc + columuSpace*(rc - 1),\n                    viewPort.y);\n                if (content.sizeDelta.x > viewPort.x && content.anchoredPosition.x < viewPort.x - content.sizeDelta.x)\n                    content.anchoredPosition = new Vector2(viewPort.x - content.sizeDelta.x, content.anchoredPosition.y);\n            }\n            else\n            {\n                content.sizeDelta = new Vector2(viewPort.x, marginTop + marginBottom + itemSize.y*rc + rowSpace*(rc - 1));\n                if (content.sizeDelta.y > viewPort.y && content.anchoredPosition.y > content.sizeDelta.y - viewPort.y)\n                    content.anchoredPosition = new Vector2(content.anchoredPosition.x, content.sizeDelta.y - viewPort.y);\n            }\n            UpdateRectItem(GetCurLineIndex(), true);\n        }\n\n        /// <summary>\n        /// 添加子节点\n        /// </summary>\n        /// <param name=\"index\"></param>\n        public void AddChild(int index)\n        {\n            if (index < 0) return;\n            startIndex = scrollLineIndex*maxPerLine;\n            endIndex = (scrollLineIndex + totalCount)*maxPerLine;\n            SetChildCount(childCount + 1, index >= startIndex && index < endIndex);\n        }\n\n        /// <summary>\n        /// 删除子节点\n        /// </summary>\n        /// <param name=\"index\"></param>\n        public void RemoveChild(int index)\n        {\n            if (index < 0 || index >= childCount) return;\n            startIndex = scrollLineIndex*maxPerLine;\n            endIndex = (scrollLineIndex + totalCount)*maxPerLine;\n            SetChildCount(childCount - 1, index >= startIndex && index < endIndex);\n        }\n\n\n        /// <summary>\n        /// 设置显示窗口大小(现在貌似可以废弃了)\n        /// </summary>\n        /// <param name=\"port\"></param>\n        public void SetViewPort(Vector2 port)\n        {\n            if (port == viewPort) return;\n            viewPort = port;\n            ReBuild();\n        }\n\n        /// <summary>\n        /// 设置行列最大\n        /// </summary>\n        /// <param name=\"max\"></param>\n        public void SetMaxPerLine(int max)\n        {\n            maxPerLine = max;\n            ReBuild();\n        }\n\n        /// <summary>\n        /// 返回顶部\n        /// </summary>\n        public void BackTop()\n        {\n            content.localPosition = Vector3.zero;\n            UpdateRectItem(0, true);\n        }\n\n        /// <summary>\n        /// 返回底部\n        /// </summary>\n        public void BackBottom()\n        {\n            if (arrangement == Arrangement.Vertical)\n            {\n                content.localPosition = new Vector3(0, -viewPort.y + content.sizeDelta.y, 0);\n            }\n            else\n            {\n                content.localPosition = new Vector3(viewPort.x - content.sizeDelta.x, 0);\n            }\n            UpdateRectItem(Mathf.CeilToInt((float) childCount/(float) maxPerLine) - totalCount + 1, true);\n        }\n\n        public void RefreshViewItem()\n        {\n            UpdateRectItem(scrollLineIndex, true);\n        }\n\n\n        public void SetArrangement(int arr)\n        {\n            arrangement = (Arrangement) arr;\n        }\n\n        public void SetHorizontal(int h)\n        {\n            horizontalAlign = (HorizontalAlign) h;\n        }\n\n        public void SetVerticle(int v)\n        {\n            verticalAlign = (VerticalAlign) v;\n        }\n    }\n}\n```\n\n\n","slug":"无限列表 ScrollView List","published":1,"updated":"2017-10-26T11:00:55.215Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj9fm90uc001i2cobfbnmuvuo","content":"<p>无线列表的实现好处有一些，主要方法是在ScrollView的值改变的时候改变已存在的渲染子节点位置。最核心的是计算Content的大小及里面的节点位置设置。</p>\n<pre class=\"line-numbers language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">using</span> System<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> System<span class=\"token punctuation\">.</span>Collections<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> System<span class=\"token punctuation\">.</span>Collections<span class=\"token punctuation\">.</span>Generic<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> UnityEngine<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> UnityEngine<span class=\"token punctuation\">.</span>UI<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">namespace</span> Assets<span class=\"token punctuation\">.</span>UI\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// &lt;summary></span>\n    <span class=\"token comment\" spellcheck=\"true\">/// Introduction: ScrollList</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// Author:     Cheng</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// Time: </span>\n    <span class=\"token comment\" spellcheck=\"true\">/// &lt;/summary></span>\n    <span class=\"token punctuation\">[</span>DisallowMultipleComponent<span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">[</span><span class=\"token function\">RequireComponent</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> <span class=\"token punctuation\">(</span>ScrollRect<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ScrollList</span> <span class=\"token punctuation\">:</span> MonoBehaviour\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">delegate</span> <span class=\"token keyword\">void</span> <span class=\"token function\">OnItemRender</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> index<span class=\"token punctuation\">,</span> Transform child<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">public</span> OnItemRender onItemRender<span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;summary></span>\n        <span class=\"token comment\" spellcheck=\"true\">/// 排序方式</span>\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;/summary></span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">enum</span> Arrangement\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\" spellcheck=\"true\">/// &lt;summary></span>\n            <span class=\"token comment\" spellcheck=\"true\">/// 横排</span>\n            <span class=\"token comment\" spellcheck=\"true\">/// &lt;/summary></span>\n            Horizontal <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n\n            <span class=\"token comment\" spellcheck=\"true\">/// &lt;summary></span>\n            <span class=\"token comment\" spellcheck=\"true\">/// 竖排</span>\n            <span class=\"token comment\" spellcheck=\"true\">/// &lt;/summary></span>\n            Vertical<span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;summary></span>\n        <span class=\"token comment\" spellcheck=\"true\">/// 水平对齐</span>\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;/summary></span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">enum</span> HorizontalAlign\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\" spellcheck=\"true\">/// &lt;summary></span>\n            <span class=\"token comment\" spellcheck=\"true\">/// 居左</span>\n            <span class=\"token comment\" spellcheck=\"true\">/// &lt;/summary></span>\n            Left<span class=\"token punctuation\">,</span>\n\n            <span class=\"token comment\" spellcheck=\"true\">/// &lt;summary></span>\n            <span class=\"token comment\" spellcheck=\"true\">/// 居中</span>\n            <span class=\"token comment\" spellcheck=\"true\">/// &lt;/summary></span>\n            Middle<span class=\"token punctuation\">,</span>\n\n            <span class=\"token comment\" spellcheck=\"true\">/// &lt;summary></span>\n            <span class=\"token comment\" spellcheck=\"true\">/// 局右</span>\n            <span class=\"token comment\" spellcheck=\"true\">/// &lt;/summary></span>\n            Right<span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;summary></span>\n        <span class=\"token comment\" spellcheck=\"true\">/// 垂直对齐</span>\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;/summary></span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">enum</span> VerticalAlign\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\" spellcheck=\"true\">/// &lt;summary></span>\n            <span class=\"token comment\" spellcheck=\"true\">/// 居上</span>\n            <span class=\"token comment\" spellcheck=\"true\">/// &lt;/summary></span>\n            Top<span class=\"token punctuation\">,</span>\n\n            <span class=\"token comment\" spellcheck=\"true\">/// &lt;summary></span>\n            <span class=\"token comment\" spellcheck=\"true\">/// 居中</span>\n            <span class=\"token comment\" spellcheck=\"true\">/// &lt;/summary></span>\n            Middle<span class=\"token punctuation\">,</span>\n\n            <span class=\"token comment\" spellcheck=\"true\">/// &lt;summary></span>\n            <span class=\"token comment\" spellcheck=\"true\">/// 局下</span>\n            <span class=\"token comment\" spellcheck=\"true\">/// &lt;/summary></span>\n            Bottom<span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span>\n\n\n        <span class=\"token keyword\">public</span> Arrangement arrangement <span class=\"token operator\">=</span> Arrangement<span class=\"token punctuation\">.</span>Vertical<span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;summary></span>\n        <span class=\"token comment\" spellcheck=\"true\">/// 当选择水平或垂直流动是有用，指每行/列最大个数</span>\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;/summary></span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> MaxPerLine\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">get</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> maxPerLine<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">set</span> <span class=\"token punctuation\">{</span> <span class=\"token function\">SetMaxPerLine</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">value</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;summary></span>\n        <span class=\"token comment\" spellcheck=\"true\">/// 行距</span>\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;/summary></span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">float</span> rowSpace <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;summary></span>\n        <span class=\"token comment\" spellcheck=\"true\">/// 列距</span>\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;/summary></span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">float</span> columuSpace <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">public</span> HorizontalAlign horizontalAlign <span class=\"token operator\">=</span> HorizontalAlign<span class=\"token punctuation\">.</span>Left<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">public</span> VerticalAlign verticalAlign <span class=\"token operator\">=</span> VerticalAlign<span class=\"token punctuation\">.</span>Top<span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;summary></span>\n        <span class=\"token comment\" spellcheck=\"true\">/// 边缘留空 上</span>\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;/summary></span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">float</span> marginTop <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;summary></span>\n        <span class=\"token comment\" spellcheck=\"true\">/// 边缘留空 下</span>\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;/summary></span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">float</span> marginBottom <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;summary></span>\n        <span class=\"token comment\" spellcheck=\"true\">/// 边缘留空 左</span>\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;/summary></span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">float</span> marginLeft <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;summary></span>\n        <span class=\"token comment\" spellcheck=\"true\">/// 边缘留空 右</span>\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;/summary></span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">float</span> marginRight <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;summary></span>\n        <span class=\"token comment\" spellcheck=\"true\">/// 渲染子节点</span>\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;/summary></span>\n        <span class=\"token keyword\">public</span> GameObject Item\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">get</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> item<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">set</span> <span class=\"token punctuation\">{</span> <span class=\"token function\">SetItem</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">value</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;summary></span>\n        <span class=\"token comment\" spellcheck=\"true\">/// 总个数</span>\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;/summary></span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> ChildCount\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">get</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> childCount<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">set</span> <span class=\"token punctuation\">{</span> <span class=\"token function\">SetChildCount</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">value</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;summary></span>\n        <span class=\"token comment\" spellcheck=\"true\">/// 设置显示窗口大小</span>\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;/summary></span>\n        <span class=\"token keyword\">public</span> Vector2 ViewPort\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">get</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> viewPort<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">set</span> <span class=\"token punctuation\">{</span> <span class=\"token function\">SetViewPort</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">value</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        GameObject item<span class=\"token punctuation\">;</span>\n        ScrollRect scrollRect<span class=\"token punctuation\">;</span>\n        <span class=\"token comment\" spellcheck=\"true\">// RectTransform mask;</span>\n        Vector2 viewPort<span class=\"token punctuation\">;</span>\n        RectTransform content<span class=\"token punctuation\">;</span>\n        Vector2 itemSize<span class=\"token punctuation\">;</span>\n        List<span class=\"token operator\">&lt;</span>Transform<span class=\"token operator\">></span> items<span class=\"token punctuation\">;</span>\n        Dictionary<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">></span> contains<span class=\"token punctuation\">;</span>\n        List<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> outOfContains<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> childCount<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">//需要渲染的总数据个数</span>\n        <span class=\"token keyword\">int</span> scrollLineIndex<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">//当前第一个元素索引</span>\n        <span class=\"token keyword\">int</span> totalCount<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">//在UI中显示的个数(不乘以maxPerLine)</span>\n        Vector2 startPos<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">//第一个元素所在位置</span>\n        <span class=\"token keyword\">int</span> startIndex<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">//当前渲染起始坐标</span>\n        <span class=\"token keyword\">int</span> endIndex<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">//当前渲染结束坐标</span>\n        <span class=\"token keyword\">int</span> maxPerLine<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">void</span> <span class=\"token function\">Start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            maxPerLine <span class=\"token operator\">=</span> maxPerLine <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">:</span> maxPerLine<span class=\"token punctuation\">;</span>\n            items <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">List</span><span class=\"token operator\">&lt;</span>Transform<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            contains <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Dictionary</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            outOfContains <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">List</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            scrollRect <span class=\"token operator\">=</span> transform<span class=\"token punctuation\">.</span><span class=\"token generic-method function\">GetComponent<span class=\"token punctuation\">&lt;</span>ScrollRect<span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\" spellcheck=\"true\">// mask = scrollRect.GetComponentInChildren&lt;Mask>().rectTransform;</span>\n            content <span class=\"token operator\">=</span> scrollRect<span class=\"token punctuation\">.</span>content<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>content <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                Debug<span class=\"token punctuation\">.</span><span class=\"token function\">Log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ScrollRect \"</span> <span class=\"token operator\">+</span> scrollRect<span class=\"token punctuation\">.</span>gameObject<span class=\"token punctuation\">.</span>name <span class=\"token operator\">+</span> <span class=\"token string\">\" Has No Content, Please Check And Retry.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            content<span class=\"token punctuation\">.</span>anchorMax <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Vector2</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            content<span class=\"token punctuation\">.</span>anchorMin <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Vector2</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            content<span class=\"token punctuation\">.</span>pivot <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Vector2</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">ReBuild</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;summary></span>\n        <span class=\"token comment\" spellcheck=\"true\">/// 当子节点、Mask、maxPerLine</span>\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;/summary></span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">ReBuild</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>scrollRect <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> content <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> item <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">ResetChildren</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            Vector2 maskSize <span class=\"token operator\">=</span> viewPort<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">int</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arrangement <span class=\"token operator\">==</span> Arrangement<span class=\"token punctuation\">.</span>Horizontal<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                count <span class=\"token operator\">=</span> Mathf<span class=\"token punctuation\">.</span><span class=\"token function\">CeilToInt</span><span class=\"token punctuation\">(</span>maskSize<span class=\"token punctuation\">.</span>x<span class=\"token operator\">/</span>itemSize<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">//横向列数</span>\n                startPos <span class=\"token operator\">=</span> Vector2<span class=\"token punctuation\">.</span>zero<span class=\"token punctuation\">;</span>\n                startPos<span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> marginLeft<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>verticalAlign <span class=\"token operator\">==</span> VerticalAlign<span class=\"token punctuation\">.</span>Top<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">{</span>\n                    startPos<span class=\"token punctuation\">.</span>y <span class=\"token operator\">=</span> <span class=\"token operator\">-</span>marginTop<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>verticalAlign <span class=\"token operator\">==</span> VerticalAlign<span class=\"token punctuation\">.</span>Middle<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">{</span>\n                    startPos<span class=\"token punctuation\">.</span>y <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token punctuation\">(</span>maskSize<span class=\"token punctuation\">.</span>y<span class=\"token operator\">*</span><span class=\"token number\">0.5f</span> <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span>itemSize<span class=\"token punctuation\">.</span>y<span class=\"token operator\">*</span>maxPerLine <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>maxPerLine <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>rowSpace<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">0.5f</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>verticalAlign <span class=\"token operator\">==</span> VerticalAlign<span class=\"token punctuation\">.</span>Bottom<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">{</span>\n                    startPos<span class=\"token punctuation\">.</span>y <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token punctuation\">(</span>maskSize<span class=\"token punctuation\">.</span>y <span class=\"token operator\">-</span> marginBottom <span class=\"token operator\">-</span> itemSize<span class=\"token punctuation\">.</span>y<span class=\"token operator\">*</span>maxPerLine <span class=\"token operator\">-</span> rowSpace<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>maxPerLine <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n\n                <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> count<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> maxPerLine<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">{</span>\n                        RectTransform child <span class=\"token operator\">=</span> <span class=\"token function\">CreateItem</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">*</span>maxPerLine <span class=\"token operator\">+</span> j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        child<span class=\"token punctuation\">.</span>localPosition <span class=\"token operator\">=</span> startPos <span class=\"token operator\">+</span>\n                                              <span class=\"token keyword\">new</span> <span class=\"token class-name\">Vector2</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">*</span>itemSize<span class=\"token punctuation\">.</span>x <span class=\"token operator\">+</span> i<span class=\"token operator\">*</span>columuSpace<span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span>j<span class=\"token operator\">*</span>itemSize<span class=\"token punctuation\">.</span>y <span class=\"token operator\">-</span> j<span class=\"token operator\">*</span>rowSpace<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arrangement <span class=\"token operator\">==</span> Arrangement<span class=\"token punctuation\">.</span>Vertical<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                count <span class=\"token operator\">=</span> Mathf<span class=\"token punctuation\">.</span><span class=\"token function\">CeilToInt</span><span class=\"token punctuation\">(</span>maskSize<span class=\"token punctuation\">.</span>y<span class=\"token operator\">/</span>itemSize<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">//竖向行数</span>\n                startPos <span class=\"token operator\">=</span> Vector2<span class=\"token punctuation\">.</span>zero<span class=\"token punctuation\">;</span>\n                startPos<span class=\"token punctuation\">.</span>y <span class=\"token operator\">=</span> <span class=\"token operator\">-</span>marginTop<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">//重置开始节点位置</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>horizontalAlign <span class=\"token operator\">==</span> HorizontalAlign<span class=\"token punctuation\">.</span>Left<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">{</span>\n                    startPos<span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> marginLeft<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>horizontalAlign <span class=\"token operator\">==</span> HorizontalAlign<span class=\"token punctuation\">.</span>Middle<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">{</span>\n                    startPos<span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>maskSize<span class=\"token punctuation\">.</span>x<span class=\"token operator\">*</span><span class=\"token number\">0.5f</span> <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span>itemSize<span class=\"token punctuation\">.</span>x<span class=\"token operator\">*</span>maxPerLine <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>maxPerLine <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>columuSpace<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">0.5f</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>horizontalAlign <span class=\"token operator\">==</span> HorizontalAlign<span class=\"token punctuation\">.</span>Right<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">{</span>\n                    startPos<span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> maskSize<span class=\"token punctuation\">.</span>x <span class=\"token operator\">-</span> marginRight <span class=\"token operator\">-</span> itemSize<span class=\"token punctuation\">.</span>x<span class=\"token operator\">*</span>maxPerLine <span class=\"token operator\">-</span> columuSpace<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>maxPerLine <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n\n                <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> count<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> maxPerLine<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">{</span>\n                        RectTransform child <span class=\"token operator\">=</span> <span class=\"token function\">CreateItem</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">*</span>maxPerLine <span class=\"token operator\">+</span> j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        child<span class=\"token punctuation\">.</span>localPosition <span class=\"token operator\">=</span> startPos <span class=\"token operator\">+</span>\n                                              <span class=\"token keyword\">new</span> <span class=\"token class-name\">Vector2</span><span class=\"token punctuation\">(</span>j<span class=\"token operator\">*</span>itemSize<span class=\"token punctuation\">.</span>x <span class=\"token operator\">+</span> j<span class=\"token operator\">*</span>columuSpace<span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span>i<span class=\"token operator\">*</span>itemSize<span class=\"token punctuation\">.</span>y <span class=\"token operator\">-</span> i<span class=\"token operator\">*</span>rowSpace<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n            totalCount <span class=\"token operator\">=</span> count<span class=\"token punctuation\">;</span>\n\n            <span class=\"token function\">SetChildCount</span><span class=\"token punctuation\">(</span>childCount<span class=\"token punctuation\">,</span> <span class=\"token keyword\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">BackTop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            scrollRect<span class=\"token punctuation\">.</span>onValueChanged<span class=\"token punctuation\">.</span><span class=\"token function\">RemoveAllListeners</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            scrollRect<span class=\"token punctuation\">.</span>onValueChanged<span class=\"token punctuation\">.</span><span class=\"token function\">AddListener</span><span class=\"token punctuation\">(</span>OnValueChanged<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;summary></span>\n        <span class=\"token comment\" spellcheck=\"true\">/// 列表滚动</span>\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;/summary></span>\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;param name=\"vec\">&lt;/param></span>\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">OnValueChanged</span><span class=\"token punctuation\">(</span>Vector2 vec<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>arrangement<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">case</span> Arrangement<span class=\"token punctuation\">.</span>Horizontal<span class=\"token punctuation\">:</span>\n                 <span class=\"token comment\" spellcheck=\"true\">//   if (vec.x &lt; 0.0f || vec.x >= 1.0f)</span>\n                 <span class=\"token comment\" spellcheck=\"true\">//       return;</span>\n                        vec<span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> Mathf<span class=\"token punctuation\">.</span><span class=\"token function\">Clamp</span><span class=\"token punctuation\">(</span>vec<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">case</span> Arrangement<span class=\"token punctuation\">.</span>Vertical<span class=\"token punctuation\">:</span>\n                 <span class=\"token comment\" spellcheck=\"true\">//   if (vec.y &lt;= 0.0f || vec.y >= 1.0f)</span>\n                 <span class=\"token comment\" spellcheck=\"true\">//       return;</span>\n                        vec<span class=\"token punctuation\">.</span>y <span class=\"token operator\">=</span> Mathf<span class=\"token punctuation\">.</span><span class=\"token function\">Clamp</span><span class=\"token punctuation\">(</span>vec<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token keyword\">int</span> curLineIndex <span class=\"token operator\">=</span> <span class=\"token function\">GetCurLineIndex</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>curLineIndex <span class=\"token operator\">!=</span> scrollLineIndex<span class=\"token punctuation\">)</span>\n                <span class=\"token function\">UpdateRectItem</span><span class=\"token punctuation\">(</span>curLineIndex<span class=\"token punctuation\">,</span> <span class=\"token keyword\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;summary></span>\n        <span class=\"token comment\" spellcheck=\"true\">/// 获取页面第一行索引</span>\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;/summary></span>\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;returns>&lt;/returns></span>\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> <span class=\"token function\">GetCurLineIndex</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>arrangement<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">case</span> Arrangement<span class=\"token punctuation\">.</span>Horizontal<span class=\"token punctuation\">:</span>\n                    <span class=\"token keyword\">return</span>\n                        Mathf<span class=\"token punctuation\">.</span><span class=\"token function\">FloorToInt</span><span class=\"token punctuation\">(</span>Mathf<span class=\"token punctuation\">.</span><span class=\"token function\">Abs</span><span class=\"token punctuation\">(</span>Mathf<span class=\"token punctuation\">.</span><span class=\"token function\">Abs</span><span class=\"token punctuation\">(</span>content<span class=\"token punctuation\">.</span>anchoredPosition<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> marginLeft<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span>\n                                         <span class=\"token punctuation\">(</span>columuSpace <span class=\"token operator\">+</span> itemSize<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">case</span> Arrangement<span class=\"token punctuation\">.</span>Vertical<span class=\"token punctuation\">:</span>\n                    <span class=\"token keyword\">return</span>\n                        Mathf<span class=\"token punctuation\">.</span><span class=\"token function\">FloorToInt</span><span class=\"token punctuation\">(</span>Mathf<span class=\"token punctuation\">.</span><span class=\"token function\">Abs</span><span class=\"token punctuation\">(</span>Mathf<span class=\"token punctuation\">.</span><span class=\"token function\">Abs</span><span class=\"token punctuation\">(</span>content<span class=\"token punctuation\">.</span>anchoredPosition<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> marginTop<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span>\n                                         <span class=\"token punctuation\">(</span>rowSpace <span class=\"token operator\">+</span> itemSize<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;summary></span>\n        <span class=\"token comment\" spellcheck=\"true\">/// 更新数据（待修改问出现的才刷新）</span>\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;/summary></span>\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;param name=\"curLineIndex\">&lt;/param></span>\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;param name=\"forceRender\">&lt;/param></span>\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">UpdateRectItem</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> curLineIndex<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> forceRender<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>curLineIndex <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n            startIndex <span class=\"token operator\">=</span> curLineIndex<span class=\"token operator\">*</span>maxPerLine<span class=\"token punctuation\">;</span>\n            endIndex <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>curLineIndex <span class=\"token operator\">+</span> totalCount<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>maxPerLine<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>endIndex <span class=\"token operator\">>=</span> childCount<span class=\"token punctuation\">)</span>\n                endIndex <span class=\"token operator\">=</span> childCount<span class=\"token punctuation\">;</span>\n\n            contains<span class=\"token punctuation\">.</span><span class=\"token function\">Clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">//渲染序号</span>\n            outOfContains<span class=\"token punctuation\">.</span><span class=\"token function\">Clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">//items的索引</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> items<span class=\"token punctuation\">.</span>Count<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token comment\" spellcheck=\"true\">//如果当前已渲染的item中包含</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">int</span> index <span class=\"token operator\">=</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">.</span><span class=\"token function\">Parse</span><span class=\"token punctuation\">(</span>items<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>gameObject<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">&lt;</span> startIndex <span class=\"token operator\">||</span> index <span class=\"token operator\">>=</span> endIndex<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">{</span>\n                    outOfContains<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    items<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>gameObject<span class=\"token punctuation\">.</span><span class=\"token function\">SetActive</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword\">else</span>\n                <span class=\"token punctuation\">{</span>\n                    items<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>gameObject<span class=\"token punctuation\">.</span><span class=\"token function\">SetActive</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    contains<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token comment\" spellcheck=\"true\">// *************更改渲染****************</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> startIndex<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> endIndex<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>contains<span class=\"token punctuation\">.</span><span class=\"token function\">ContainsKey</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">{</span>\n                    Transform child <span class=\"token operator\">=</span> items<span class=\"token punctuation\">[</span>outOfContains<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                    outOfContains<span class=\"token punctuation\">.</span><span class=\"token function\">RemoveAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    child<span class=\"token punctuation\">.</span>gameObject<span class=\"token punctuation\">.</span><span class=\"token function\">SetActive</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">int</span> row <span class=\"token operator\">=</span> i<span class=\"token operator\">/</span>maxPerLine<span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">int</span> col <span class=\"token operator\">=</span> i<span class=\"token operator\">%</span>maxPerLine<span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arrangement <span class=\"token operator\">==</span> Arrangement<span class=\"token punctuation\">.</span>Vertical<span class=\"token punctuation\">)</span>\n                        child<span class=\"token punctuation\">.</span>localPosition <span class=\"token operator\">=</span> startPos <span class=\"token operator\">+</span>\n                                              <span class=\"token keyword\">new</span> <span class=\"token class-name\">Vector2</span><span class=\"token punctuation\">(</span>col<span class=\"token operator\">*</span>itemSize<span class=\"token punctuation\">.</span>x <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>col<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>columuSpace<span class=\"token punctuation\">,</span>\n                                                  <span class=\"token operator\">-</span>row<span class=\"token operator\">*</span>itemSize<span class=\"token punctuation\">.</span>y <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span>row<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>rowSpace<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">else</span>\n                        child<span class=\"token punctuation\">.</span>localPosition <span class=\"token operator\">=</span> startPos <span class=\"token operator\">+</span>\n                                              <span class=\"token keyword\">new</span> <span class=\"token class-name\">Vector2</span><span class=\"token punctuation\">(</span>row<span class=\"token operator\">*</span>itemSize<span class=\"token punctuation\">.</span>x <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>row<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>columuSpace<span class=\"token punctuation\">,</span>\n                                                  <span class=\"token operator\">-</span>col<span class=\"token operator\">*</span>itemSize<span class=\"token punctuation\">.</span>y <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span>col<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>rowSpace<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    child<span class=\"token punctuation\">.</span>gameObject<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> i<span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>onItemRender <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n                        <span class=\"token function\">onItemRender</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> child<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>forceRender<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>onItemRender <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n                        <span class=\"token function\">onItemRender</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> items<span class=\"token punctuation\">[</span>contains<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n\n            scrollLineIndex <span class=\"token operator\">=</span> curLineIndex<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;summary></span>\n        <span class=\"token comment\" spellcheck=\"true\">/// 移除当前所有</span>\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;/summary></span>\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">ResetChildren</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            items<span class=\"token punctuation\">.</span><span class=\"token function\">Clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> content<span class=\"token punctuation\">.</span>childCount<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                Transform child <span class=\"token operator\">=</span> content<span class=\"token punctuation\">.</span><span class=\"token function\">GetChild</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                child<span class=\"token punctuation\">.</span>gameObject<span class=\"token punctuation\">.</span><span class=\"token function\">SetActive</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;summary></span>\n        <span class=\"token comment\" spellcheck=\"true\">/// 创建新节点</span>\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;/summary></span>\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;param name=\"index\">&lt;/param></span>\n        <span class=\"token keyword\">private</span> RectTransform <span class=\"token function\">CreateItem</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> index<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            Transform child<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>content<span class=\"token punctuation\">.</span>childCount <span class=\"token operator\">></span> index<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                child <span class=\"token operator\">=</span> content<span class=\"token punctuation\">.</span><span class=\"token function\">GetChild</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">else</span>\n            <span class=\"token punctuation\">{</span>\n                GameObject obj <span class=\"token operator\">=</span> GameObject<span class=\"token punctuation\">.</span><span class=\"token function\">Instantiate</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> GameObject<span class=\"token punctuation\">;</span>\n                obj<span class=\"token punctuation\">.</span>transform<span class=\"token punctuation\">.</span><span class=\"token function\">SetParent</span><span class=\"token punctuation\">(</span>content<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                obj<span class=\"token punctuation\">.</span>transform<span class=\"token punctuation\">.</span>localScale <span class=\"token operator\">=</span> Vector3<span class=\"token punctuation\">.</span>one<span class=\"token punctuation\">;</span>\n                child <span class=\"token operator\">=</span> obj<span class=\"token punctuation\">.</span>transform<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            child<span class=\"token punctuation\">.</span>gameObject<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> index<span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            items<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">return</span> child <span class=\"token keyword\">as</span> RectTransform<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;summary></span>\n        <span class=\"token comment\" spellcheck=\"true\">/// 设置资源</span>\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;/summary></span>\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;param name=\"child\">&lt;/param></span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">SetItem</span><span class=\"token punctuation\">(</span>GameObject child<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>child <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>item <span class=\"token operator\">=</span> child<span class=\"token punctuation\">;</span>\n            RectTransform itemTrans <span class=\"token operator\">=</span> child<span class=\"token punctuation\">.</span>transform <span class=\"token keyword\">as</span> RectTransform<span class=\"token punctuation\">;</span>\n            itemTrans<span class=\"token punctuation\">.</span>pivot <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Vector2</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            itemSize <span class=\"token operator\">=</span> itemTrans<span class=\"token punctuation\">.</span>sizeDelta<span class=\"token punctuation\">;</span>\n            <span class=\"token function\">ReBuild</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;summary></span>\n        <span class=\"token comment\" spellcheck=\"true\">/// 更新需要渲染的个数</span>\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;/summary></span>\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;param name=\"value\">&lt;/param></span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">SetChildCount</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> forceRender<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">value</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> childCount <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">else</span> childCount <span class=\"token operator\">=</span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>content <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">int</span> rc <span class=\"token operator\">=</span> Mathf<span class=\"token punctuation\">.</span><span class=\"token function\">CeilToInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span> childCount<span class=\"token operator\">/</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span> maxPerLine<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">//设置content的大小</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arrangement <span class=\"token operator\">==</span> Arrangement<span class=\"token punctuation\">.</span>Horizontal<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                content<span class=\"token punctuation\">.</span>sizeDelta <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Vector2</span><span class=\"token punctuation\">(</span>marginLeft <span class=\"token operator\">+</span> marginRight <span class=\"token operator\">+</span> itemSize<span class=\"token punctuation\">.</span>x<span class=\"token operator\">*</span>rc <span class=\"token operator\">+</span> columuSpace<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>rc <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                    viewPort<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>content<span class=\"token punctuation\">.</span>sizeDelta<span class=\"token punctuation\">.</span>x <span class=\"token operator\">></span> viewPort<span class=\"token punctuation\">.</span>x <span class=\"token operator\">&amp;&amp;</span> content<span class=\"token punctuation\">.</span>anchoredPosition<span class=\"token punctuation\">.</span>x <span class=\"token operator\">&lt;</span> viewPort<span class=\"token punctuation\">.</span>x <span class=\"token operator\">-</span> content<span class=\"token punctuation\">.</span>sizeDelta<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">)</span>\n                    content<span class=\"token punctuation\">.</span>anchoredPosition <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Vector2</span><span class=\"token punctuation\">(</span>viewPort<span class=\"token punctuation\">.</span>x <span class=\"token operator\">-</span> content<span class=\"token punctuation\">.</span>sizeDelta<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">,</span> content<span class=\"token punctuation\">.</span>anchoredPosition<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">else</span>\n            <span class=\"token punctuation\">{</span>\n                content<span class=\"token punctuation\">.</span>sizeDelta <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Vector2</span><span class=\"token punctuation\">(</span>viewPort<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">,</span> marginTop <span class=\"token operator\">+</span> marginBottom <span class=\"token operator\">+</span> itemSize<span class=\"token punctuation\">.</span>y<span class=\"token operator\">*</span>rc <span class=\"token operator\">+</span> rowSpace<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>rc <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>content<span class=\"token punctuation\">.</span>sizeDelta<span class=\"token punctuation\">.</span>y <span class=\"token operator\">></span> viewPort<span class=\"token punctuation\">.</span>y <span class=\"token operator\">&amp;&amp;</span> content<span class=\"token punctuation\">.</span>anchoredPosition<span class=\"token punctuation\">.</span>y <span class=\"token operator\">></span> content<span class=\"token punctuation\">.</span>sizeDelta<span class=\"token punctuation\">.</span>y <span class=\"token operator\">-</span> viewPort<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">)</span>\n                    content<span class=\"token punctuation\">.</span>anchoredPosition <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Vector2</span><span class=\"token punctuation\">(</span>content<span class=\"token punctuation\">.</span>anchoredPosition<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">,</span> content<span class=\"token punctuation\">.</span>sizeDelta<span class=\"token punctuation\">.</span>y <span class=\"token operator\">-</span> viewPort<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token function\">UpdateRectItem</span><span class=\"token punctuation\">(</span><span class=\"token function\">GetCurLineIndex</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;summary></span>\n        <span class=\"token comment\" spellcheck=\"true\">/// 添加子节点</span>\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;/summary></span>\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;param name=\"index\">&lt;/param></span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">AddChild</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> index<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n            startIndex <span class=\"token operator\">=</span> scrollLineIndex<span class=\"token operator\">*</span>maxPerLine<span class=\"token punctuation\">;</span>\n            endIndex <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>scrollLineIndex <span class=\"token operator\">+</span> totalCount<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>maxPerLine<span class=\"token punctuation\">;</span>\n            <span class=\"token function\">SetChildCount</span><span class=\"token punctuation\">(</span>childCount <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> index <span class=\"token operator\">>=</span> startIndex <span class=\"token operator\">&amp;&amp;</span> index <span class=\"token operator\">&lt;</span> endIndex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;summary></span>\n        <span class=\"token comment\" spellcheck=\"true\">/// 删除子节点</span>\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;/summary></span>\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;param name=\"index\">&lt;/param></span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">RemoveChild</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> index<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> index <span class=\"token operator\">>=</span> childCount<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n            startIndex <span class=\"token operator\">=</span> scrollLineIndex<span class=\"token operator\">*</span>maxPerLine<span class=\"token punctuation\">;</span>\n            endIndex <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>scrollLineIndex <span class=\"token operator\">+</span> totalCount<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>maxPerLine<span class=\"token punctuation\">;</span>\n            <span class=\"token function\">SetChildCount</span><span class=\"token punctuation\">(</span>childCount <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> index <span class=\"token operator\">>=</span> startIndex <span class=\"token operator\">&amp;&amp;</span> index <span class=\"token operator\">&lt;</span> endIndex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;summary></span>\n        <span class=\"token comment\" spellcheck=\"true\">/// 设置显示窗口大小</span>\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;/summary></span>\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;param name=\"port\">&lt;/param></span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">SetViewPort</span><span class=\"token punctuation\">(</span>Vector2 port<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>port <span class=\"token operator\">==</span> viewPort<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n            viewPort <span class=\"token operator\">=</span> port<span class=\"token punctuation\">;</span>\n            <span class=\"token function\">ReBuild</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;summary></span>\n        <span class=\"token comment\" spellcheck=\"true\">/// 设置行列最大</span>\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;/summary></span>\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;param name=\"max\">&lt;/param></span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">SetMaxPerLine</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> max<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            maxPerLine <span class=\"token operator\">=</span> max<span class=\"token punctuation\">;</span>\n            <span class=\"token function\">ReBuild</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;summary></span>\n        <span class=\"token comment\" spellcheck=\"true\">/// 返回顶部</span>\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;/summary></span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">BackTop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            content<span class=\"token punctuation\">.</span>localPosition <span class=\"token operator\">=</span> Vector3<span class=\"token punctuation\">.</span>zero<span class=\"token punctuation\">;</span>\n            <span class=\"token function\">UpdateRectItem</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;summary></span>\n        <span class=\"token comment\" spellcheck=\"true\">/// 返回底部</span>\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;/summary></span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">BackBottom</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arrangement <span class=\"token operator\">==</span> Arrangement<span class=\"token punctuation\">.</span>Vertical<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                content<span class=\"token punctuation\">.</span>localPosition <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Vector3</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span>viewPort<span class=\"token punctuation\">.</span>y <span class=\"token operator\">+</span> content<span class=\"token punctuation\">.</span>sizeDelta<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">else</span>\n            <span class=\"token punctuation\">{</span>\n                content<span class=\"token punctuation\">.</span>localPosition <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Vector3</span><span class=\"token punctuation\">(</span>viewPort<span class=\"token punctuation\">.</span>x <span class=\"token operator\">-</span> content<span class=\"token punctuation\">.</span>sizeDelta<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token function\">UpdateRectItem</span><span class=\"token punctuation\">(</span>Mathf<span class=\"token punctuation\">.</span><span class=\"token function\">CeilToInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span> childCount<span class=\"token operator\">/</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span> maxPerLine<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> totalCount <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">RefreshViewItem</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">UpdateRectItem</span><span class=\"token punctuation\">(</span>scrollLineIndex<span class=\"token punctuation\">,</span> <span class=\"token keyword\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>效果：<br><img src=\"http://img.blog.csdn.net/20170502192738648?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvQ2hlbmc2MjQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\" alt=\"图片来源我的csdn\"></p>\n<p>当选择水平布局的时候“每行个数”会切换为“每列个数”。<br>由于Mask的锚点设置时相对父节点全局拉伸，我没看到怎么获取他的Size， 所以写了一个 “显示窗口” 及ViewPort来手动填他的大小。</p>\n<p><strong>实际使用中发现了一些问题，做出一些优化，最终代码为：</strong></p>\n<pre class=\"line-numbers language-csharp\"><code class=\"language-csharp\">\n<span class=\"token keyword\">using</span> System<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> System<span class=\"token punctuation\">.</span>Collections<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> System<span class=\"token punctuation\">.</span>Collections<span class=\"token punctuation\">.</span>Generic<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> UnityEngine<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> UnityEngine<span class=\"token punctuation\">.</span>UI<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">namespace</span> Assets<span class=\"token punctuation\">.</span>UI\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// &lt;summary></span>\n    <span class=\"token comment\" spellcheck=\"true\">/// Introduction: 无限列表</span>\n    <span class=\"token comment\" spellcheck=\"true\">///             Content上禁止挂载ContentSizeFilter和LayOutGroup之类组件</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// Author:     Cheng</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// Time: </span>\n    <span class=\"token comment\" spellcheck=\"true\">/// &lt;/summary></span>\n    <span class=\"token punctuation\">[</span>DisallowMultipleComponent<span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">[</span><span class=\"token function\">RequireComponent</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> <span class=\"token punctuation\">(</span>ScrollRect<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ScrollList</span> <span class=\"token punctuation\">:</span> MonoBehaviour\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">delegate</span> <span class=\"token keyword\">void</span> <span class=\"token function\">OnItemRender</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> index<span class=\"token punctuation\">,</span> Transform child<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">public</span> OnItemRender onItemRender<span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;summary></span>\n        <span class=\"token comment\" spellcheck=\"true\">/// 排序方式</span>\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;/summary></span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">enum</span> Arrangement\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\" spellcheck=\"true\">/// &lt;summary></span>\n            <span class=\"token comment\" spellcheck=\"true\">/// 横排</span>\n            <span class=\"token comment\" spellcheck=\"true\">/// &lt;/summary></span>\n            Horizontal <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n\n            <span class=\"token comment\" spellcheck=\"true\">/// &lt;summary></span>\n            <span class=\"token comment\" spellcheck=\"true\">/// 竖排</span>\n            <span class=\"token comment\" spellcheck=\"true\">/// &lt;/summary></span>\n            Vertical<span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;summary></span>\n        <span class=\"token comment\" spellcheck=\"true\">/// 水平对齐</span>\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;/summary></span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">enum</span> HorizontalAlign\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\" spellcheck=\"true\">/// &lt;summary></span>\n            <span class=\"token comment\" spellcheck=\"true\">/// 居左</span>\n            <span class=\"token comment\" spellcheck=\"true\">/// &lt;/summary></span>\n            Left<span class=\"token punctuation\">,</span>\n\n            <span class=\"token comment\" spellcheck=\"true\">/// &lt;summary></span>\n            <span class=\"token comment\" spellcheck=\"true\">/// 居中</span>\n            <span class=\"token comment\" spellcheck=\"true\">/// &lt;/summary></span>\n            Middle<span class=\"token punctuation\">,</span>\n\n            <span class=\"token comment\" spellcheck=\"true\">/// &lt;summary></span>\n            <span class=\"token comment\" spellcheck=\"true\">/// 局右</span>\n            <span class=\"token comment\" spellcheck=\"true\">/// &lt;/summary></span>\n            Right<span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;summary></span>\n        <span class=\"token comment\" spellcheck=\"true\">/// 垂直对齐</span>\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;/summary></span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">enum</span> VerticalAlign\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\" spellcheck=\"true\">/// &lt;summary></span>\n            <span class=\"token comment\" spellcheck=\"true\">/// 居上</span>\n            <span class=\"token comment\" spellcheck=\"true\">/// &lt;/summary></span>\n            Top<span class=\"token punctuation\">,</span>\n\n            <span class=\"token comment\" spellcheck=\"true\">/// &lt;summary></span>\n            <span class=\"token comment\" spellcheck=\"true\">/// 居中</span>\n            <span class=\"token comment\" spellcheck=\"true\">/// &lt;/summary></span>\n            Middle<span class=\"token punctuation\">,</span>\n\n            <span class=\"token comment\" spellcheck=\"true\">/// &lt;summary></span>\n            <span class=\"token comment\" spellcheck=\"true\">/// 局下</span>\n            <span class=\"token comment\" spellcheck=\"true\">/// &lt;/summary></span>\n            Bottom<span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span>\n\n\n        <span class=\"token keyword\">public</span> Arrangement arrangement <span class=\"token operator\">=</span> Arrangement<span class=\"token punctuation\">.</span>Vertical<span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;summary></span>\n        <span class=\"token comment\" spellcheck=\"true\">/// 当选择水平或垂直流动是有用，指每行/列最大个数</span>\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;/summary></span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> MaxPerLine\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">get</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> maxPerLine<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">set</span> <span class=\"token punctuation\">{</span> <span class=\"token function\">SetMaxPerLine</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">value</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;summary></span>\n        <span class=\"token comment\" spellcheck=\"true\">/// 行距</span>\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;/summary></span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">float</span> rowSpace <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;summary></span>\n        <span class=\"token comment\" spellcheck=\"true\">/// 列距</span>\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;/summary></span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">float</span> columuSpace <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">public</span> HorizontalAlign horizontalAlign <span class=\"token operator\">=</span> HorizontalAlign<span class=\"token punctuation\">.</span>Left<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">public</span> VerticalAlign verticalAlign <span class=\"token operator\">=</span> VerticalAlign<span class=\"token punctuation\">.</span>Top<span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;summary></span>\n        <span class=\"token comment\" spellcheck=\"true\">/// 边缘留空 上</span>\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;/summary></span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">float</span> marginTop <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;summary></span>\n        <span class=\"token comment\" spellcheck=\"true\">/// 边缘留空 下</span>\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;/summary></span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">float</span> marginBottom <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;summary></span>\n        <span class=\"token comment\" spellcheck=\"true\">/// 边缘留空 左</span>\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;/summary></span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">float</span> marginLeft <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;summary></span>\n        <span class=\"token comment\" spellcheck=\"true\">/// 边缘留空 右</span>\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;/summary></span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">float</span> marginRight <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;summary></span>\n        <span class=\"token comment\" spellcheck=\"true\">/// 渲染子节点</span>\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;/summary></span>\n        <span class=\"token keyword\">public</span> GameObject Child\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">get</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> item<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">set</span> <span class=\"token punctuation\">{</span> <span class=\"token function\">SetItem</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">value</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;summary></span>\n        <span class=\"token comment\" spellcheck=\"true\">/// 总个数</span>\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;/summary></span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> ChildCount\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">get</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> childCount<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">set</span> <span class=\"token punctuation\">{</span> <span class=\"token function\">SetChildCount</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">value</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;summary></span>\n        <span class=\"token comment\" spellcheck=\"true\">/// 设置显示窗口大小</span>\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;/summary></span>\n        <span class=\"token keyword\">public</span> Vector2 ViewPort\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">get</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> viewPort<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">set</span> <span class=\"token punctuation\">{</span> <span class=\"token function\">SetViewPort</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">value</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        GameObject item<span class=\"token punctuation\">;</span>\n        ScrollRect scrollRect<span class=\"token punctuation\">;</span>\n        Vector2 viewPort<span class=\"token punctuation\">;</span>\n        RectTransform content<span class=\"token punctuation\">;</span>\n        Vector2 itemSize<span class=\"token punctuation\">;</span>\n        List<span class=\"token operator\">&lt;</span>Transform<span class=\"token operator\">></span> items<span class=\"token punctuation\">;</span>\n        Dictionary<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">></span> contains<span class=\"token punctuation\">;</span>\n        List<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> outOfContains<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> childCount<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">//需要渲染的总数据个数</span>\n        <span class=\"token keyword\">int</span> scrollLineIndex<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">//当前第一个元素索引</span>\n        <span class=\"token keyword\">int</span> totalCount<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">//在UI中显示的个数(不乘以maxPerLine)</span>\n        Vector2 startPos<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">//第一个元素所在位置</span>\n        <span class=\"token keyword\">int</span> startIndex<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">//当前渲染起始坐标</span>\n        <span class=\"token keyword\">int</span> endIndex<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">//当前渲染结束坐标</span>\n        <span class=\"token keyword\">int</span> maxPerLine<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">void</span> <span class=\"token function\">Start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            maxPerLine <span class=\"token operator\">=</span> maxPerLine <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">:</span> maxPerLine<span class=\"token punctuation\">;</span>\n            items <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">List</span><span class=\"token operator\">&lt;</span>Transform<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            contains <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Dictionary</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            outOfContains <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">List</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            scrollRect <span class=\"token operator\">=</span> transform<span class=\"token punctuation\">.</span><span class=\"token generic-method function\">GetComponent<span class=\"token punctuation\">&lt;</span>ScrollRect<span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            content <span class=\"token operator\">=</span> scrollRect<span class=\"token punctuation\">.</span>content<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>content <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                Debug<span class=\"token punctuation\">.</span><span class=\"token function\">Log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ScrollRect \"</span> <span class=\"token operator\">+</span> scrollRect<span class=\"token punctuation\">.</span>gameObject<span class=\"token punctuation\">.</span>name <span class=\"token operator\">+</span> <span class=\"token string\">\" Has No Content, Please Check And Retry.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            viewPort <span class=\"token operator\">=</span> scrollRect<span class=\"token punctuation\">.</span>viewport<span class=\"token punctuation\">.</span>rect<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">;</span>\n\n            content<span class=\"token punctuation\">.</span>anchorMax <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Vector2</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            content<span class=\"token punctuation\">.</span>anchorMin <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Vector2</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            content<span class=\"token punctuation\">.</span>pivot <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Vector2</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">ReBuild</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;summary></span>\n        <span class=\"token comment\" spellcheck=\"true\">/// 当子节点、Mask、maxPerLine</span>\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;/summary></span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">ReBuild</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>scrollRect <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> content <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> item <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">ResetChildren</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            Vector2 maskSize <span class=\"token operator\">=</span> viewPort<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">int</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arrangement <span class=\"token operator\">==</span> Arrangement<span class=\"token punctuation\">.</span>Horizontal<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                count <span class=\"token operator\">=</span> Mathf<span class=\"token punctuation\">.</span><span class=\"token function\">CeilToInt</span><span class=\"token punctuation\">(</span>maskSize<span class=\"token punctuation\">.</span>x<span class=\"token operator\">/</span>itemSize<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">//横向列数</span>\n                startPos <span class=\"token operator\">=</span> Vector2<span class=\"token punctuation\">.</span>zero<span class=\"token punctuation\">;</span>\n                startPos<span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> marginLeft<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>verticalAlign <span class=\"token operator\">==</span> VerticalAlign<span class=\"token punctuation\">.</span>Top<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">{</span>\n                    startPos<span class=\"token punctuation\">.</span>y <span class=\"token operator\">=</span> <span class=\"token operator\">-</span>marginTop<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>verticalAlign <span class=\"token operator\">==</span> VerticalAlign<span class=\"token punctuation\">.</span>Middle<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">{</span>\n                    startPos<span class=\"token punctuation\">.</span>y <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token punctuation\">(</span>maskSize<span class=\"token punctuation\">.</span>y<span class=\"token operator\">*</span><span class=\"token number\">0.5f</span> <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span>itemSize<span class=\"token punctuation\">.</span>y<span class=\"token operator\">*</span>maxPerLine <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>maxPerLine <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>rowSpace<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">0.5f</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>verticalAlign <span class=\"token operator\">==</span> VerticalAlign<span class=\"token punctuation\">.</span>Bottom<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">{</span>\n                    startPos<span class=\"token punctuation\">.</span>y <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token punctuation\">(</span>maskSize<span class=\"token punctuation\">.</span>y <span class=\"token operator\">-</span> marginBottom <span class=\"token operator\">-</span> itemSize<span class=\"token punctuation\">.</span>y<span class=\"token operator\">*</span>maxPerLine <span class=\"token operator\">-</span> rowSpace<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>maxPerLine <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token comment\" spellcheck=\"true\">//优化：不在一开始生产所有的可见格子</span>\n                <span class=\"token comment\" spellcheck=\"true\">//for (int i = 0; i &lt; count; i++)</span>\n                <span class=\"token comment\" spellcheck=\"true\">//{</span>\n                <span class=\"token comment\" spellcheck=\"true\">//    for (int j = 0; j &lt; maxPerLine; j++)</span>\n                <span class=\"token comment\" spellcheck=\"true\">//    {</span>\n                <span class=\"token comment\" spellcheck=\"true\">//        RectTransform child = CreateItem(i*maxPerLine + j);</span>\n                <span class=\"token comment\" spellcheck=\"true\">//        child.localPosition = startPos +</span>\n                <span class=\"token comment\" spellcheck=\"true\">//                              new Vector2(i*itemSize.x + i*columuSpace, -j*itemSize.y - j*rowSpace);</span>\n                <span class=\"token comment\" spellcheck=\"true\">//    }</span>\n                <span class=\"token comment\" spellcheck=\"true\">//}</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arrangement <span class=\"token operator\">==</span> Arrangement<span class=\"token punctuation\">.</span>Vertical<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                count <span class=\"token operator\">=</span> Mathf<span class=\"token punctuation\">.</span><span class=\"token function\">CeilToInt</span><span class=\"token punctuation\">(</span>maskSize<span class=\"token punctuation\">.</span>y<span class=\"token operator\">/</span>itemSize<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">//竖向行数</span>\n                startPos <span class=\"token operator\">=</span> Vector2<span class=\"token punctuation\">.</span>zero<span class=\"token punctuation\">;</span>\n                startPos<span class=\"token punctuation\">.</span>y <span class=\"token operator\">=</span> <span class=\"token operator\">-</span>marginTop<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">//重置开始节点位置</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>horizontalAlign <span class=\"token operator\">==</span> HorizontalAlign<span class=\"token punctuation\">.</span>Left<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">{</span>\n                    startPos<span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> marginLeft<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>horizontalAlign <span class=\"token operator\">==</span> HorizontalAlign<span class=\"token punctuation\">.</span>Middle<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">{</span>\n                    startPos<span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>maskSize<span class=\"token punctuation\">.</span>x<span class=\"token operator\">*</span><span class=\"token number\">0.5f</span> <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span>itemSize<span class=\"token punctuation\">.</span>x<span class=\"token operator\">*</span>maxPerLine <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>maxPerLine <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>columuSpace<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">0.5f</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>horizontalAlign <span class=\"token operator\">==</span> HorizontalAlign<span class=\"token punctuation\">.</span>Right<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">{</span>\n                    startPos<span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> maskSize<span class=\"token punctuation\">.</span>x <span class=\"token operator\">-</span> marginRight <span class=\"token operator\">-</span> itemSize<span class=\"token punctuation\">.</span>x<span class=\"token operator\">*</span>maxPerLine <span class=\"token operator\">-</span> columuSpace<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>maxPerLine <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n\n                <span class=\"token comment\" spellcheck=\"true\">//for (int i = 0; i &lt; count; i++)</span>\n                <span class=\"token comment\" spellcheck=\"true\">//{</span>\n                <span class=\"token comment\" spellcheck=\"true\">//    for (int j = 0; j &lt; maxPerLine; j++)</span>\n                <span class=\"token comment\" spellcheck=\"true\">//    {</span>\n                <span class=\"token comment\" spellcheck=\"true\">//        RectTransform child = CreateItem(i*maxPerLine + j);</span>\n                <span class=\"token comment\" spellcheck=\"true\">//        child.localPosition = startPos +</span>\n                <span class=\"token comment\" spellcheck=\"true\">//                              new Vector2(j*itemSize.x + j*columuSpace, -i*itemSize.y - i*rowSpace);</span>\n                <span class=\"token comment\" spellcheck=\"true\">//    }</span>\n                <span class=\"token comment\" spellcheck=\"true\">//}</span>\n            <span class=\"token punctuation\">}</span>\n            totalCount <span class=\"token operator\">=</span> count<span class=\"token punctuation\">;</span>\n\n            <span class=\"token function\">SetChildCount</span><span class=\"token punctuation\">(</span>childCount<span class=\"token punctuation\">,</span> <span class=\"token keyword\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">BackTop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            scrollRect<span class=\"token punctuation\">.</span>onValueChanged<span class=\"token punctuation\">.</span><span class=\"token function\">RemoveAllListeners</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            scrollRect<span class=\"token punctuation\">.</span>onValueChanged<span class=\"token punctuation\">.</span><span class=\"token function\">AddListener</span><span class=\"token punctuation\">(</span>OnValueChanged<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;summary></span>\n        <span class=\"token comment\" spellcheck=\"true\">/// 列表滚动</span>\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;/summary></span>\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;param name=\"vec\">&lt;/param></span>\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">OnValueChanged</span><span class=\"token punctuation\">(</span>Vector2 vec<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>arrangement<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">case</span> Arrangement<span class=\"token punctuation\">.</span>Horizontal<span class=\"token punctuation\">:</span>\n                 <span class=\"token comment\" spellcheck=\"true\">//   if (vec.x &lt; 0.0f || vec.x >= 1.0f)</span>\n                 <span class=\"token comment\" spellcheck=\"true\">//       return;</span>\n                        vec<span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> Mathf<span class=\"token punctuation\">.</span><span class=\"token function\">Clamp</span><span class=\"token punctuation\">(</span>vec<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">case</span> Arrangement<span class=\"token punctuation\">.</span>Vertical<span class=\"token punctuation\">:</span>\n                 <span class=\"token comment\" spellcheck=\"true\">//   if (vec.y &lt;= 0.0f || vec.y >= 1.0f)</span>\n                 <span class=\"token comment\" spellcheck=\"true\">//       return;</span>\n                        vec<span class=\"token punctuation\">.</span>y <span class=\"token operator\">=</span> Mathf<span class=\"token punctuation\">.</span><span class=\"token function\">Clamp</span><span class=\"token punctuation\">(</span>vec<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token keyword\">int</span> curLineIndex <span class=\"token operator\">=</span> <span class=\"token function\">GetCurLineIndex</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>curLineIndex <span class=\"token operator\">!=</span> scrollLineIndex<span class=\"token punctuation\">)</span>\n                <span class=\"token function\">UpdateRectItem</span><span class=\"token punctuation\">(</span>curLineIndex<span class=\"token punctuation\">,</span> <span class=\"token keyword\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;summary></span>\n        <span class=\"token comment\" spellcheck=\"true\">/// 获取页面第一行索引</span>\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;/summary></span>\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;returns>&lt;/returns></span>\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> <span class=\"token function\">GetCurLineIndex</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>arrangement<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">case</span> Arrangement<span class=\"token punctuation\">.</span>Horizontal<span class=\"token punctuation\">:</span>\n                    <span class=\"token keyword\">return</span>\n                        Mathf<span class=\"token punctuation\">.</span><span class=\"token function\">FloorToInt</span><span class=\"token punctuation\">(</span>Mathf<span class=\"token punctuation\">.</span><span class=\"token function\">Abs</span><span class=\"token punctuation\">(</span>content<span class=\"token punctuation\">.</span>anchoredPosition<span class=\"token punctuation\">.</span>x <span class=\"token operator\">&lt;</span> <span class=\"token number\">0.1f</span><span class=\"token operator\">?</span> content<span class=\"token punctuation\">.</span>anchoredPosition<span class=\"token punctuation\">.</span>x <span class=\"token punctuation\">:</span> <span class=\"token number\">0.1f</span> <span class=\"token operator\">-</span> marginLeft<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span>\n                                         <span class=\"token punctuation\">(</span>columuSpace <span class=\"token operator\">+</span> itemSize<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">case</span> Arrangement<span class=\"token punctuation\">.</span>Vertical<span class=\"token punctuation\">:</span>\n                    <span class=\"token keyword\">return</span>\n                        Mathf<span class=\"token punctuation\">.</span><span class=\"token function\">FloorToInt</span><span class=\"token punctuation\">(</span>Mathf<span class=\"token punctuation\">.</span><span class=\"token function\">Abs</span><span class=\"token punctuation\">(</span>content<span class=\"token punctuation\">.</span>anchoredPosition<span class=\"token punctuation\">.</span>y<span class=\"token operator\">></span><span class=\"token operator\">-</span><span class=\"token number\">0.1f</span><span class=\"token operator\">?</span>content<span class=\"token punctuation\">.</span>anchoredPosition<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">:</span><span class=\"token operator\">-</span><span class=\"token number\">0.1f</span> <span class=\"token operator\">-</span> marginTop<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span>\n                                         <span class=\"token punctuation\">(</span>rowSpace <span class=\"token operator\">+</span> itemSize<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;summary></span>\n        <span class=\"token comment\" spellcheck=\"true\">/// 更新数据（待修改问出现的才刷新）</span>\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;/summary></span>\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;param name=\"curLineIndex\">&lt;/param></span>\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;param name=\"forceRender\">&lt;/param></span>\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">UpdateRectItem</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> curLineIndex<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> forceRender<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>curLineIndex <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n            startIndex <span class=\"token operator\">=</span> curLineIndex<span class=\"token operator\">*</span>maxPerLine<span class=\"token punctuation\">;</span>\n            endIndex <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>curLineIndex <span class=\"token operator\">+</span> totalCount<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>maxPerLine<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>endIndex <span class=\"token operator\">>=</span> childCount<span class=\"token punctuation\">)</span>\n                endIndex <span class=\"token operator\">=</span> childCount<span class=\"token punctuation\">;</span>\n\n            contains<span class=\"token punctuation\">.</span><span class=\"token function\">Clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">//渲染序号</span>\n            outOfContains<span class=\"token punctuation\">.</span><span class=\"token function\">Clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">//items的索引</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> items<span class=\"token punctuation\">.</span>Count<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token comment\" spellcheck=\"true\">//如果当前已渲染的item中包含</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">int</span> index <span class=\"token operator\">=</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">.</span><span class=\"token function\">Parse</span><span class=\"token punctuation\">(</span>items<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>gameObject<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">&lt;</span> startIndex <span class=\"token operator\">||</span> index <span class=\"token operator\">>=</span> endIndex<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">{</span>\n                    outOfContains<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    items<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>gameObject<span class=\"token punctuation\">.</span><span class=\"token function\">SetActive</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword\">else</span>\n                <span class=\"token punctuation\">{</span>\n                    items<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>gameObject<span class=\"token punctuation\">.</span><span class=\"token function\">SetActive</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    contains<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token comment\" spellcheck=\"true\">// *************更改渲染****************</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> startIndex<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> endIndex<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>contains<span class=\"token punctuation\">.</span><span class=\"token function\">ContainsKey</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">{</span>\n                    Transform child <span class=\"token operator\">=</span> items<span class=\"token punctuation\">[</span>outOfContains<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                    outOfContains<span class=\"token punctuation\">.</span><span class=\"token function\">RemoveAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    child<span class=\"token punctuation\">.</span>gameObject<span class=\"token punctuation\">.</span><span class=\"token function\">SetActive</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">int</span> row <span class=\"token operator\">=</span> i<span class=\"token operator\">/</span>maxPerLine<span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">int</span> col <span class=\"token operator\">=</span> i<span class=\"token operator\">%</span>maxPerLine<span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arrangement <span class=\"token operator\">==</span> Arrangement<span class=\"token punctuation\">.</span>Vertical<span class=\"token punctuation\">)</span>\n                        child<span class=\"token punctuation\">.</span>localPosition <span class=\"token operator\">=</span> startPos <span class=\"token operator\">+</span>\n                                              <span class=\"token keyword\">new</span> <span class=\"token class-name\">Vector2</span><span class=\"token punctuation\">(</span>col<span class=\"token operator\">*</span>itemSize<span class=\"token punctuation\">.</span>x <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>col<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>columuSpace<span class=\"token punctuation\">,</span>\n                                                  <span class=\"token operator\">-</span>row<span class=\"token operator\">*</span>itemSize<span class=\"token punctuation\">.</span>y <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span>row<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>rowSpace<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">else</span>\n                        child<span class=\"token punctuation\">.</span>localPosition <span class=\"token operator\">=</span> startPos <span class=\"token operator\">+</span>\n                                              <span class=\"token keyword\">new</span> <span class=\"token class-name\">Vector2</span><span class=\"token punctuation\">(</span>row<span class=\"token operator\">*</span>itemSize<span class=\"token punctuation\">.</span>x <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>row<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>columuSpace<span class=\"token punctuation\">,</span>\n                                                  <span class=\"token operator\">-</span>col<span class=\"token operator\">*</span>itemSize<span class=\"token punctuation\">.</span>y <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span>col<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>rowSpace<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    child<span class=\"token punctuation\">.</span>gameObject<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> i<span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>onItemRender <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n                        <span class=\"token function\">onItemRender</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> child<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>forceRender<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>onItemRender <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n                        <span class=\"token function\">onItemRender</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> items<span class=\"token punctuation\">[</span>contains<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n\n            scrollLineIndex <span class=\"token operator\">=</span> curLineIndex<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;summary></span>\n        <span class=\"token comment\" spellcheck=\"true\">/// 移除当前所有</span>\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;/summary></span>\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">ResetChildren</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            items<span class=\"token punctuation\">.</span><span class=\"token function\">Clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> content<span class=\"token punctuation\">.</span>childCount<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                Transform child <span class=\"token operator\">=</span> content<span class=\"token punctuation\">.</span><span class=\"token function\">GetChild</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                child<span class=\"token punctuation\">.</span>gameObject<span class=\"token punctuation\">.</span><span class=\"token function\">SetActive</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;summary></span>\n        <span class=\"token comment\" spellcheck=\"true\">/// 创建新节点</span>\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;/summary></span>\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;param name=\"index\">&lt;/param></span>\n        <span class=\"token keyword\">private</span> RectTransform <span class=\"token function\">CreateItem</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> index<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            Transform child<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>content<span class=\"token punctuation\">.</span>childCount <span class=\"token operator\">></span> index<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                child <span class=\"token operator\">=</span> content<span class=\"token punctuation\">.</span><span class=\"token function\">GetChild</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">else</span>\n            <span class=\"token punctuation\">{</span>\n                GameObject obj <span class=\"token operator\">=</span> GameObject<span class=\"token punctuation\">.</span><span class=\"token function\">Instantiate</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> GameObject<span class=\"token punctuation\">;</span>\n                obj<span class=\"token punctuation\">.</span>transform<span class=\"token punctuation\">.</span><span class=\"token function\">SetParent</span><span class=\"token punctuation\">(</span>content<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                obj<span class=\"token punctuation\">.</span>transform<span class=\"token punctuation\">.</span>localScale <span class=\"token operator\">=</span> Vector3<span class=\"token punctuation\">.</span>one<span class=\"token punctuation\">;</span>\n                child <span class=\"token operator\">=</span> obj<span class=\"token punctuation\">.</span>transform<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            child<span class=\"token punctuation\">.</span>gameObject<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> index<span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            items<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">return</span> child <span class=\"token keyword\">as</span> RectTransform<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;summary></span>\n        <span class=\"token comment\" spellcheck=\"true\">/// 设置资源</span>\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;/summary></span>\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;param name=\"child\">&lt;/param></span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">SetItem</span><span class=\"token punctuation\">(</span>GameObject child<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>child <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>item <span class=\"token operator\">=</span> child<span class=\"token punctuation\">;</span>\n            RectTransform itemTrans <span class=\"token operator\">=</span> child<span class=\"token punctuation\">.</span>transform <span class=\"token keyword\">as</span> RectTransform<span class=\"token punctuation\">;</span>\n            itemTrans<span class=\"token punctuation\">.</span>pivot <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Vector2</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            itemSize <span class=\"token operator\">=</span> itemTrans<span class=\"token punctuation\">.</span>sizeDelta<span class=\"token punctuation\">;</span>\n            <span class=\"token function\">ReBuild</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;summary></span>\n        <span class=\"token comment\" spellcheck=\"true\">/// 更新需要渲染的个数</span>\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;/summary></span>\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;param name=\"value\">&lt;/param></span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">SetChildCount</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> forceRender<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">value</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> childCount <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">else</span> childCount <span class=\"token operator\">=</span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>totalCount <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token comment\" spellcheck=\"true\">//还未初始化</span>\n                <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">value</span> <span class=\"token operator\">></span> items<span class=\"token punctuation\">.</span>Count <span class=\"token operator\">&amp;&amp;</span> items<span class=\"token punctuation\">.</span>Count <span class=\"token operator\">&lt;</span> maxPerLine <span class=\"token operator\">*</span> totalCount<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token comment\" spellcheck=\"true\">//当前格子数量少于应生成的数量</span>\n                <span class=\"token keyword\">int</span> count <span class=\"token operator\">=</span> items<span class=\"token punctuation\">.</span>Count<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">int</span> max <span class=\"token operator\">=</span> <span class=\"token keyword\">value</span> <span class=\"token operator\">&lt;</span> maxPerLine<span class=\"token operator\">*</span>totalCount <span class=\"token operator\">?</span> <span class=\"token keyword\">value</span> <span class=\"token punctuation\">:</span> maxPerLine<span class=\"token operator\">*</span>totalCount<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> count<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> max<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">int</span> row <span class=\"token operator\">=</span> i <span class=\"token operator\">/</span> maxPerLine<span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">int</span> col <span class=\"token operator\">=</span> i <span class=\"token operator\">%</span> maxPerLine<span class=\"token punctuation\">;</span>\n                    RectTransform child <span class=\"token operator\">=</span> <span class=\"token function\">CreateItem</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arrangement <span class=\"token operator\">==</span> Arrangement<span class=\"token punctuation\">.</span>Vertical<span class=\"token punctuation\">)</span>\n                        child<span class=\"token punctuation\">.</span>localPosition <span class=\"token operator\">=</span> startPos <span class=\"token operator\">+</span>\n                                              <span class=\"token keyword\">new</span> <span class=\"token class-name\">Vector2</span><span class=\"token punctuation\">(</span>col <span class=\"token operator\">*</span> itemSize<span class=\"token punctuation\">.</span>x <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>col<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> columuSpace<span class=\"token punctuation\">,</span>\n                                                  <span class=\"token operator\">-</span>row <span class=\"token operator\">*</span> itemSize<span class=\"token punctuation\">.</span>y <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span>row<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> rowSpace<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">else</span>\n                        child<span class=\"token punctuation\">.</span>localPosition <span class=\"token operator\">=</span> startPos <span class=\"token operator\">+</span>\n                                              <span class=\"token keyword\">new</span> <span class=\"token class-name\">Vector2</span><span class=\"token punctuation\">(</span>row <span class=\"token operator\">*</span> itemSize<span class=\"token punctuation\">.</span>x <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>row<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> columuSpace<span class=\"token punctuation\">,</span>\n                                                  <span class=\"token operator\">-</span>col <span class=\"token operator\">*</span> itemSize<span class=\"token punctuation\">.</span>y <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span>col<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> rowSpace<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span> \n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>content <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">int</span> rc <span class=\"token operator\">=</span> Mathf<span class=\"token punctuation\">.</span><span class=\"token function\">CeilToInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span> childCount<span class=\"token operator\">/</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span> maxPerLine<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">//设置content的大小</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arrangement <span class=\"token operator\">==</span> Arrangement<span class=\"token punctuation\">.</span>Horizontal<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                content<span class=\"token punctuation\">.</span>sizeDelta <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Vector2</span><span class=\"token punctuation\">(</span>marginLeft <span class=\"token operator\">+</span> marginRight <span class=\"token operator\">+</span> itemSize<span class=\"token punctuation\">.</span>x<span class=\"token operator\">*</span>rc <span class=\"token operator\">+</span> columuSpace<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>rc <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                    viewPort<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>content<span class=\"token punctuation\">.</span>sizeDelta<span class=\"token punctuation\">.</span>x <span class=\"token operator\">></span> viewPort<span class=\"token punctuation\">.</span>x <span class=\"token operator\">&amp;&amp;</span> content<span class=\"token punctuation\">.</span>anchoredPosition<span class=\"token punctuation\">.</span>x <span class=\"token operator\">&lt;</span> viewPort<span class=\"token punctuation\">.</span>x <span class=\"token operator\">-</span> content<span class=\"token punctuation\">.</span>sizeDelta<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">)</span>\n                    content<span class=\"token punctuation\">.</span>anchoredPosition <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Vector2</span><span class=\"token punctuation\">(</span>viewPort<span class=\"token punctuation\">.</span>x <span class=\"token operator\">-</span> content<span class=\"token punctuation\">.</span>sizeDelta<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">,</span> content<span class=\"token punctuation\">.</span>anchoredPosition<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">else</span>\n            <span class=\"token punctuation\">{</span>\n                content<span class=\"token punctuation\">.</span>sizeDelta <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Vector2</span><span class=\"token punctuation\">(</span>viewPort<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">,</span> marginTop <span class=\"token operator\">+</span> marginBottom <span class=\"token operator\">+</span> itemSize<span class=\"token punctuation\">.</span>y<span class=\"token operator\">*</span>rc <span class=\"token operator\">+</span> rowSpace<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>rc <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>content<span class=\"token punctuation\">.</span>sizeDelta<span class=\"token punctuation\">.</span>y <span class=\"token operator\">></span> viewPort<span class=\"token punctuation\">.</span>y <span class=\"token operator\">&amp;&amp;</span> content<span class=\"token punctuation\">.</span>anchoredPosition<span class=\"token punctuation\">.</span>y <span class=\"token operator\">></span> content<span class=\"token punctuation\">.</span>sizeDelta<span class=\"token punctuation\">.</span>y <span class=\"token operator\">-</span> viewPort<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">)</span>\n                    content<span class=\"token punctuation\">.</span>anchoredPosition <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Vector2</span><span class=\"token punctuation\">(</span>content<span class=\"token punctuation\">.</span>anchoredPosition<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">,</span> content<span class=\"token punctuation\">.</span>sizeDelta<span class=\"token punctuation\">.</span>y <span class=\"token operator\">-</span> viewPort<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token function\">UpdateRectItem</span><span class=\"token punctuation\">(</span><span class=\"token function\">GetCurLineIndex</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;summary></span>\n        <span class=\"token comment\" spellcheck=\"true\">/// 添加子节点</span>\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;/summary></span>\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;param name=\"index\">&lt;/param></span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">AddChild</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> index<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n            startIndex <span class=\"token operator\">=</span> scrollLineIndex<span class=\"token operator\">*</span>maxPerLine<span class=\"token punctuation\">;</span>\n            endIndex <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>scrollLineIndex <span class=\"token operator\">+</span> totalCount<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>maxPerLine<span class=\"token punctuation\">;</span>\n            <span class=\"token function\">SetChildCount</span><span class=\"token punctuation\">(</span>childCount <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> index <span class=\"token operator\">>=</span> startIndex <span class=\"token operator\">&amp;&amp;</span> index <span class=\"token operator\">&lt;</span> endIndex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;summary></span>\n        <span class=\"token comment\" spellcheck=\"true\">/// 删除子节点</span>\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;/summary></span>\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;param name=\"index\">&lt;/param></span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">RemoveChild</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> index<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> index <span class=\"token operator\">>=</span> childCount<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n            startIndex <span class=\"token operator\">=</span> scrollLineIndex<span class=\"token operator\">*</span>maxPerLine<span class=\"token punctuation\">;</span>\n            endIndex <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>scrollLineIndex <span class=\"token operator\">+</span> totalCount<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>maxPerLine<span class=\"token punctuation\">;</span>\n            <span class=\"token function\">SetChildCount</span><span class=\"token punctuation\">(</span>childCount <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> index <span class=\"token operator\">>=</span> startIndex <span class=\"token operator\">&amp;&amp;</span> index <span class=\"token operator\">&lt;</span> endIndex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;summary></span>\n        <span class=\"token comment\" spellcheck=\"true\">/// 设置显示窗口大小(现在貌似可以废弃了)</span>\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;/summary></span>\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;param name=\"port\">&lt;/param></span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">SetViewPort</span><span class=\"token punctuation\">(</span>Vector2 port<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>port <span class=\"token operator\">==</span> viewPort<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n            viewPort <span class=\"token operator\">=</span> port<span class=\"token punctuation\">;</span>\n            <span class=\"token function\">ReBuild</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;summary></span>\n        <span class=\"token comment\" spellcheck=\"true\">/// 设置行列最大</span>\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;/summary></span>\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;param name=\"max\">&lt;/param></span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">SetMaxPerLine</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> max<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            maxPerLine <span class=\"token operator\">=</span> max<span class=\"token punctuation\">;</span>\n            <span class=\"token function\">ReBuild</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;summary></span>\n        <span class=\"token comment\" spellcheck=\"true\">/// 返回顶部</span>\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;/summary></span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">BackTop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            content<span class=\"token punctuation\">.</span>localPosition <span class=\"token operator\">=</span> Vector3<span class=\"token punctuation\">.</span>zero<span class=\"token punctuation\">;</span>\n            <span class=\"token function\">UpdateRectItem</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;summary></span>\n        <span class=\"token comment\" spellcheck=\"true\">/// 返回底部</span>\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;/summary></span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">BackBottom</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arrangement <span class=\"token operator\">==</span> Arrangement<span class=\"token punctuation\">.</span>Vertical<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                content<span class=\"token punctuation\">.</span>localPosition <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Vector3</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span>viewPort<span class=\"token punctuation\">.</span>y <span class=\"token operator\">+</span> content<span class=\"token punctuation\">.</span>sizeDelta<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">else</span>\n            <span class=\"token punctuation\">{</span>\n                content<span class=\"token punctuation\">.</span>localPosition <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Vector3</span><span class=\"token punctuation\">(</span>viewPort<span class=\"token punctuation\">.</span>x <span class=\"token operator\">-</span> content<span class=\"token punctuation\">.</span>sizeDelta<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token function\">UpdateRectItem</span><span class=\"token punctuation\">(</span>Mathf<span class=\"token punctuation\">.</span><span class=\"token function\">CeilToInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span> childCount<span class=\"token operator\">/</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span> maxPerLine<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> totalCount <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">RefreshViewItem</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">UpdateRectItem</span><span class=\"token punctuation\">(</span>scrollLineIndex<span class=\"token punctuation\">,</span> <span class=\"token keyword\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">SetArrangement</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> arr<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            arrangement <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>Arrangement<span class=\"token punctuation\">)</span> arr<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">SetHorizontal</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> h<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            horizontalAlign <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>HorizontalAlign<span class=\"token punctuation\">)</span> h<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">SetVerticle</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> v<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            verticalAlign <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>VerticalAlign<span class=\"token punctuation\">)</span> v<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{"gallery":{"美女":{"full_link":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1508912200438&di=d5b3eacf86d8f94c149c6fc68fe4da67&imgtype=0&src=http%3A%2F%2Fpic01.taopic.com%2F151014%2F234732-15101410452229-lp.jpg","thumb_link":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1508912200438&di=d5b3eacf86d8f94c149c6fc68fe4da67&imgtype=0&src=http%3A%2F%2Fpic01.taopic.com%2F151014%2F234732-15101410452229-lp.jpg","descr":"美女插画"}},"links":{"Github":{"link":"https://github.com/garsonlab","avatar":"https://avatars3.githubusercontent.com/u/13958934?s=460&v=4","descr":"My Github","type":"Blog"},"OnLineTools":{"link":"http://tool.lu/","avatar":"http://qn11.tool.lu/201710/15/103320SbM84Ql4tETjg49a_28x28.png","descr":"在线工具","type":"Tools"},"CMDMarkdown":{"link":"https://www.zybuluo.com/","avatar":"https://www.zybuluo.com/static/img/logo.png","descr":"Markdown在线编辑","type":"Tools"},"Hexo文档":{"link":"https://hexo.io/zh-cn/docs/","avatar":"https://hexo.io/logo.svg","descr":"Hexo中文官方文档","type":"Community"},"游戏蛮牛":{"link":"http://www.manew.com/forum.php","avatar":"http://www.manew.com/template/manew2016/images/logo.png","descr":"unity交流社区","type":"Unity"},"FairyGUI":{"link":"http://www.fairygui.com/","avatar":"http://www.fairygui.com/images/20170728151207.png","descr":"FairyGUI官方网站","type":"Site"}},"linktypes":{"Blog":{"name":"关注的博客"},"Unity":{"name":"Unity3D"},"Community":{"name":"浏览的社区"},"Tools":{"name":"工具"},"Site":{"name":"收藏的网址"}}}},"excerpt":"","more":"<p>无线列表的实现好处有一些，主要方法是在ScrollView的值改变的时候改变已存在的渲染子节点位置。最核心的是计算Content的大小及里面的节点位置设置。</p>\n<pre><code class=\"csharp\">using System;\nusing System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\nusing UnityEngine.UI;\n\nnamespace Assets.UI\n{\n    /// &lt;summary&gt;\n    /// Introduction: ScrollList\n    /// Author:     Cheng\n    /// Time: \n    /// &lt;/summary&gt;\n    [DisallowMultipleComponent]\n    [RequireComponent(typeof (ScrollRect))]\n    public class ScrollList : MonoBehaviour\n    {\n        public delegate void OnItemRender(int index, Transform child);\n\n        public OnItemRender onItemRender;\n\n        /// &lt;summary&gt;\n        /// 排序方式\n        /// &lt;/summary&gt;\n        public enum Arrangement\n        {\n            /// &lt;summary&gt;\n            /// 横排\n            /// &lt;/summary&gt;\n            Horizontal = 0,\n\n            /// &lt;summary&gt;\n            /// 竖排\n            /// &lt;/summary&gt;\n            Vertical,\n        }\n\n        /// &lt;summary&gt;\n        /// 水平对齐\n        /// &lt;/summary&gt;\n        public enum HorizontalAlign\n        {\n            /// &lt;summary&gt;\n            /// 居左\n            /// &lt;/summary&gt;\n            Left,\n\n            /// &lt;summary&gt;\n            /// 居中\n            /// &lt;/summary&gt;\n            Middle,\n\n            /// &lt;summary&gt;\n            /// 局右\n            /// &lt;/summary&gt;\n            Right,\n        }\n\n        /// &lt;summary&gt;\n        /// 垂直对齐\n        /// &lt;/summary&gt;\n        public enum VerticalAlign\n        {\n            /// &lt;summary&gt;\n            /// 居上\n            /// &lt;/summary&gt;\n            Top,\n\n            /// &lt;summary&gt;\n            /// 居中\n            /// &lt;/summary&gt;\n            Middle,\n\n            /// &lt;summary&gt;\n            /// 局下\n            /// &lt;/summary&gt;\n            Bottom,\n        }\n\n\n        public Arrangement arrangement = Arrangement.Vertical;\n\n        /// &lt;summary&gt;\n        /// 当选择水平或垂直流动是有用，指每行/列最大个数\n        /// &lt;/summary&gt;\n        public int MaxPerLine\n        {\n            get { return maxPerLine; }\n            set { SetMaxPerLine(value); }\n        }\n\n        /// &lt;summary&gt;\n        /// 行距\n        /// &lt;/summary&gt;\n        public float rowSpace = 0;\n\n        /// &lt;summary&gt;\n        /// 列距\n        /// &lt;/summary&gt;\n        public float columuSpace = 0;\n\n        public HorizontalAlign horizontalAlign = HorizontalAlign.Left;\n        public VerticalAlign verticalAlign = VerticalAlign.Top;\n\n        /// &lt;summary&gt;\n        /// 边缘留空 上\n        /// &lt;/summary&gt;\n        public float marginTop = 0;\n\n        /// &lt;summary&gt;\n        /// 边缘留空 下\n        /// &lt;/summary&gt;\n        public float marginBottom = 0;\n\n        /// &lt;summary&gt;\n        /// 边缘留空 左\n        /// &lt;/summary&gt;\n        public float marginLeft = 0;\n\n        /// &lt;summary&gt;\n        /// 边缘留空 右\n        /// &lt;/summary&gt;\n        public float marginRight = 0;\n\n        /// &lt;summary&gt;\n        /// 渲染子节点\n        /// &lt;/summary&gt;\n        public GameObject Item\n        {\n            get { return item; }\n            set { SetItem(value); }\n        }\n\n        /// &lt;summary&gt;\n        /// 总个数\n        /// &lt;/summary&gt;\n        public int ChildCount\n        {\n            get { return childCount; }\n            set { SetChildCount(value, true); }\n        }\n\n        /// &lt;summary&gt;\n        /// 设置显示窗口大小\n        /// &lt;/summary&gt;\n        public Vector2 ViewPort\n        {\n            get { return viewPort; }\n            set { SetViewPort(value); }\n        }\n\n        GameObject item;\n        ScrollRect scrollRect;\n        // RectTransform mask;\n        Vector2 viewPort;\n        RectTransform content;\n        Vector2 itemSize;\n        List&lt;Transform&gt; items;\n        Dictionary&lt;int, int&gt; contains;\n        List&lt;int&gt; outOfContains;\n        int childCount; //需要渲染的总数据个数\n        int scrollLineIndex; //当前第一个元素索引\n        int totalCount; //在UI中显示的个数(不乘以maxPerLine)\n        Vector2 startPos; //第一个元素所在位置\n        int startIndex; //当前渲染起始坐标\n        int endIndex; //当前渲染结束坐标\n        int maxPerLine;\n\n        void Start()\n        {\n            maxPerLine = maxPerLine == 0 ? 1 : maxPerLine;\n            items = new List&lt;Transform&gt;();\n            contains = new Dictionary&lt;int, int&gt;();\n            outOfContains = new List&lt;int&gt;();\n            scrollRect = transform.GetComponent&lt;ScrollRect&gt;();\n            // mask = scrollRect.GetComponentInChildren&lt;Mask&gt;().rectTransform;\n            content = scrollRect.content;\n            if (content == null)\n            {\n                Debug.Log(&quot;ScrollRect &quot; + scrollRect.gameObject.name + &quot; Has No Content, Please Check And Retry.&quot;);\n                return;\n            }\n            content.anchorMax = new Vector2(0, 1);\n            content.anchorMin = new Vector2(0, 1);\n            content.pivot = new Vector2(0, 1);\n            ReBuild();\n        }\n\n\n        /// &lt;summary&gt;\n        /// 当子节点、Mask、maxPerLine\n        /// &lt;/summary&gt;\n        public void ReBuild()\n        {\n            if (scrollRect == null || content == null || item == null) return;\n            ResetChildren();\n\n            Vector2 maskSize = viewPort;\n            int count = 0;\n\n            if (arrangement == Arrangement.Horizontal)\n            {\n                count = Mathf.CeilToInt(maskSize.x/itemSize.x) + 1; //横向列数\n                startPos = Vector2.zero;\n                startPos.x = marginLeft;\n                if (verticalAlign == VerticalAlign.Top)\n                {\n                    startPos.y = -marginTop;\n                }\n                else if (verticalAlign == VerticalAlign.Middle)\n                {\n                    startPos.y = -(maskSize.y*0.5f - (itemSize.y*maxPerLine + (maxPerLine - 1)*rowSpace)*0.5f);\n                }\n                else if (verticalAlign == VerticalAlign.Bottom)\n                {\n                    startPos.y = -(maskSize.y - marginBottom - itemSize.y*maxPerLine - rowSpace*(maxPerLine - 1));\n                }\n\n                for (int i = 0; i &lt; count; i++)\n                {\n                    for (int j = 0; j &lt; maxPerLine; j++)\n                    {\n                        RectTransform child = CreateItem(i*maxPerLine + j);\n                        child.localPosition = startPos +\n                                              new Vector2(i*itemSize.x + i*columuSpace, -j*itemSize.y - j*rowSpace);\n                    }\n                }\n            }\n            else if (arrangement == Arrangement.Vertical)\n            {\n                count = Mathf.CeilToInt(maskSize.y/itemSize.y) + 1; //竖向行数\n                startPos = Vector2.zero;\n                startPos.y = -marginTop; //重置开始节点位置\n                if (horizontalAlign == HorizontalAlign.Left)\n                {\n                    startPos.x = marginLeft;\n                }\n                else if (horizontalAlign == HorizontalAlign.Middle)\n                {\n                    startPos.x = (maskSize.x*0.5f - (itemSize.x*maxPerLine + (maxPerLine - 1)*columuSpace)*0.5f);\n                }\n                else if (horizontalAlign == HorizontalAlign.Right)\n                {\n                    startPos.x = maskSize.x - marginRight - itemSize.x*maxPerLine - columuSpace*(maxPerLine - 1);\n                }\n\n                for (int i = 0; i &lt; count; i++)\n                {\n                    for (int j = 0; j &lt; maxPerLine; j++)\n                    {\n                        RectTransform child = CreateItem(i*maxPerLine + j);\n                        child.localPosition = startPos +\n                                              new Vector2(j*itemSize.x + j*columuSpace, -i*itemSize.y - i*rowSpace);\n                    }\n                }\n            }\n            totalCount = count;\n\n            SetChildCount(childCount, true);\n            BackTop();\n\n            scrollRect.onValueChanged.RemoveAllListeners();\n            scrollRect.onValueChanged.AddListener(OnValueChanged);\n        }\n\n        /// &lt;summary&gt;\n        /// 列表滚动\n        /// &lt;/summary&gt;\n        /// &lt;param name=&quot;vec&quot;&gt;&lt;/param&gt;\n        private void OnValueChanged(Vector2 vec)\n        {\n            switch (arrangement)\n            {\n                case Arrangement.Horizontal:\n                 //   if (vec.x &lt; 0.0f || vec.x &gt;= 1.0f)\n                 //       return;\n                        vec.x = Mathf.Clamp(vec.x, 0, 1);\n                    break;\n                case Arrangement.Vertical:\n                 //   if (vec.y &lt;= 0.0f || vec.y &gt;= 1.0f)\n                 //       return;\n                        vec.y = Mathf.Clamp(vec.y, 0, 1);\n                    break;\n            }\n\n            int curLineIndex = GetCurLineIndex();\n            if (curLineIndex != scrollLineIndex)\n                UpdateRectItem(curLineIndex, false);\n        }\n\n        /// &lt;summary&gt;\n        /// 获取页面第一行索引\n        /// &lt;/summary&gt;\n        /// &lt;returns&gt;&lt;/returns&gt;\n        private int GetCurLineIndex()\n        {\n            switch (arrangement)\n            {\n                case Arrangement.Horizontal:\n                    return\n                        Mathf.FloorToInt(Mathf.Abs(Mathf.Abs(content.anchoredPosition.x) - marginLeft)/\n                                         (columuSpace + itemSize.x));\n                case Arrangement.Vertical:\n                    return\n                        Mathf.FloorToInt(Mathf.Abs(Mathf.Abs(content.anchoredPosition.y) - marginTop)/\n                                         (rowSpace + itemSize.y));\n            }\n            return 0;\n        }\n\n        /// &lt;summary&gt;\n        /// 更新数据（待修改问出现的才刷新）\n        /// &lt;/summary&gt;\n        /// &lt;param name=&quot;curLineIndex&quot;&gt;&lt;/param&gt;\n        /// &lt;param name=&quot;forceRender&quot;&gt;&lt;/param&gt;\n        private void UpdateRectItem(int curLineIndex, bool forceRender)\n        {\n            if (curLineIndex &lt; 0)\n                return;\n            startIndex = curLineIndex*maxPerLine;\n            endIndex = (curLineIndex + totalCount)*maxPerLine;\n            if (endIndex &gt;= childCount)\n                endIndex = childCount;\n\n            contains.Clear(); //渲染序号\n            outOfContains.Clear(); //items的索引\n            for (int i = 0; i &lt; items.Count; i++)//如果当前已渲染的item中包含\n            {\n                int index = int.Parse(items[i].gameObject.name);\n                if (index &lt; startIndex || index &gt;= endIndex)\n                {\n                    outOfContains.Add(i);\n                    items[i].gameObject.SetActive(false);\n                }\n                else\n                {\n                    items[i].gameObject.SetActive(true);\n                    contains.Add(index, i);\n                }\n            }\n\n            // *************更改渲染****************\n            for (int i = startIndex; i &lt; endIndex; i++)\n            {\n                if (!contains.ContainsKey(i))\n                {\n                    Transform child = items[outOfContains[0]];\n                    outOfContains.RemoveAt(0);\n                    child.gameObject.SetActive(true);\n                    int row = i/maxPerLine;\n                    int col = i%maxPerLine;\n                    if (arrangement == Arrangement.Vertical)\n                        child.localPosition = startPos +\n                                              new Vector2(col*itemSize.x + (col)*columuSpace,\n                                                  -row*itemSize.y - (row)*rowSpace);\n                    else\n                        child.localPosition = startPos +\n                                              new Vector2(row*itemSize.x + (row)*columuSpace,\n                                                  -col*itemSize.y - (col)*rowSpace);\n                    child.gameObject.name = i.ToString();\n                    if (onItemRender != null)\n                        onItemRender(i, child);\n                }\n                else if (forceRender)\n                {\n                    if (onItemRender != null)\n                        onItemRender(i, items[contains[i]]);\n                }\n            }\n\n            scrollLineIndex = curLineIndex;\n        }\n\n        /// &lt;summary&gt;\n        /// 移除当前所有\n        /// &lt;/summary&gt;\n        private void ResetChildren()\n        {\n            items.Clear();\n            for (int i = 0; i &lt; content.childCount; i++)\n            {\n                Transform child = content.GetChild(i);\n                child.gameObject.SetActive(false);\n            }\n        }\n\n        /// &lt;summary&gt;\n        /// 创建新节点\n        /// &lt;/summary&gt;\n        /// &lt;param name=&quot;index&quot;&gt;&lt;/param&gt;\n        private RectTransform CreateItem(int index)\n        {\n            Transform child;\n            if (content.childCount &gt; index)\n            {\n                child = content.GetChild(index);\n            }\n            else\n            {\n                GameObject obj = GameObject.Instantiate(item) as GameObject;\n                obj.transform.SetParent(content);\n                obj.transform.localScale = Vector3.one;\n                child = obj.transform;\n            }\n            child.gameObject.name = index.ToString();\n            items.Add(child);\n\n            return child as RectTransform;\n        }\n\n        /// &lt;summary&gt;\n        /// 设置资源\n        /// &lt;/summary&gt;\n        /// &lt;param name=&quot;child&quot;&gt;&lt;/param&gt;\n        public void SetItem(GameObject child)\n        {\n            if (child == null) return;\n            this.item = child;\n            RectTransform itemTrans = child.transform as RectTransform;\n            itemTrans.pivot = new Vector2(0, 1);\n            itemSize = itemTrans.sizeDelta;\n            ReBuild();\n        }\n\n        /// &lt;summary&gt;\n        /// 更新需要渲染的个数\n        /// &lt;/summary&gt;\n        /// &lt;param name=&quot;value&quot;&gt;&lt;/param&gt;\n        public void SetChildCount(int value, bool forceRender)\n        {\n            if (value &lt; 0) childCount = 0;\n            else childCount = value;\n\n            if (content == null) return;\n\n            int rc = Mathf.CeilToInt((float) childCount/(float) maxPerLine); //设置content的大小\n            if (arrangement == Arrangement.Horizontal)\n            {\n                content.sizeDelta = new Vector2(marginLeft + marginRight + itemSize.x*rc + columuSpace*(rc - 1),\n                    viewPort.y);\n                if (content.sizeDelta.x &gt; viewPort.x &amp;&amp; content.anchoredPosition.x &lt; viewPort.x - content.sizeDelta.x)\n                    content.anchoredPosition = new Vector2(viewPort.x - content.sizeDelta.x, content.anchoredPosition.y);\n            }\n            else\n            {\n                content.sizeDelta = new Vector2(viewPort.x, marginTop + marginBottom + itemSize.y*rc + rowSpace*(rc - 1));\n                if (content.sizeDelta.y &gt; viewPort.y &amp;&amp; content.anchoredPosition.y &gt; content.sizeDelta.y - viewPort.y)\n                    content.anchoredPosition = new Vector2(content.anchoredPosition.x, content.sizeDelta.y - viewPort.y);\n            }\n            UpdateRectItem(GetCurLineIndex(), true);\n        }\n\n        /// &lt;summary&gt;\n        /// 添加子节点\n        /// &lt;/summary&gt;\n        /// &lt;param name=&quot;index&quot;&gt;&lt;/param&gt;\n        public void AddChild(int index)\n        {\n            if (index &lt; 0) return;\n            startIndex = scrollLineIndex*maxPerLine;\n            endIndex = (scrollLineIndex + totalCount)*maxPerLine;\n            SetChildCount(childCount + 1, index &gt;= startIndex &amp;&amp; index &lt; endIndex);\n        }\n\n        /// &lt;summary&gt;\n        /// 删除子节点\n        /// &lt;/summary&gt;\n        /// &lt;param name=&quot;index&quot;&gt;&lt;/param&gt;\n        public void RemoveChild(int index)\n        {\n            if (index &lt; 0 || index &gt;= childCount) return;\n            startIndex = scrollLineIndex*maxPerLine;\n            endIndex = (scrollLineIndex + totalCount)*maxPerLine;\n            SetChildCount(childCount - 1, index &gt;= startIndex &amp;&amp; index &lt; endIndex);\n        }\n\n\n        /// &lt;summary&gt;\n        /// 设置显示窗口大小\n        /// &lt;/summary&gt;\n        /// &lt;param name=&quot;port&quot;&gt;&lt;/param&gt;\n        public void SetViewPort(Vector2 port)\n        {\n            if (port == viewPort) return;\n            viewPort = port;\n            ReBuild();\n        }\n\n        /// &lt;summary&gt;\n        /// 设置行列最大\n        /// &lt;/summary&gt;\n        /// &lt;param name=&quot;max&quot;&gt;&lt;/param&gt;\n        public void SetMaxPerLine(int max)\n        {\n            maxPerLine = max;\n            ReBuild();\n        }\n\n        /// &lt;summary&gt;\n        /// 返回顶部\n        /// &lt;/summary&gt;\n        public void BackTop()\n        {\n            content.localPosition = Vector3.zero;\n            UpdateRectItem(0, true);\n        }\n\n        /// &lt;summary&gt;\n        /// 返回底部\n        /// &lt;/summary&gt;\n        public void BackBottom()\n        {\n            if (arrangement == Arrangement.Vertical)\n            {\n                content.localPosition = new Vector3(0, -viewPort.y + content.sizeDelta.y, 0);\n            }\n            else\n            {\n                content.localPosition = new Vector3(viewPort.x - content.sizeDelta.x, 0);\n            }\n            UpdateRectItem(Mathf.CeilToInt((float) childCount/(float) maxPerLine) - totalCount + 1, true);\n        }\n\n        public void RefreshViewItem()\n        {\n            UpdateRectItem(scrollLineIndex, true);\n        }\n\n    }\n}\n</code></pre>\n<p>效果：<br><img src=\"http://img.blog.csdn.net/20170502192738648?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvQ2hlbmc2MjQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\" alt=\"图片来源我的csdn\"></p>\n<p>当选择水平布局的时候“每行个数”会切换为“每列个数”。<br>由于Mask的锚点设置时相对父节点全局拉伸，我没看到怎么获取他的Size， 所以写了一个 “显示窗口” 及ViewPort来手动填他的大小。</p>\n<p><strong>实际使用中发现了一些问题，做出一些优化，最终代码为：</strong></p>\n<pre><code class=\"csharp\">\nusing System;\nusing System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\nusing UnityEngine.UI;\n\nnamespace Assets.UI\n{\n    /// &lt;summary&gt;\n    /// Introduction: 无限列表\n    ///             Content上禁止挂载ContentSizeFilter和LayOutGroup之类组件\n    /// Author:     Cheng\n    /// Time: \n    /// &lt;/summary&gt;\n    [DisallowMultipleComponent]\n    [RequireComponent(typeof (ScrollRect))]\n    public class ScrollList : MonoBehaviour\n    {\n        public delegate void OnItemRender(int index, Transform child);\n\n        public OnItemRender onItemRender;\n\n        /// &lt;summary&gt;\n        /// 排序方式\n        /// &lt;/summary&gt;\n        public enum Arrangement\n        {\n            /// &lt;summary&gt;\n            /// 横排\n            /// &lt;/summary&gt;\n            Horizontal = 0,\n\n            /// &lt;summary&gt;\n            /// 竖排\n            /// &lt;/summary&gt;\n            Vertical,\n        }\n\n        /// &lt;summary&gt;\n        /// 水平对齐\n        /// &lt;/summary&gt;\n        public enum HorizontalAlign\n        {\n            /// &lt;summary&gt;\n            /// 居左\n            /// &lt;/summary&gt;\n            Left,\n\n            /// &lt;summary&gt;\n            /// 居中\n            /// &lt;/summary&gt;\n            Middle,\n\n            /// &lt;summary&gt;\n            /// 局右\n            /// &lt;/summary&gt;\n            Right,\n        }\n\n        /// &lt;summary&gt;\n        /// 垂直对齐\n        /// &lt;/summary&gt;\n        public enum VerticalAlign\n        {\n            /// &lt;summary&gt;\n            /// 居上\n            /// &lt;/summary&gt;\n            Top,\n\n            /// &lt;summary&gt;\n            /// 居中\n            /// &lt;/summary&gt;\n            Middle,\n\n            /// &lt;summary&gt;\n            /// 局下\n            /// &lt;/summary&gt;\n            Bottom,\n        }\n\n\n        public Arrangement arrangement = Arrangement.Vertical;\n\n        /// &lt;summary&gt;\n        /// 当选择水平或垂直流动是有用，指每行/列最大个数\n        /// &lt;/summary&gt;\n        public int MaxPerLine\n        {\n            get { return maxPerLine; }\n            set { SetMaxPerLine(value); }\n        }\n\n        /// &lt;summary&gt;\n        /// 行距\n        /// &lt;/summary&gt;\n        public float rowSpace = 0;\n\n        /// &lt;summary&gt;\n        /// 列距\n        /// &lt;/summary&gt;\n        public float columuSpace = 0;\n\n        public HorizontalAlign horizontalAlign = HorizontalAlign.Left;\n        public VerticalAlign verticalAlign = VerticalAlign.Top;\n\n        /// &lt;summary&gt;\n        /// 边缘留空 上\n        /// &lt;/summary&gt;\n        public float marginTop = 0;\n\n        /// &lt;summary&gt;\n        /// 边缘留空 下\n        /// &lt;/summary&gt;\n        public float marginBottom = 0;\n\n        /// &lt;summary&gt;\n        /// 边缘留空 左\n        /// &lt;/summary&gt;\n        public float marginLeft = 0;\n\n        /// &lt;summary&gt;\n        /// 边缘留空 右\n        /// &lt;/summary&gt;\n        public float marginRight = 0;\n\n        /// &lt;summary&gt;\n        /// 渲染子节点\n        /// &lt;/summary&gt;\n        public GameObject Child\n        {\n            get { return item; }\n            set { SetItem(value); }\n        }\n\n        /// &lt;summary&gt;\n        /// 总个数\n        /// &lt;/summary&gt;\n        public int ChildCount\n        {\n            get { return childCount; }\n            set { SetChildCount(value, true); }\n        }\n\n        /// &lt;summary&gt;\n        /// 设置显示窗口大小\n        /// &lt;/summary&gt;\n        public Vector2 ViewPort\n        {\n            get { return viewPort; }\n            set { SetViewPort(value); }\n        }\n\n        GameObject item;\n        ScrollRect scrollRect;\n        Vector2 viewPort;\n        RectTransform content;\n        Vector2 itemSize;\n        List&lt;Transform&gt; items;\n        Dictionary&lt;int, int&gt; contains;\n        List&lt;int&gt; outOfContains;\n        int childCount; //需要渲染的总数据个数\n        int scrollLineIndex; //当前第一个元素索引\n        int totalCount; //在UI中显示的个数(不乘以maxPerLine)\n        Vector2 startPos; //第一个元素所在位置\n        int startIndex; //当前渲染起始坐标\n        int endIndex; //当前渲染结束坐标\n        int maxPerLine;\n\n        void Start()\n        {\n            maxPerLine = maxPerLine == 0 ? 1 : maxPerLine;\n            items = new List&lt;Transform&gt;();\n            contains = new Dictionary&lt;int, int&gt;();\n            outOfContains = new List&lt;int&gt;();\n            scrollRect = transform.GetComponent&lt;ScrollRect&gt;();\n            content = scrollRect.content;\n            if (content == null)\n            {\n                Debug.Log(&quot;ScrollRect &quot; + scrollRect.gameObject.name + &quot; Has No Content, Please Check And Retry.&quot;);\n                return;\n            }\n            viewPort = scrollRect.viewport.rect.size;\n\n            content.anchorMax = new Vector2(0, 1);\n            content.anchorMin = new Vector2(0, 1);\n            content.pivot = new Vector2(0, 1);\n            ReBuild();\n        }\n\n\n        /// &lt;summary&gt;\n        /// 当子节点、Mask、maxPerLine\n        /// &lt;/summary&gt;\n        public void ReBuild()\n        {\n            if (scrollRect == null || content == null || item == null) return;\n            ResetChildren();\n\n            Vector2 maskSize = viewPort;\n            int count = 0;\n\n            if (arrangement == Arrangement.Horizontal)\n            {\n                count = Mathf.CeilToInt(maskSize.x/itemSize.x) + 1; //横向列数\n                startPos = Vector2.zero;\n                startPos.x = marginLeft;\n                if (verticalAlign == VerticalAlign.Top)\n                {\n                    startPos.y = -marginTop;\n                }\n                else if (verticalAlign == VerticalAlign.Middle)\n                {\n                    startPos.y = -(maskSize.y*0.5f - (itemSize.y*maxPerLine + (maxPerLine - 1)*rowSpace)*0.5f);\n                }\n                else if (verticalAlign == VerticalAlign.Bottom)\n                {\n                    startPos.y = -(maskSize.y - marginBottom - itemSize.y*maxPerLine - rowSpace*(maxPerLine - 1));\n                }\n                //优化：不在一开始生产所有的可见格子\n                //for (int i = 0; i &lt; count; i++)\n                //{\n                //    for (int j = 0; j &lt; maxPerLine; j++)\n                //    {\n                //        RectTransform child = CreateItem(i*maxPerLine + j);\n                //        child.localPosition = startPos +\n                //                              new Vector2(i*itemSize.x + i*columuSpace, -j*itemSize.y - j*rowSpace);\n                //    }\n                //}\n            }\n            else if (arrangement == Arrangement.Vertical)\n            {\n                count = Mathf.CeilToInt(maskSize.y/itemSize.y) + 1; //竖向行数\n                startPos = Vector2.zero;\n                startPos.y = -marginTop; //重置开始节点位置\n                if (horizontalAlign == HorizontalAlign.Left)\n                {\n                    startPos.x = marginLeft;\n                }\n                else if (horizontalAlign == HorizontalAlign.Middle)\n                {\n                    startPos.x = (maskSize.x*0.5f - (itemSize.x*maxPerLine + (maxPerLine - 1)*columuSpace)*0.5f);\n                }\n                else if (horizontalAlign == HorizontalAlign.Right)\n                {\n                    startPos.x = maskSize.x - marginRight - itemSize.x*maxPerLine - columuSpace*(maxPerLine - 1);\n                }\n\n                //for (int i = 0; i &lt; count; i++)\n                //{\n                //    for (int j = 0; j &lt; maxPerLine; j++)\n                //    {\n                //        RectTransform child = CreateItem(i*maxPerLine + j);\n                //        child.localPosition = startPos +\n                //                              new Vector2(j*itemSize.x + j*columuSpace, -i*itemSize.y - i*rowSpace);\n                //    }\n                //}\n            }\n            totalCount = count;\n\n            SetChildCount(childCount, true);\n            BackTop();\n\n            scrollRect.onValueChanged.RemoveAllListeners();\n            scrollRect.onValueChanged.AddListener(OnValueChanged);\n        }\n\n        /// &lt;summary&gt;\n        /// 列表滚动\n        /// &lt;/summary&gt;\n        /// &lt;param name=&quot;vec&quot;&gt;&lt;/param&gt;\n        private void OnValueChanged(Vector2 vec)\n        {\n            switch (arrangement)\n            {\n                case Arrangement.Horizontal:\n                 //   if (vec.x &lt; 0.0f || vec.x &gt;= 1.0f)\n                 //       return;\n                        vec.x = Mathf.Clamp(vec.x, 0, 1);\n                    break;\n                case Arrangement.Vertical:\n                 //   if (vec.y &lt;= 0.0f || vec.y &gt;= 1.0f)\n                 //       return;\n                        vec.y = Mathf.Clamp(vec.y, 0, 1);\n                    break;\n            }\n\n            int curLineIndex = GetCurLineIndex();\n            if (curLineIndex != scrollLineIndex)\n                UpdateRectItem(curLineIndex, false);\n        }\n\n        /// &lt;summary&gt;\n        /// 获取页面第一行索引\n        /// &lt;/summary&gt;\n        /// &lt;returns&gt;&lt;/returns&gt;\n        private int GetCurLineIndex()\n        {\n            switch (arrangement)\n            {\n                case Arrangement.Horizontal:\n                    return\n                        Mathf.FloorToInt(Mathf.Abs(content.anchoredPosition.x &lt; 0.1f? content.anchoredPosition.x : 0.1f - marginLeft)/\n                                         (columuSpace + itemSize.x));\n                case Arrangement.Vertical:\n                    return\n                        Mathf.FloorToInt(Mathf.Abs(content.anchoredPosition.y&gt;-0.1f?content.anchoredPosition.y:-0.1f - marginTop)/\n                                         (rowSpace + itemSize.y));\n            }\n            return 0;\n        }\n\n        /// &lt;summary&gt;\n        /// 更新数据（待修改问出现的才刷新）\n        /// &lt;/summary&gt;\n        /// &lt;param name=&quot;curLineIndex&quot;&gt;&lt;/param&gt;\n        /// &lt;param name=&quot;forceRender&quot;&gt;&lt;/param&gt;\n        private void UpdateRectItem(int curLineIndex, bool forceRender)\n        {\n            if (curLineIndex &lt; 0)\n                return;\n            startIndex = curLineIndex*maxPerLine;\n            endIndex = (curLineIndex + totalCount)*maxPerLine;\n            if (endIndex &gt;= childCount)\n                endIndex = childCount;\n\n            contains.Clear(); //渲染序号\n            outOfContains.Clear(); //items的索引\n            for (int i = 0; i &lt; items.Count; i++)//如果当前已渲染的item中包含\n            {\n                int index = int.Parse(items[i].gameObject.name);\n                if (index &lt; startIndex || index &gt;= endIndex)\n                {\n                    outOfContains.Add(i);\n                    items[i].gameObject.SetActive(false);\n                }\n                else\n                {\n                    items[i].gameObject.SetActive(true);\n                    contains.Add(index, i);\n                }\n            }\n\n            // *************更改渲染****************\n            for (int i = startIndex; i &lt; endIndex; i++)\n            {\n                if (!contains.ContainsKey(i))\n                {\n                    Transform child = items[outOfContains[0]];\n                    outOfContains.RemoveAt(0);\n                    child.gameObject.SetActive(true);\n                    int row = i/maxPerLine;\n                    int col = i%maxPerLine;\n                    if (arrangement == Arrangement.Vertical)\n                        child.localPosition = startPos +\n                                              new Vector2(col*itemSize.x + (col)*columuSpace,\n                                                  -row*itemSize.y - (row)*rowSpace);\n                    else\n                        child.localPosition = startPos +\n                                              new Vector2(row*itemSize.x + (row)*columuSpace,\n                                                  -col*itemSize.y - (col)*rowSpace);\n                    child.gameObject.name = i.ToString();\n                    if (onItemRender != null)\n                        onItemRender(i, child);\n                }\n                else if (forceRender)\n                {\n                    if (onItemRender != null)\n                        onItemRender(i, items[contains[i]]);\n                }\n            }\n\n            scrollLineIndex = curLineIndex;\n        }\n\n        /// &lt;summary&gt;\n        /// 移除当前所有\n        /// &lt;/summary&gt;\n        private void ResetChildren()\n        {\n            items.Clear();\n            for (int i = 0; i &lt; content.childCount; i++)\n            {\n                Transform child = content.GetChild(i);\n                child.gameObject.SetActive(false);\n            }\n        }\n\n        /// &lt;summary&gt;\n        /// 创建新节点\n        /// &lt;/summary&gt;\n        /// &lt;param name=&quot;index&quot;&gt;&lt;/param&gt;\n        private RectTransform CreateItem(int index)\n        {\n            Transform child;\n            if (content.childCount &gt; index)\n            {\n                child = content.GetChild(index);\n            }\n            else\n            {\n                GameObject obj = GameObject.Instantiate(item) as GameObject;\n                obj.transform.SetParent(content);\n                obj.transform.localScale = Vector3.one;\n                child = obj.transform;\n            }\n            child.gameObject.name = index.ToString();\n            items.Add(child);\n\n            return child as RectTransform;\n        }\n\n        /// &lt;summary&gt;\n        /// 设置资源\n        /// &lt;/summary&gt;\n        /// &lt;param name=&quot;child&quot;&gt;&lt;/param&gt;\n        public void SetItem(GameObject child)\n        {\n            if (child == null) return;\n            this.item = child;\n            RectTransform itemTrans = child.transform as RectTransform;\n            itemTrans.pivot = new Vector2(0, 1);\n            itemSize = itemTrans.sizeDelta;\n            ReBuild();\n        }\n\n        /// &lt;summary&gt;\n        /// 更新需要渲染的个数\n        /// &lt;/summary&gt;\n        /// &lt;param name=&quot;value&quot;&gt;&lt;/param&gt;\n        public void SetChildCount(int value, bool forceRender)\n        {\n            if (value &lt; 0) childCount = 0;\n            else childCount = value;\n\n            if(totalCount &lt;= 0)//还未初始化\n                return;\n            if (value &gt; items.Count &amp;&amp; items.Count &lt; maxPerLine * totalCount)\n            {\n                //当前格子数量少于应生成的数量\n                int count = items.Count;\n                int max = value &lt; maxPerLine*totalCount ? value : maxPerLine*totalCount;\n                for (int i = count; i &lt; max; i++)\n                {\n                    int row = i / maxPerLine;\n                    int col = i % maxPerLine;\n                    RectTransform child = CreateItem(i);\n                    if (arrangement == Arrangement.Vertical)\n                        child.localPosition = startPos +\n                                              new Vector2(col * itemSize.x + (col) * columuSpace,\n                                                  -row * itemSize.y - (row) * rowSpace);\n                    else\n                        child.localPosition = startPos +\n                                              new Vector2(row * itemSize.x + (row) * columuSpace,\n                                                  -col * itemSize.y - (col) * rowSpace);\n                }\n            } \n\n            if (content == null) return;\n\n            int rc = Mathf.CeilToInt((float) childCount/(float) maxPerLine); //设置content的大小\n            if (arrangement == Arrangement.Horizontal)\n            {\n                content.sizeDelta = new Vector2(marginLeft + marginRight + itemSize.x*rc + columuSpace*(rc - 1),\n                    viewPort.y);\n                if (content.sizeDelta.x &gt; viewPort.x &amp;&amp; content.anchoredPosition.x &lt; viewPort.x - content.sizeDelta.x)\n                    content.anchoredPosition = new Vector2(viewPort.x - content.sizeDelta.x, content.anchoredPosition.y);\n            }\n            else\n            {\n                content.sizeDelta = new Vector2(viewPort.x, marginTop + marginBottom + itemSize.y*rc + rowSpace*(rc - 1));\n                if (content.sizeDelta.y &gt; viewPort.y &amp;&amp; content.anchoredPosition.y &gt; content.sizeDelta.y - viewPort.y)\n                    content.anchoredPosition = new Vector2(content.anchoredPosition.x, content.sizeDelta.y - viewPort.y);\n            }\n            UpdateRectItem(GetCurLineIndex(), true);\n        }\n\n        /// &lt;summary&gt;\n        /// 添加子节点\n        /// &lt;/summary&gt;\n        /// &lt;param name=&quot;index&quot;&gt;&lt;/param&gt;\n        public void AddChild(int index)\n        {\n            if (index &lt; 0) return;\n            startIndex = scrollLineIndex*maxPerLine;\n            endIndex = (scrollLineIndex + totalCount)*maxPerLine;\n            SetChildCount(childCount + 1, index &gt;= startIndex &amp;&amp; index &lt; endIndex);\n        }\n\n        /// &lt;summary&gt;\n        /// 删除子节点\n        /// &lt;/summary&gt;\n        /// &lt;param name=&quot;index&quot;&gt;&lt;/param&gt;\n        public void RemoveChild(int index)\n        {\n            if (index &lt; 0 || index &gt;= childCount) return;\n            startIndex = scrollLineIndex*maxPerLine;\n            endIndex = (scrollLineIndex + totalCount)*maxPerLine;\n            SetChildCount(childCount - 1, index &gt;= startIndex &amp;&amp; index &lt; endIndex);\n        }\n\n\n        /// &lt;summary&gt;\n        /// 设置显示窗口大小(现在貌似可以废弃了)\n        /// &lt;/summary&gt;\n        /// &lt;param name=&quot;port&quot;&gt;&lt;/param&gt;\n        public void SetViewPort(Vector2 port)\n        {\n            if (port == viewPort) return;\n            viewPort = port;\n            ReBuild();\n        }\n\n        /// &lt;summary&gt;\n        /// 设置行列最大\n        /// &lt;/summary&gt;\n        /// &lt;param name=&quot;max&quot;&gt;&lt;/param&gt;\n        public void SetMaxPerLine(int max)\n        {\n            maxPerLine = max;\n            ReBuild();\n        }\n\n        /// &lt;summary&gt;\n        /// 返回顶部\n        /// &lt;/summary&gt;\n        public void BackTop()\n        {\n            content.localPosition = Vector3.zero;\n            UpdateRectItem(0, true);\n        }\n\n        /// &lt;summary&gt;\n        /// 返回底部\n        /// &lt;/summary&gt;\n        public void BackBottom()\n        {\n            if (arrangement == Arrangement.Vertical)\n            {\n                content.localPosition = new Vector3(0, -viewPort.y + content.sizeDelta.y, 0);\n            }\n            else\n            {\n                content.localPosition = new Vector3(viewPort.x - content.sizeDelta.x, 0);\n            }\n            UpdateRectItem(Mathf.CeilToInt((float) childCount/(float) maxPerLine) - totalCount + 1, true);\n        }\n\n        public void RefreshViewItem()\n        {\n            UpdateRectItem(scrollLineIndex, true);\n        }\n\n\n        public void SetArrangement(int arr)\n        {\n            arrangement = (Arrangement) arr;\n        }\n\n        public void SetHorizontal(int h)\n        {\n            horizontalAlign = (HorizontalAlign) h;\n        }\n\n        public void SetVerticle(int v)\n        {\n            verticalAlign = (VerticalAlign) v;\n        }\n    }\n}\n</code></pre>\n"},{"title":"统一管理技能及物品cd","date":"2017-03-19T16:00:00.000Z","_content":"\n\n有个需求，比如使用过物品以后， 技能后以一个cd时间，要求技能面板上和技能栏以及其他一切有可以使用该技能的地方做一个同步cd，因此有下面的管理模块。\n\n``` csharp\n\nusing System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\nusing UnityEngine.UI;\n\n\nnamespace Assets.UI\n{\n    /// <summary>\n    /// Introduction: CD 统一管理类,实现多个cd同动\n    /// Author: Cheng\n    /// Time: \n    /// </summary>\n    public class CDManager\n    {\n        private Dictionary<string, CDMask> m_cds; \n        private static CDManager instance;\n        public static CDManager Instance\n        {\n            get\n            {\n                if(instance == null)\n                    instance = new CDManager();\n                return instance;\n            }\n        }\n\n        public CDManager()\n        {\n            m_cds = new Dictionary<string, CDMask>();\n        }\n\n        /// <summary>\n        /// 添加CD\n        /// </summary>\n        /// <param name=\"_id\">标识符</param>\n        /// <param name=\"_image\">cd图片</param>\n        /// <param name=\"_cd\">cd时长</param>\n        /// <returns></returns>\n        public CDMask AddCD(string _id, Image _image, float _cd)\n        {\n            CDMask mask;\n            if (!m_cds.TryGetValue(_id, out mask))\n            {\n                mask = new CDMask(_cd);\n                m_cds.Add(_id, mask);\n            }\n            mask.AddMask(_image);\n            return mask;\n        }\n\n        /// <summary>\n        /// 移除CD\n        /// </summary>\n        /// <param name=\"_id\">标识符</param>\n        /// <param name=\"_image\">cd图片</param>\n        public void RemoveCD(string _id, Image _image)\n        {\n            CDMask mask;\n            if (m_cds.TryGetValue(_id, out mask))\n            {\n                mask.RemoveMask(_image);\n            }\n        }\n\n        /// <summary>\n        /// 获取cd管理项\n        /// </summary>\n        /// <param name=\"_id\"></param>\n        /// <returns></returns>\n        public CDMask GetCDMask(string _id)\n        {\n            if (m_cds.ContainsKey(_id))\n                return m_cds[_id];\n            return null;\n        }\n    }\n\n\n    public class CDMask\n    {\n        private List<Image> m_imageList; //同一cd列表\n        private float m_cd;//cd时间\n        private float m_amount;//当前amount\n        private bool m_inCD;//是否在cd中\n        private float m_interval;//每次变化时间间隔\n        private float m_perAmount;//每次变化量\n        /// <summary>\n        /// 填充比率\n        /// </summary>\n        public float fillAmount { get { return m_amount; } set { SetAmount(value); } }\n        /// <summary>\n        /// cd时长\n        /// </summary>\n        public float cd { get { return m_cd; } set { SetCD(value); } }\n        /// <summary>\n        /// cd开始和结束事件\n        /// </summary>\n        public event Callback_1<bool> cdStateChanged;\n\n        public CDMask(float _cd, float _interval = 0.1f)\n        {\n            m_imageList = new List<Image>();\n            m_interval = _interval;\n            cd = _cd;\n            m_amount = 0;\n            m_inCD = false;\n            fillAmount = 0;\n        }\n\n        /// <summary>\n        /// 设置填充比率\n        /// </summary>\n        /// <param name=\"a\">比率，范围【0-1】</param>\n        public void SetAmount(float a)\n        {\n            m_amount = Mathf.Clamp01(a);\n            for (int i = m_imageList.Count-1; i >= 0; i--)\n            {\n                if (m_imageList[i] != null)\n                    m_imageList[i].fillAmount = m_amount;\n            }\n\n            if (m_amount > 0 && !m_inCD)//当前不在cd中且cd>0则开始cd\n            {\n                Scheduler.Instance.RepeatCall(m_interval, UpdateAmount);\n                m_inCD = true;\n                if (cdStateChanged != null)\n                    cdStateChanged(m_inCD);\n            }\n            else if (m_amount <= 0 && m_inCD)//cd结束\n            {\n                Scheduler.Instance.CancelCallback(UpdateAmount);\n                m_inCD = false;\n                if (cdStateChanged != null)\n                    cdStateChanged(m_inCD);\n            }\n        }\n\n        private void UpdateAmount(float dt)\n        {\n            SetAmount(m_amount - m_perAmount);\n        }\n\n        /// <summary>\n        /// 设置整体的cd时长\n        /// </summary>\n        /// <param name=\"_cd\"></param>\n        public void SetCD(float _cd)\n        {\n            m_cd = _cd;\n\n            if (m_interval <= 0)\n                m_perAmount = m_cd;\n            else\n            {\n                int t = Mathf.CeilToInt(_cd / m_interval);\n                m_perAmount = 1.0f / t;\n            }\n        }\n\n        /// <summary>\n        /// 获取当前是否在cd中\n        /// </summary>\n        /// <returns></returns>\n        public bool GetCDState()\n        {\n            return m_inCD;\n        }\n\n        /// <summary>\n        /// 设置Tick时长，默认0.1\n        /// </summary>\n        /// <param name=\"interval\"></param>\n        public void SetInterval(float interval)\n        {\n            m_interval = interval;\n            SetCD(m_cd);\n        }\n\n        /// <summary>\n        /// 添加cd\n        /// </summary>\n        /// <param name=\"_image\"></param>\n        public void AddMask(Image _image)\n        {\n            if (_image.type != Image.Type.Filled)//如果当前不是填充模式则改为顶部转圈\n            {\n                _image.type = Image.Type.Filled;\n                _image.fillMethod = Image.FillMethod.Radial360;\n                _image.fillOrigin = (int)Image.Origin360.Top;\n                _image.fillClockwise = false;\n            }\n\n            if(!m_imageList.Contains(_image))\n                m_imageList.Add(_image);\n            _image.fillAmount = m_amount;\n        }\n\n        /// <summary>\n        /// 移除cd\n        /// </summary>\n        /// <param name=\"_image\"></param>\n        public void RemoveMask(Image _image)\n        {\n            if (m_imageList.Contains(_image))\n                m_imageList.Remove(_image);\n        }\n\n\n    }\n\n}\n```\n\n 其中， Scheduler.Instance.RepeatCall是一个计时器回调，可以在Update里做相应的计时替换，每次更新调用的时长为m_internal。\n使用方式为\n``` csharp\ncdItem = CDManager.Instance.AddCD(\"Key\", images, cdtime);\n```\n\n使用相同的cd则直接把key设置相同即可，通过返回的cdItem进行其他的操作。\n![图片来源我的csdn](http://img.blog.csdn.net/20170320160355897?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvQ2hlbmc2MjQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center)\n\n得到结果所有编号1的cd转动相同，2的也相同。","source":"_posts/统一管理技能及物品cd.md","raw":"---\ntitle: 统一管理技能及物品cd\ndate: 2017-3-20\ntags:\n- cd管理\n- Unity\ncategories: UnityScript\n---\n\n\n有个需求，比如使用过物品以后， 技能后以一个cd时间，要求技能面板上和技能栏以及其他一切有可以使用该技能的地方做一个同步cd，因此有下面的管理模块。\n\n``` csharp\n\nusing System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\nusing UnityEngine.UI;\n\n\nnamespace Assets.UI\n{\n    /// <summary>\n    /// Introduction: CD 统一管理类,实现多个cd同动\n    /// Author: Cheng\n    /// Time: \n    /// </summary>\n    public class CDManager\n    {\n        private Dictionary<string, CDMask> m_cds; \n        private static CDManager instance;\n        public static CDManager Instance\n        {\n            get\n            {\n                if(instance == null)\n                    instance = new CDManager();\n                return instance;\n            }\n        }\n\n        public CDManager()\n        {\n            m_cds = new Dictionary<string, CDMask>();\n        }\n\n        /// <summary>\n        /// 添加CD\n        /// </summary>\n        /// <param name=\"_id\">标识符</param>\n        /// <param name=\"_image\">cd图片</param>\n        /// <param name=\"_cd\">cd时长</param>\n        /// <returns></returns>\n        public CDMask AddCD(string _id, Image _image, float _cd)\n        {\n            CDMask mask;\n            if (!m_cds.TryGetValue(_id, out mask))\n            {\n                mask = new CDMask(_cd);\n                m_cds.Add(_id, mask);\n            }\n            mask.AddMask(_image);\n            return mask;\n        }\n\n        /// <summary>\n        /// 移除CD\n        /// </summary>\n        /// <param name=\"_id\">标识符</param>\n        /// <param name=\"_image\">cd图片</param>\n        public void RemoveCD(string _id, Image _image)\n        {\n            CDMask mask;\n            if (m_cds.TryGetValue(_id, out mask))\n            {\n                mask.RemoveMask(_image);\n            }\n        }\n\n        /// <summary>\n        /// 获取cd管理项\n        /// </summary>\n        /// <param name=\"_id\"></param>\n        /// <returns></returns>\n        public CDMask GetCDMask(string _id)\n        {\n            if (m_cds.ContainsKey(_id))\n                return m_cds[_id];\n            return null;\n        }\n    }\n\n\n    public class CDMask\n    {\n        private List<Image> m_imageList; //同一cd列表\n        private float m_cd;//cd时间\n        private float m_amount;//当前amount\n        private bool m_inCD;//是否在cd中\n        private float m_interval;//每次变化时间间隔\n        private float m_perAmount;//每次变化量\n        /// <summary>\n        /// 填充比率\n        /// </summary>\n        public float fillAmount { get { return m_amount; } set { SetAmount(value); } }\n        /// <summary>\n        /// cd时长\n        /// </summary>\n        public float cd { get { return m_cd; } set { SetCD(value); } }\n        /// <summary>\n        /// cd开始和结束事件\n        /// </summary>\n        public event Callback_1<bool> cdStateChanged;\n\n        public CDMask(float _cd, float _interval = 0.1f)\n        {\n            m_imageList = new List<Image>();\n            m_interval = _interval;\n            cd = _cd;\n            m_amount = 0;\n            m_inCD = false;\n            fillAmount = 0;\n        }\n\n        /// <summary>\n        /// 设置填充比率\n        /// </summary>\n        /// <param name=\"a\">比率，范围【0-1】</param>\n        public void SetAmount(float a)\n        {\n            m_amount = Mathf.Clamp01(a);\n            for (int i = m_imageList.Count-1; i >= 0; i--)\n            {\n                if (m_imageList[i] != null)\n                    m_imageList[i].fillAmount = m_amount;\n            }\n\n            if (m_amount > 0 && !m_inCD)//当前不在cd中且cd>0则开始cd\n            {\n                Scheduler.Instance.RepeatCall(m_interval, UpdateAmount);\n                m_inCD = true;\n                if (cdStateChanged != null)\n                    cdStateChanged(m_inCD);\n            }\n            else if (m_amount <= 0 && m_inCD)//cd结束\n            {\n                Scheduler.Instance.CancelCallback(UpdateAmount);\n                m_inCD = false;\n                if (cdStateChanged != null)\n                    cdStateChanged(m_inCD);\n            }\n        }\n\n        private void UpdateAmount(float dt)\n        {\n            SetAmount(m_amount - m_perAmount);\n        }\n\n        /// <summary>\n        /// 设置整体的cd时长\n        /// </summary>\n        /// <param name=\"_cd\"></param>\n        public void SetCD(float _cd)\n        {\n            m_cd = _cd;\n\n            if (m_interval <= 0)\n                m_perAmount = m_cd;\n            else\n            {\n                int t = Mathf.CeilToInt(_cd / m_interval);\n                m_perAmount = 1.0f / t;\n            }\n        }\n\n        /// <summary>\n        /// 获取当前是否在cd中\n        /// </summary>\n        /// <returns></returns>\n        public bool GetCDState()\n        {\n            return m_inCD;\n        }\n\n        /// <summary>\n        /// 设置Tick时长，默认0.1\n        /// </summary>\n        /// <param name=\"interval\"></param>\n        public void SetInterval(float interval)\n        {\n            m_interval = interval;\n            SetCD(m_cd);\n        }\n\n        /// <summary>\n        /// 添加cd\n        /// </summary>\n        /// <param name=\"_image\"></param>\n        public void AddMask(Image _image)\n        {\n            if (_image.type != Image.Type.Filled)//如果当前不是填充模式则改为顶部转圈\n            {\n                _image.type = Image.Type.Filled;\n                _image.fillMethod = Image.FillMethod.Radial360;\n                _image.fillOrigin = (int)Image.Origin360.Top;\n                _image.fillClockwise = false;\n            }\n\n            if(!m_imageList.Contains(_image))\n                m_imageList.Add(_image);\n            _image.fillAmount = m_amount;\n        }\n\n        /// <summary>\n        /// 移除cd\n        /// </summary>\n        /// <param name=\"_image\"></param>\n        public void RemoveMask(Image _image)\n        {\n            if (m_imageList.Contains(_image))\n                m_imageList.Remove(_image);\n        }\n\n\n    }\n\n}\n```\n\n 其中， Scheduler.Instance.RepeatCall是一个计时器回调，可以在Update里做相应的计时替换，每次更新调用的时长为m_internal。\n使用方式为\n``` csharp\ncdItem = CDManager.Instance.AddCD(\"Key\", images, cdtime);\n```\n\n使用相同的cd则直接把key设置相同即可，通过返回的cdItem进行其他的操作。\n![图片来源我的csdn](http://img.blog.csdn.net/20170320160355897?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvQ2hlbmc2MjQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center)\n\n得到结果所有编号1的cd转动相同，2的也相同。","slug":"统一管理技能及物品cd","published":1,"updated":"2017-10-26T10:45:23.415Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj9fm90ud001l2cobemazc1oh","content":"<p>有个需求，比如使用过物品以后， 技能后以一个cd时间，要求技能面板上和技能栏以及其他一切有可以使用该技能的地方做一个同步cd，因此有下面的管理模块。</p>\n<pre class=\"line-numbers language-csharp\"><code class=\"language-csharp\">\n<span class=\"token keyword\">using</span> System<span class=\"token punctuation\">.</span>Collections<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> System<span class=\"token punctuation\">.</span>Collections<span class=\"token punctuation\">.</span>Generic<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> UnityEngine<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> UnityEngine<span class=\"token punctuation\">.</span>UI<span class=\"token punctuation\">;</span>\n\n\n<span class=\"token keyword\">namespace</span> Assets<span class=\"token punctuation\">.</span>UI\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// &lt;summary></span>\n    <span class=\"token comment\" spellcheck=\"true\">/// Introduction: CD 统一管理类,实现多个cd同动</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// Author: Cheng</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// Time: </span>\n    <span class=\"token comment\" spellcheck=\"true\">/// &lt;/summary></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CDManager</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">private</span> Dictionary<span class=\"token operator\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">,</span> CDMask<span class=\"token operator\">></span> m_cds<span class=\"token punctuation\">;</span> \n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> CDManager instance<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> CDManager Instance\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">get</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>instance <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n                    instance <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CDManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">return</span> instance<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">public</span> <span class=\"token function\">CDManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            m_cds <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Dictionary</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">,</span> CDMask<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;summary></span>\n        <span class=\"token comment\" spellcheck=\"true\">/// 添加CD</span>\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;/summary></span>\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;param name=\"_id\">标识符&lt;/param></span>\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;param name=\"_image\">cd图片&lt;/param></span>\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;param name=\"_cd\">cd时长&lt;/param></span>\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;returns>&lt;/returns></span>\n        <span class=\"token keyword\">public</span> CDMask <span class=\"token function\">AddCD</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">string</span> _id<span class=\"token punctuation\">,</span> Image _image<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> _cd<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            CDMask mask<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>m_cds<span class=\"token punctuation\">.</span><span class=\"token function\">TryGetValue</span><span class=\"token punctuation\">(</span>_id<span class=\"token punctuation\">,</span> <span class=\"token keyword\">out</span> mask<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                mask <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CDMask</span><span class=\"token punctuation\">(</span>_cd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                m_cds<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>_id<span class=\"token punctuation\">,</span> mask<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            mask<span class=\"token punctuation\">.</span><span class=\"token function\">AddMask</span><span class=\"token punctuation\">(</span>_image<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> mask<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;summary></span>\n        <span class=\"token comment\" spellcheck=\"true\">/// 移除CD</span>\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;/summary></span>\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;param name=\"_id\">标识符&lt;/param></span>\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;param name=\"_image\">cd图片&lt;/param></span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">RemoveCD</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">string</span> _id<span class=\"token punctuation\">,</span> Image _image<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            CDMask mask<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>m_cds<span class=\"token punctuation\">.</span><span class=\"token function\">TryGetValue</span><span class=\"token punctuation\">(</span>_id<span class=\"token punctuation\">,</span> <span class=\"token keyword\">out</span> mask<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                mask<span class=\"token punctuation\">.</span><span class=\"token function\">RemoveMask</span><span class=\"token punctuation\">(</span>_image<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;summary></span>\n        <span class=\"token comment\" spellcheck=\"true\">/// 获取cd管理项</span>\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;/summary></span>\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;param name=\"_id\">&lt;/param></span>\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;returns>&lt;/returns></span>\n        <span class=\"token keyword\">public</span> CDMask <span class=\"token function\">GetCDMask</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">string</span> _id<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>m_cds<span class=\"token punctuation\">.</span><span class=\"token function\">ContainsKey</span><span class=\"token punctuation\">(</span>_id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">return</span> m_cds<span class=\"token punctuation\">[</span>_id<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CDMask</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">private</span> List<span class=\"token operator\">&lt;</span>Image<span class=\"token operator\">></span> m_imageList<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">//同一cd列表</span>\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">float</span> m_cd<span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//cd时间</span>\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">float</span> m_amount<span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//当前amount</span>\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">bool</span> m_inCD<span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//是否在cd中</span>\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">float</span> m_interval<span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//每次变化时间间隔</span>\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">float</span> m_perAmount<span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//每次变化量</span>\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;summary></span>\n        <span class=\"token comment\" spellcheck=\"true\">/// 填充比率</span>\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;/summary></span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">float</span> fillAmount <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> m_amount<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span> <span class=\"token keyword\">set</span> <span class=\"token punctuation\">{</span> <span class=\"token function\">SetAmount</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">value</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;summary></span>\n        <span class=\"token comment\" spellcheck=\"true\">/// cd时长</span>\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;/summary></span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">float</span> cd <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> m_cd<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span> <span class=\"token keyword\">set</span> <span class=\"token punctuation\">{</span> <span class=\"token function\">SetCD</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">value</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;summary></span>\n        <span class=\"token comment\" spellcheck=\"true\">/// cd开始和结束事件</span>\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;/summary></span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">event</span> Callback_1<span class=\"token operator\">&lt;</span><span class=\"token keyword\">bool</span><span class=\"token operator\">></span> cdStateChanged<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">public</span> <span class=\"token function\">CDMask</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> _cd<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> _interval <span class=\"token operator\">=</span> <span class=\"token number\">0.1f</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            m_imageList <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">List</span><span class=\"token operator\">&lt;</span>Image<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            m_interval <span class=\"token operator\">=</span> _interval<span class=\"token punctuation\">;</span>\n            cd <span class=\"token operator\">=</span> _cd<span class=\"token punctuation\">;</span>\n            m_amount <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            m_inCD <span class=\"token operator\">=</span> <span class=\"token keyword\">false</span><span class=\"token punctuation\">;</span>\n            fillAmount <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;summary></span>\n        <span class=\"token comment\" spellcheck=\"true\">/// 设置填充比率</span>\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;/summary></span>\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;param name=\"a\">比率，范围【0-1】&lt;/param></span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">SetAmount</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> a<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            m_amount <span class=\"token operator\">=</span> Mathf<span class=\"token punctuation\">.</span><span class=\"token function\">Clamp01</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> m_imageList<span class=\"token punctuation\">.</span>Count<span class=\"token number\">-1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>m_imageList<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n                    m_imageList<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>fillAmount <span class=\"token operator\">=</span> m_amount<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>m_amount <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>m_inCD<span class=\"token punctuation\">)</span><span class=\"token comment\" spellcheck=\"true\">//当前不在cd中且cd>0则开始cd</span>\n            <span class=\"token punctuation\">{</span>\n                Scheduler<span class=\"token punctuation\">.</span>Instance<span class=\"token punctuation\">.</span><span class=\"token function\">RepeatCall</span><span class=\"token punctuation\">(</span>m_interval<span class=\"token punctuation\">,</span> UpdateAmount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                m_inCD <span class=\"token operator\">=</span> <span class=\"token keyword\">true</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cdStateChanged <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token function\">cdStateChanged</span><span class=\"token punctuation\">(</span>m_inCD<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>m_amount <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> m_inCD<span class=\"token punctuation\">)</span><span class=\"token comment\" spellcheck=\"true\">//cd结束</span>\n            <span class=\"token punctuation\">{</span>\n                Scheduler<span class=\"token punctuation\">.</span>Instance<span class=\"token punctuation\">.</span><span class=\"token function\">CancelCallback</span><span class=\"token punctuation\">(</span>UpdateAmount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                m_inCD <span class=\"token operator\">=</span> <span class=\"token keyword\">false</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cdStateChanged <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token function\">cdStateChanged</span><span class=\"token punctuation\">(</span>m_inCD<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">UpdateAmount</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> dt<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">SetAmount</span><span class=\"token punctuation\">(</span>m_amount <span class=\"token operator\">-</span> m_perAmount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;summary></span>\n        <span class=\"token comment\" spellcheck=\"true\">/// 设置整体的cd时长</span>\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;/summary></span>\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;param name=\"_cd\">&lt;/param></span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">SetCD</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> _cd<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            m_cd <span class=\"token operator\">=</span> _cd<span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>m_interval <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n                m_perAmount <span class=\"token operator\">=</span> m_cd<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">else</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">int</span> t <span class=\"token operator\">=</span> Mathf<span class=\"token punctuation\">.</span><span class=\"token function\">CeilToInt</span><span class=\"token punctuation\">(</span>_cd <span class=\"token operator\">/</span> m_interval<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                m_perAmount <span class=\"token operator\">=</span> <span class=\"token number\">1.0f</span> <span class=\"token operator\">/</span> t<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;summary></span>\n        <span class=\"token comment\" spellcheck=\"true\">/// 获取当前是否在cd中</span>\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;/summary></span>\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;returns>&lt;/returns></span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">bool</span> <span class=\"token function\">GetCDState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> m_inCD<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;summary></span>\n        <span class=\"token comment\" spellcheck=\"true\">/// 设置Tick时长，默认0.1</span>\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;/summary></span>\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;param name=\"interval\">&lt;/param></span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">SetInterval</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> interval<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            m_interval <span class=\"token operator\">=</span> interval<span class=\"token punctuation\">;</span>\n            <span class=\"token function\">SetCD</span><span class=\"token punctuation\">(</span>m_cd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;summary></span>\n        <span class=\"token comment\" spellcheck=\"true\">/// 添加cd</span>\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;/summary></span>\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;param name=\"_image\">&lt;/param></span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">AddMask</span><span class=\"token punctuation\">(</span>Image _image<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>_image<span class=\"token punctuation\">.</span>type <span class=\"token operator\">!=</span> Image<span class=\"token punctuation\">.</span>Type<span class=\"token punctuation\">.</span>Filled<span class=\"token punctuation\">)</span><span class=\"token comment\" spellcheck=\"true\">//如果当前不是填充模式则改为顶部转圈</span>\n            <span class=\"token punctuation\">{</span>\n                _image<span class=\"token punctuation\">.</span>type <span class=\"token operator\">=</span> Image<span class=\"token punctuation\">.</span>Type<span class=\"token punctuation\">.</span>Filled<span class=\"token punctuation\">;</span>\n                _image<span class=\"token punctuation\">.</span>fillMethod <span class=\"token operator\">=</span> Image<span class=\"token punctuation\">.</span>FillMethod<span class=\"token punctuation\">.</span>Radial360<span class=\"token punctuation\">;</span>\n                _image<span class=\"token punctuation\">.</span>fillOrigin <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>Image<span class=\"token punctuation\">.</span>Origin360<span class=\"token punctuation\">.</span>Top<span class=\"token punctuation\">;</span>\n                _image<span class=\"token punctuation\">.</span>fillClockwise <span class=\"token operator\">=</span> <span class=\"token keyword\">false</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>m_imageList<span class=\"token punctuation\">.</span><span class=\"token function\">Contains</span><span class=\"token punctuation\">(</span>_image<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                m_imageList<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>_image<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            _image<span class=\"token punctuation\">.</span>fillAmount <span class=\"token operator\">=</span> m_amount<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;summary></span>\n        <span class=\"token comment\" spellcheck=\"true\">/// 移除cd</span>\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;/summary></span>\n        <span class=\"token comment\" spellcheck=\"true\">/// &lt;param name=\"_image\">&lt;/param></span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">RemoveMask</span><span class=\"token punctuation\">(</span>Image _image<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>m_imageList<span class=\"token punctuation\">.</span><span class=\"token function\">Contains</span><span class=\"token punctuation\">(</span>_image<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                m_imageList<span class=\"token punctuation\">.</span><span class=\"token function\">Remove</span><span class=\"token punctuation\">(</span>_image<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p> 其中， Scheduler.Instance.RepeatCall是一个计时器回调，可以在Update里做相应的计时替换，每次更新调用的时长为m_internal。<br>使用方式为</p>\n<pre class=\"line-numbers language-csharp\"><code class=\"language-csharp\">cdItem <span class=\"token operator\">=</span> CDManager<span class=\"token punctuation\">.</span>Instance<span class=\"token punctuation\">.</span><span class=\"token function\">AddCD</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Key\"</span><span class=\"token punctuation\">,</span> images<span class=\"token punctuation\">,</span> cdtime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>使用相同的cd则直接把key设置相同即可，通过返回的cdItem进行其他的操作。<br><img src=\"http://img.blog.csdn.net/20170320160355897?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvQ2hlbmc2MjQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\" alt=\"图片来源我的csdn\"></p>\n<p>得到结果所有编号1的cd转动相同，2的也相同。</p>\n","site":{"data":{"gallery":{"美女":{"full_link":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1508912200438&di=d5b3eacf86d8f94c149c6fc68fe4da67&imgtype=0&src=http%3A%2F%2Fpic01.taopic.com%2F151014%2F234732-15101410452229-lp.jpg","thumb_link":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1508912200438&di=d5b3eacf86d8f94c149c6fc68fe4da67&imgtype=0&src=http%3A%2F%2Fpic01.taopic.com%2F151014%2F234732-15101410452229-lp.jpg","descr":"美女插画"}},"links":{"Github":{"link":"https://github.com/garsonlab","avatar":"https://avatars3.githubusercontent.com/u/13958934?s=460&v=4","descr":"My Github","type":"Blog"},"OnLineTools":{"link":"http://tool.lu/","avatar":"http://qn11.tool.lu/201710/15/103320SbM84Ql4tETjg49a_28x28.png","descr":"在线工具","type":"Tools"},"CMDMarkdown":{"link":"https://www.zybuluo.com/","avatar":"https://www.zybuluo.com/static/img/logo.png","descr":"Markdown在线编辑","type":"Tools"},"Hexo文档":{"link":"https://hexo.io/zh-cn/docs/","avatar":"https://hexo.io/logo.svg","descr":"Hexo中文官方文档","type":"Community"},"游戏蛮牛":{"link":"http://www.manew.com/forum.php","avatar":"http://www.manew.com/template/manew2016/images/logo.png","descr":"unity交流社区","type":"Unity"},"FairyGUI":{"link":"http://www.fairygui.com/","avatar":"http://www.fairygui.com/images/20170728151207.png","descr":"FairyGUI官方网站","type":"Site"}},"linktypes":{"Blog":{"name":"关注的博客"},"Unity":{"name":"Unity3D"},"Community":{"name":"浏览的社区"},"Tools":{"name":"工具"},"Site":{"name":"收藏的网址"}}}},"excerpt":"","more":"<p>有个需求，比如使用过物品以后， 技能后以一个cd时间，要求技能面板上和技能栏以及其他一切有可以使用该技能的地方做一个同步cd，因此有下面的管理模块。</p>\n<pre><code class=\"csharp\">\nusing System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\nusing UnityEngine.UI;\n\n\nnamespace Assets.UI\n{\n    /// &lt;summary&gt;\n    /// Introduction: CD 统一管理类,实现多个cd同动\n    /// Author: Cheng\n    /// Time: \n    /// &lt;/summary&gt;\n    public class CDManager\n    {\n        private Dictionary&lt;string, CDMask&gt; m_cds; \n        private static CDManager instance;\n        public static CDManager Instance\n        {\n            get\n            {\n                if(instance == null)\n                    instance = new CDManager();\n                return instance;\n            }\n        }\n\n        public CDManager()\n        {\n            m_cds = new Dictionary&lt;string, CDMask&gt;();\n        }\n\n        /// &lt;summary&gt;\n        /// 添加CD\n        /// &lt;/summary&gt;\n        /// &lt;param name=&quot;_id&quot;&gt;标识符&lt;/param&gt;\n        /// &lt;param name=&quot;_image&quot;&gt;cd图片&lt;/param&gt;\n        /// &lt;param name=&quot;_cd&quot;&gt;cd时长&lt;/param&gt;\n        /// &lt;returns&gt;&lt;/returns&gt;\n        public CDMask AddCD(string _id, Image _image, float _cd)\n        {\n            CDMask mask;\n            if (!m_cds.TryGetValue(_id, out mask))\n            {\n                mask = new CDMask(_cd);\n                m_cds.Add(_id, mask);\n            }\n            mask.AddMask(_image);\n            return mask;\n        }\n\n        /// &lt;summary&gt;\n        /// 移除CD\n        /// &lt;/summary&gt;\n        /// &lt;param name=&quot;_id&quot;&gt;标识符&lt;/param&gt;\n        /// &lt;param name=&quot;_image&quot;&gt;cd图片&lt;/param&gt;\n        public void RemoveCD(string _id, Image _image)\n        {\n            CDMask mask;\n            if (m_cds.TryGetValue(_id, out mask))\n            {\n                mask.RemoveMask(_image);\n            }\n        }\n\n        /// &lt;summary&gt;\n        /// 获取cd管理项\n        /// &lt;/summary&gt;\n        /// &lt;param name=&quot;_id&quot;&gt;&lt;/param&gt;\n        /// &lt;returns&gt;&lt;/returns&gt;\n        public CDMask GetCDMask(string _id)\n        {\n            if (m_cds.ContainsKey(_id))\n                return m_cds[_id];\n            return null;\n        }\n    }\n\n\n    public class CDMask\n    {\n        private List&lt;Image&gt; m_imageList; //同一cd列表\n        private float m_cd;//cd时间\n        private float m_amount;//当前amount\n        private bool m_inCD;//是否在cd中\n        private float m_interval;//每次变化时间间隔\n        private float m_perAmount;//每次变化量\n        /// &lt;summary&gt;\n        /// 填充比率\n        /// &lt;/summary&gt;\n        public float fillAmount { get { return m_amount; } set { SetAmount(value); } }\n        /// &lt;summary&gt;\n        /// cd时长\n        /// &lt;/summary&gt;\n        public float cd { get { return m_cd; } set { SetCD(value); } }\n        /// &lt;summary&gt;\n        /// cd开始和结束事件\n        /// &lt;/summary&gt;\n        public event Callback_1&lt;bool&gt; cdStateChanged;\n\n        public CDMask(float _cd, float _interval = 0.1f)\n        {\n            m_imageList = new List&lt;Image&gt;();\n            m_interval = _interval;\n            cd = _cd;\n            m_amount = 0;\n            m_inCD = false;\n            fillAmount = 0;\n        }\n\n        /// &lt;summary&gt;\n        /// 设置填充比率\n        /// &lt;/summary&gt;\n        /// &lt;param name=&quot;a&quot;&gt;比率，范围【0-1】&lt;/param&gt;\n        public void SetAmount(float a)\n        {\n            m_amount = Mathf.Clamp01(a);\n            for (int i = m_imageList.Count-1; i &gt;= 0; i--)\n            {\n                if (m_imageList[i] != null)\n                    m_imageList[i].fillAmount = m_amount;\n            }\n\n            if (m_amount &gt; 0 &amp;&amp; !m_inCD)//当前不在cd中且cd&gt;0则开始cd\n            {\n                Scheduler.Instance.RepeatCall(m_interval, UpdateAmount);\n                m_inCD = true;\n                if (cdStateChanged != null)\n                    cdStateChanged(m_inCD);\n            }\n            else if (m_amount &lt;= 0 &amp;&amp; m_inCD)//cd结束\n            {\n                Scheduler.Instance.CancelCallback(UpdateAmount);\n                m_inCD = false;\n                if (cdStateChanged != null)\n                    cdStateChanged(m_inCD);\n            }\n        }\n\n        private void UpdateAmount(float dt)\n        {\n            SetAmount(m_amount - m_perAmount);\n        }\n\n        /// &lt;summary&gt;\n        /// 设置整体的cd时长\n        /// &lt;/summary&gt;\n        /// &lt;param name=&quot;_cd&quot;&gt;&lt;/param&gt;\n        public void SetCD(float _cd)\n        {\n            m_cd = _cd;\n\n            if (m_interval &lt;= 0)\n                m_perAmount = m_cd;\n            else\n            {\n                int t = Mathf.CeilToInt(_cd / m_interval);\n                m_perAmount = 1.0f / t;\n            }\n        }\n\n        /// &lt;summary&gt;\n        /// 获取当前是否在cd中\n        /// &lt;/summary&gt;\n        /// &lt;returns&gt;&lt;/returns&gt;\n        public bool GetCDState()\n        {\n            return m_inCD;\n        }\n\n        /// &lt;summary&gt;\n        /// 设置Tick时长，默认0.1\n        /// &lt;/summary&gt;\n        /// &lt;param name=&quot;interval&quot;&gt;&lt;/param&gt;\n        public void SetInterval(float interval)\n        {\n            m_interval = interval;\n            SetCD(m_cd);\n        }\n\n        /// &lt;summary&gt;\n        /// 添加cd\n        /// &lt;/summary&gt;\n        /// &lt;param name=&quot;_image&quot;&gt;&lt;/param&gt;\n        public void AddMask(Image _image)\n        {\n            if (_image.type != Image.Type.Filled)//如果当前不是填充模式则改为顶部转圈\n            {\n                _image.type = Image.Type.Filled;\n                _image.fillMethod = Image.FillMethod.Radial360;\n                _image.fillOrigin = (int)Image.Origin360.Top;\n                _image.fillClockwise = false;\n            }\n\n            if(!m_imageList.Contains(_image))\n                m_imageList.Add(_image);\n            _image.fillAmount = m_amount;\n        }\n\n        /// &lt;summary&gt;\n        /// 移除cd\n        /// &lt;/summary&gt;\n        /// &lt;param name=&quot;_image&quot;&gt;&lt;/param&gt;\n        public void RemoveMask(Image _image)\n        {\n            if (m_imageList.Contains(_image))\n                m_imageList.Remove(_image);\n        }\n\n\n    }\n\n}\n</code></pre>\n<p> 其中， Scheduler.Instance.RepeatCall是一个计时器回调，可以在Update里做相应的计时替换，每次更新调用的时长为m_internal。<br>使用方式为</p>\n<pre><code class=\"csharp\">cdItem = CDManager.Instance.AddCD(&quot;Key&quot;, images, cdtime);\n</code></pre>\n<p>使用相同的cd则直接把key设置相同即可，通过返回的cdItem进行其他的操作。<br><img src=\"http://img.blog.csdn.net/20170320160355897?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvQ2hlbmc2MjQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\" alt=\"图片来源我的csdn\"></p>\n<p>得到结果所有编号1的cd转动相同，2的也相同。</p>\n"},{"title":"踩坑填坑——DropDown","date":"2017-08-07T16:00:00.000Z","_content":"\n在使用UGUI的 DropDown 时， Canvas 的 Render Mode 选择了 Screen Space--Camera， 此时遇到一个小bug， 当我把这个下拉组件放到屏幕中间附近时， 下拉列表显示是正常的。当我把组件整体移到边缘，突然出现下拉列表的 Content 的坐标 不合法，由于 ugui 的点击关闭处理是在 Canvas 的子节点最下方又生成一个 全屏的 遮罩 来保证实现 \"点击关闭\"，所以此时整个界面卡死..........翻遍源码断点我也没找到问题..\n\n\n![我的csdn](http://img.blog.csdn.net/20170808122348361?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvQ2hlbmc2MjQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center)（中间：边缘）![我的csdn](http://img.blog.csdn.net/20170808122416928?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvQ2hlbmc2MjQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center)\n\n![我的csdn](http://img.blog.csdn.net/20170808122431717?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvQ2hlbmc2MjQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center)\n\n另外，他的下拉列表实现， 不适合多个数据，假如有百十个就生成百十个下来的子菜单，这明显是不合理的，所以，把下拉改成 无限循环 列表是必须的。\n于是，开始自己动手造轮子：\n``` csharp\n\nusing System;\nusing System.Collections;\nusing System.Collections.Generic;\nusing Assets.UI;\nusing UnityEngine;\nusing UnityEngine.UI;\n\n/// <summary>\n/// Introduction: GDropDown\n/// Author:     Cheng\n/// Time: \n/// </summary>\n[AddComponentMenu(\"UI/GDropdown\", 100)]\n[RequireComponent(typeof(RectTransform))]\npublic class GDropDown : MonoBehaviour\n{\n\n    [Tooltip(\"Button of Whole Component\")]\n    [SerializeField]\n    private Toggle m_CaptionToggle;\n    /// <summary>\n    /// Button of Whole Component\n    /// </summary>\n    public Toggle CaptionToggle { get { return m_CaptionToggle; } set { SetCaptionButton(value);} }\n\n    [Tooltip(\"Display Text of Selected Item\")]\n    [SerializeField]\n    private Text m_CaptionText;\n    /// <summary>\n    /// Display Text of Selected Item\n    /// </summary>\n    public Text CaptionText { get { return m_CaptionText; } set { m_CaptionText = value; } }\n\n    [Tooltip(\"Display Image of Selected Item\")]\n    [SerializeField]\n    private Image m_CaptionImage;\n    /// <summary>\n    /// Display Image of Selected Item\n    /// </summary>\n    public Image CaptionImage { get { return m_CaptionImage; } set { m_CaptionImage = value; } }\n\n    [Space]\n\n    [Tooltip(\"Drop List\")]\n    [SerializeField]\n    private ScrollRect m_ScrollRect;\n    /// <summary>\n    /// Drop List \n    /// </summary>\n    public ScrollRect ScrollRect { get { return m_ScrollRect; } set { m_ScrollRect = value; } }\n\n    [Tooltip(\"Template of Drop List's Item\")]   \n    [SerializeField]\n    private GameObject m_DropItem;\n    /// <summary>\n    /// Template of Drop List's Item\n    /// </summary>\n    public GameObject DropItem { get { return m_DropItem; } set { SetDropItem(value); } }\n\n    [Tooltip(\"Current Select Index\")]\n    [SerializeField]\n    private int m_Index;\n    /// <summary>\n    /// Current Select Index\n    /// </summary>\n    public int Index { get { return m_Index; } set { SetSelectIndex(value); }}\n    public string Text { get { return m_DropData.Count > Index ? m_DropData[Index].text : \"\"; } }\n\n    /// <summary>\n    /// Drop Down Value Changed\n    /// </summary>\n    public Callback_1<int> OnValueChanged;\n\n    [Tooltip(\"Drop Data\")]\n    [SerializeField]\n    List<GItemData> m_DropData = new List<GItemData>();\n\n    private ScrollList m_ScrollList;\n    private Dictionary<Transform, GItem> m_Items = new Dictionary<Transform, GItem>();\n    private RectTransform m_PointerMask;\n    private Transform m_Canvas;\n    \n\n    void Awake()\n    {\n        m_ScrollList = GetOrAddComponent<ScrollList>(ScrollRect.gameObject);\n        m_ScrollList.onItemRender = OnItemRender;\n        SetSelectIndex(m_Index);\n        SetDropItem(m_DropItem);\n        RefreshShowValue();\n        SetCaptionButton(m_CaptionToggle);\n\n        m_CaptionToggle.isOn = false;\n        CloseMask();\n    }\n\n    public void AddOptions(string[] options)\n    {\n        for (int i = 0; i < options.Length; i++)\n            this.m_DropData.Add(new GItemData(options[i]));\n\n        if (m_CaptionToggle.isOn)\n            OpenMask();\n    }\n\n    public void AddOptions(Sprite[] options)\n    {\n        for (int i = 0; i < options.Length; i++)\n            this.m_DropData.Add(new GItemData(options[i]));\n\n        if (m_CaptionToggle.isOn)\n            OpenMask();\n    }\n\n    public void AddOptions(GItemData[] options)\n    {\n        for (int i = 0; i < options.Length; i++)\n            this.m_DropData.Add(options[i]);\n\n        if (m_CaptionToggle.isOn)\n            OpenMask();\n    }\n\n    public void RemoveAt(int index)\n    {\n        if (this.m_DropData.Count > index)\n        {\n            this.m_DropData.RemoveAt(index);\n            if (index == Index)\n            {\n                SetSelectIndex(index-1);\n            }\n        }\n    }\n\n    public void ClearOptions()\n    {\n        this.m_DropData.Clear();\n        if (m_CaptionToggle.isOn)\n            OpenMask();\n    }\n\n\n    /// <summary>\n    /// Refresh Display View\n    /// </summary>\n    private void RefreshShowValue()\n    {\n        if (m_DropData.Count > Index)\n        {\n            GItemData data = m_DropData[Index];\n            if (CaptionText != null)\n                CaptionText.text = data.text;\n            if (CaptionImage != null)\n                CaptionImage.sprite = data.image;\n        }\n        else\n        {\n            if (CaptionText != null)\n                CaptionText.text = \"\";\n            if (CaptionImage != null)\n                CaptionImage.sprite = null;\n        }\n    }\n\n    /// <summary>\n    /// Render Item in List\n    /// </summary>\n    /// <param name=\"index\"></param>\n    /// <param name=\"child\"></param>\n    private void OnItemRender(int index, Transform child)\n    {\n        GItem item;\n        if (!m_Items.TryGetValue(child, out item))\n            item = new GItem(this, child);\n\n        if (m_DropData.Count > index)\n        {\n            item.Reset(m_DropData[index].text, m_DropData[index].image, index == Index);\n        }\n    }\n\n    /// <summary>\n    /// Set Cur Select Index When Click\n    /// </summary>\n    /// <param name=\"p\"></param>\n    internal void SetSelectIndex(int p)\n    {\n        if (p < m_DropData.Count) //if exist data\n        {\n            m_Index = p;\n            RefreshShowValue();\n            if (OnValueChanged != null)\n            {\n                OnValueChanged(m_Index);\n            }\n        }\n        else\n        {\n            if (m_DropData.Count > 0)//Back To First\n            {\n                m_Index = 0;\n                RefreshShowValue();\n                if (OnValueChanged != null)\n                {\n                    OnValueChanged(m_Index);\n                }\n            }\n        }\n\n        foreach (var value in m_Items.Values)\n        {\n            value.SetActive(false);\n        }\n        m_CaptionToggle.isOn = false;\n    }\n\n    /// <summary>\n    /// Open Mask to Poniters Out of List\n    /// </summary>\n    private void OpenMask()\n    {\n        if (m_PointerMask == null)//Create Mask\n        {\n            GameObject o = new GameObject(\"Pointer Mask\");\n            o.transform.SetParent(transform);\n            Image mask = o.AddComponent<Image>();\n            mask.color = new Color(1, 1, 1, 0);\n            m_PointerMask = o.transform as RectTransform;\n            m_PointerMask.sizeDelta = new Vector2(Screen.width, Screen.height);\n            Button btnMask = o.AddComponent<Button>();\n            btnMask.onClick.AddListener(CloseMask);\n        }\n\n        if (m_Canvas == null)//Find Canvas\n        {\n            Canvas canvas = GameObject.FindObjectOfType<Canvas>();\n            m_Canvas = canvas.transform;\n        }\n\n        m_PointerMask.gameObject.SetActive(true);\n        m_PointerMask.SetParent(m_Canvas);\n        m_PointerMask.localPosition = Vector3.zero;\n\n        if (m_ScrollRect != null)\n        {\n            m_ScrollRect.transform.SetParent(m_Canvas);\n            m_ScrollRect.gameObject.SetActive(true);\n            m_ScrollList.ChildCount = m_DropData.Count;\n        }\n    }\n\n    /// <summary>\n    /// Close Mask to Other Pointers\n    /// </summary>\n    private void CloseMask()\n    {\n        if (m_PointerMask != null)\n        {\n            m_PointerMask.transform.SetParent(transform);\n            m_PointerMask.gameObject.SetActive(false);\n        }\n\n        if (m_ScrollRect != null)\n        {\n            m_ScrollRect.transform.SetParent(transform);\n            m_ScrollRect.gameObject.SetActive(false);\n        }\n    }\n\n    /// <summary>\n    /// Set Drop Item, Set Anchor Left-Top\n    /// </summary>\n    /// <param name=\"item\"></param>\n    private void SetDropItem(GameObject item)\n    {\n        RectTransform rect = item.transform as RectTransform;\n        rect.anchorMin = Vector2.up;\n        rect.anchorMax = Vector2.up;\n        m_DropItem = item;\n        m_ScrollList.Child = item;\n    }\n\n    /// <summary>\n    /// Set Outter Button of Whole Component\n    /// </summary>\n    /// <param name=\"btn\"></param>\n    private void SetCaptionButton(Toggle btn)\n    {\n        if (m_CaptionToggle != null)\n            m_CaptionToggle.onValueChanged.RemoveListener(OnCaptionButtonClicked);\n\n        m_CaptionToggle = btn;\n        if(m_CaptionToggle != null)\n            m_CaptionToggle.onValueChanged.AddListener(OnCaptionButtonClicked);\n    }\n\n    /// <summary>\n    /// On Caption Button Clicked\n    /// </summary>\n    private void OnCaptionButtonClicked(bool active)\n    {\n        if (active)\n            OpenMask();\n        else\n            CloseMask();\n    }\n\n    /// <summary>\n    /// Get Or Add Component on O\n    /// </summary>\n    /// <typeparam name=\"T\"></typeparam>\n    /// <param name=\"o\"></param>\n    /// <returns></returns>\n    T GetOrAddComponent<T>(GameObject o) where T : Component\n    {\n        T com = o.GetComponent<T>();\n        if (com == null)\n            com = o.AddComponent<T>();\n        return com;\n    }\n\n    /// <summary>\n    /// Release All\n    /// </summary>\n    public void OnDestroy()\n    {\n        //If Release on Drop State, Delete Mask\n        if(m_PointerMask != null)\n            m_PointerMask.SetParent(transform);\n    }\n\n    /// <summary>\n    /// Renderer Item in Endless List\n    /// </summary>\n    protected internal class GItem\n    {\n        GDropDown dropDown;\n        Transform item;\n        Button btn;\n\n        Text text;\n        Image image;\n        GameObject selected;\n        bool activeSelf;\n\n        public string m_Text { get { return text.text; } set { text.text = value; } }\n        public Sprite m_Image { get { return image.sprite; } set { image.sprite = value; } }\n\n        public GItem(GDropDown parent, Transform item)\n        {\n            this.dropDown = parent;\n            this.item = item;\n            activeSelf = false;\n\n            Transform t_trans = item.FindChild(\"text\");\n            if (t_trans)\n            {\n                text = t_trans.gameObject.GetComponent<Text>();\n            }\n            Transform t_image = item.FindChild(\"image\");\n            if (t_image)\n            {\n                image = t_image.gameObject.GetComponent<Image>();\n            }\n            Transform t_selected = item.FindChild(\"selected\");\n            if (t_selected)\n            {\n                selected = t_selected.gameObject;\n            }\n\n            btn = item.GetComponent<Button>();\n            if (btn == null)\n            {\n                Transform t_btn = item.FindChild(\"btn\");\n                if (t_btn != null)\n                    btn = dropDown.GetOrAddComponent<Button>(t_btn.gameObject);\n                else\n                    btn = dropDown.GetOrAddComponent<Button>(item.gameObject);\n            }\n\n            btn.onClick.AddListener(OnBtnItemClicked);\n        }\n\n        private void OnBtnItemClicked()\n        {\n            if (!activeSelf)\n            {\n                SetActive(true);\n                dropDown.SetSelectIndex(int.Parse(item.name));\n            }\n        }\n\n        internal void SetActive(bool active)\n        {\n            this.activeSelf = active;\n            if(selected != null)\n                selected.SetActive(active);\n        }\n\n\n        internal void Reset(string txt, Sprite sprite, bool active)\n        {\n            if (text != null)\n                m_Text = txt;\n            if (image != null)\n                m_Image = sprite;\n            SetActive(active);\n        }\n    }\n\n    /// <summary>\n    /// Cache Data\n    /// </summary>\n    [Serializable]\n    public class GItemData\n    {\n        [SerializeField]\n        private string m_Text;\n        [SerializeField]\n        private Sprite m_Image;\n        public string text  { get { return m_Text; }  set { m_Text = value; } }\n        public Sprite image { get { return m_Image; } set { m_Image = value; } }\n        public GItemData(){}\n\n        public GItemData(string text)\n        {\n            this.text = text;\n        }\n\n        public GItemData(Sprite image)\n        {\n            this.image = image;\n        }\n\n        public GItemData(string text, Sprite image)\n        {\n            this.text = text;\n            this.image = image;\n        }\n    }\n\n}\n```\n\n![我的csdn](http://img.blog.csdn.net/20170808122959444?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvQ2hlbmc2MjQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center)\n\n组件的点击由Toggle 来控制 与 系统UGUI的类似，支持 点击选中 图片和文字， 自己添加一个下拉列表。\n\n<font color=\"red\">注意： 下拉子选项中， 命名 “text”的“Text”组件、命名 “image”的“Image”组件为该选项的可填充值，看代码一眼便知。命名“selected”的表示下拉列表打开时该选项选中的表现，与toggle相同，我只是乐意改成了button表示而已</font>\n\nIndex 就是当前选中项,无限列表需要用到我以前文章中的一篇[【UGUI】无限列表 ScrollView List](https://garsonlab.github.io/2017/05/02/%E6%97%A0%E9%99%90%E5%88%97%E8%A1%A8%20ScrollView%20List/)\n\n\n","source":"_posts/踩坑填坑——DropDown.md","raw":"---\ntitle: 踩坑填坑——DropDown\ndate: 2017-8-8\ntags:\n- UGUI\n- Dropdown\ncategories: UGUI\n---\n\n在使用UGUI的 DropDown 时， Canvas 的 Render Mode 选择了 Screen Space--Camera， 此时遇到一个小bug， 当我把这个下拉组件放到屏幕中间附近时， 下拉列表显示是正常的。当我把组件整体移到边缘，突然出现下拉列表的 Content 的坐标 不合法，由于 ugui 的点击关闭处理是在 Canvas 的子节点最下方又生成一个 全屏的 遮罩 来保证实现 \"点击关闭\"，所以此时整个界面卡死..........翻遍源码断点我也没找到问题..\n\n\n![我的csdn](http://img.blog.csdn.net/20170808122348361?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvQ2hlbmc2MjQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center)（中间：边缘）![我的csdn](http://img.blog.csdn.net/20170808122416928?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvQ2hlbmc2MjQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center)\n\n![我的csdn](http://img.blog.csdn.net/20170808122431717?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvQ2hlbmc2MjQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center)\n\n另外，他的下拉列表实现， 不适合多个数据，假如有百十个就生成百十个下来的子菜单，这明显是不合理的，所以，把下拉改成 无限循环 列表是必须的。\n于是，开始自己动手造轮子：\n``` csharp\n\nusing System;\nusing System.Collections;\nusing System.Collections.Generic;\nusing Assets.UI;\nusing UnityEngine;\nusing UnityEngine.UI;\n\n/// <summary>\n/// Introduction: GDropDown\n/// Author:     Cheng\n/// Time: \n/// </summary>\n[AddComponentMenu(\"UI/GDropdown\", 100)]\n[RequireComponent(typeof(RectTransform))]\npublic class GDropDown : MonoBehaviour\n{\n\n    [Tooltip(\"Button of Whole Component\")]\n    [SerializeField]\n    private Toggle m_CaptionToggle;\n    /// <summary>\n    /// Button of Whole Component\n    /// </summary>\n    public Toggle CaptionToggle { get { return m_CaptionToggle; } set { SetCaptionButton(value);} }\n\n    [Tooltip(\"Display Text of Selected Item\")]\n    [SerializeField]\n    private Text m_CaptionText;\n    /// <summary>\n    /// Display Text of Selected Item\n    /// </summary>\n    public Text CaptionText { get { return m_CaptionText; } set { m_CaptionText = value; } }\n\n    [Tooltip(\"Display Image of Selected Item\")]\n    [SerializeField]\n    private Image m_CaptionImage;\n    /// <summary>\n    /// Display Image of Selected Item\n    /// </summary>\n    public Image CaptionImage { get { return m_CaptionImage; } set { m_CaptionImage = value; } }\n\n    [Space]\n\n    [Tooltip(\"Drop List\")]\n    [SerializeField]\n    private ScrollRect m_ScrollRect;\n    /// <summary>\n    /// Drop List \n    /// </summary>\n    public ScrollRect ScrollRect { get { return m_ScrollRect; } set { m_ScrollRect = value; } }\n\n    [Tooltip(\"Template of Drop List's Item\")]   \n    [SerializeField]\n    private GameObject m_DropItem;\n    /// <summary>\n    /// Template of Drop List's Item\n    /// </summary>\n    public GameObject DropItem { get { return m_DropItem; } set { SetDropItem(value); } }\n\n    [Tooltip(\"Current Select Index\")]\n    [SerializeField]\n    private int m_Index;\n    /// <summary>\n    /// Current Select Index\n    /// </summary>\n    public int Index { get { return m_Index; } set { SetSelectIndex(value); }}\n    public string Text { get { return m_DropData.Count > Index ? m_DropData[Index].text : \"\"; } }\n\n    /// <summary>\n    /// Drop Down Value Changed\n    /// </summary>\n    public Callback_1<int> OnValueChanged;\n\n    [Tooltip(\"Drop Data\")]\n    [SerializeField]\n    List<GItemData> m_DropData = new List<GItemData>();\n\n    private ScrollList m_ScrollList;\n    private Dictionary<Transform, GItem> m_Items = new Dictionary<Transform, GItem>();\n    private RectTransform m_PointerMask;\n    private Transform m_Canvas;\n    \n\n    void Awake()\n    {\n        m_ScrollList = GetOrAddComponent<ScrollList>(ScrollRect.gameObject);\n        m_ScrollList.onItemRender = OnItemRender;\n        SetSelectIndex(m_Index);\n        SetDropItem(m_DropItem);\n        RefreshShowValue();\n        SetCaptionButton(m_CaptionToggle);\n\n        m_CaptionToggle.isOn = false;\n        CloseMask();\n    }\n\n    public void AddOptions(string[] options)\n    {\n        for (int i = 0; i < options.Length; i++)\n            this.m_DropData.Add(new GItemData(options[i]));\n\n        if (m_CaptionToggle.isOn)\n            OpenMask();\n    }\n\n    public void AddOptions(Sprite[] options)\n    {\n        for (int i = 0; i < options.Length; i++)\n            this.m_DropData.Add(new GItemData(options[i]));\n\n        if (m_CaptionToggle.isOn)\n            OpenMask();\n    }\n\n    public void AddOptions(GItemData[] options)\n    {\n        for (int i = 0; i < options.Length; i++)\n            this.m_DropData.Add(options[i]);\n\n        if (m_CaptionToggle.isOn)\n            OpenMask();\n    }\n\n    public void RemoveAt(int index)\n    {\n        if (this.m_DropData.Count > index)\n        {\n            this.m_DropData.RemoveAt(index);\n            if (index == Index)\n            {\n                SetSelectIndex(index-1);\n            }\n        }\n    }\n\n    public void ClearOptions()\n    {\n        this.m_DropData.Clear();\n        if (m_CaptionToggle.isOn)\n            OpenMask();\n    }\n\n\n    /// <summary>\n    /// Refresh Display View\n    /// </summary>\n    private void RefreshShowValue()\n    {\n        if (m_DropData.Count > Index)\n        {\n            GItemData data = m_DropData[Index];\n            if (CaptionText != null)\n                CaptionText.text = data.text;\n            if (CaptionImage != null)\n                CaptionImage.sprite = data.image;\n        }\n        else\n        {\n            if (CaptionText != null)\n                CaptionText.text = \"\";\n            if (CaptionImage != null)\n                CaptionImage.sprite = null;\n        }\n    }\n\n    /// <summary>\n    /// Render Item in List\n    /// </summary>\n    /// <param name=\"index\"></param>\n    /// <param name=\"child\"></param>\n    private void OnItemRender(int index, Transform child)\n    {\n        GItem item;\n        if (!m_Items.TryGetValue(child, out item))\n            item = new GItem(this, child);\n\n        if (m_DropData.Count > index)\n        {\n            item.Reset(m_DropData[index].text, m_DropData[index].image, index == Index);\n        }\n    }\n\n    /// <summary>\n    /// Set Cur Select Index When Click\n    /// </summary>\n    /// <param name=\"p\"></param>\n    internal void SetSelectIndex(int p)\n    {\n        if (p < m_DropData.Count) //if exist data\n        {\n            m_Index = p;\n            RefreshShowValue();\n            if (OnValueChanged != null)\n            {\n                OnValueChanged(m_Index);\n            }\n        }\n        else\n        {\n            if (m_DropData.Count > 0)//Back To First\n            {\n                m_Index = 0;\n                RefreshShowValue();\n                if (OnValueChanged != null)\n                {\n                    OnValueChanged(m_Index);\n                }\n            }\n        }\n\n        foreach (var value in m_Items.Values)\n        {\n            value.SetActive(false);\n        }\n        m_CaptionToggle.isOn = false;\n    }\n\n    /// <summary>\n    /// Open Mask to Poniters Out of List\n    /// </summary>\n    private void OpenMask()\n    {\n        if (m_PointerMask == null)//Create Mask\n        {\n            GameObject o = new GameObject(\"Pointer Mask\");\n            o.transform.SetParent(transform);\n            Image mask = o.AddComponent<Image>();\n            mask.color = new Color(1, 1, 1, 0);\n            m_PointerMask = o.transform as RectTransform;\n            m_PointerMask.sizeDelta = new Vector2(Screen.width, Screen.height);\n            Button btnMask = o.AddComponent<Button>();\n            btnMask.onClick.AddListener(CloseMask);\n        }\n\n        if (m_Canvas == null)//Find Canvas\n        {\n            Canvas canvas = GameObject.FindObjectOfType<Canvas>();\n            m_Canvas = canvas.transform;\n        }\n\n        m_PointerMask.gameObject.SetActive(true);\n        m_PointerMask.SetParent(m_Canvas);\n        m_PointerMask.localPosition = Vector3.zero;\n\n        if (m_ScrollRect != null)\n        {\n            m_ScrollRect.transform.SetParent(m_Canvas);\n            m_ScrollRect.gameObject.SetActive(true);\n            m_ScrollList.ChildCount = m_DropData.Count;\n        }\n    }\n\n    /// <summary>\n    /// Close Mask to Other Pointers\n    /// </summary>\n    private void CloseMask()\n    {\n        if (m_PointerMask != null)\n        {\n            m_PointerMask.transform.SetParent(transform);\n            m_PointerMask.gameObject.SetActive(false);\n        }\n\n        if (m_ScrollRect != null)\n        {\n            m_ScrollRect.transform.SetParent(transform);\n            m_ScrollRect.gameObject.SetActive(false);\n        }\n    }\n\n    /// <summary>\n    /// Set Drop Item, Set Anchor Left-Top\n    /// </summary>\n    /// <param name=\"item\"></param>\n    private void SetDropItem(GameObject item)\n    {\n        RectTransform rect = item.transform as RectTransform;\n        rect.anchorMin = Vector2.up;\n        rect.anchorMax = Vector2.up;\n        m_DropItem = item;\n        m_ScrollList.Child = item;\n    }\n\n    /// <summary>\n    /// Set Outter Button of Whole Component\n    /// </summary>\n    /// <param name=\"btn\"></param>\n    private void SetCaptionButton(Toggle btn)\n    {\n        if (m_CaptionToggle != null)\n            m_CaptionToggle.onValueChanged.RemoveListener(OnCaptionButtonClicked);\n\n        m_CaptionToggle = btn;\n        if(m_CaptionToggle != null)\n            m_CaptionToggle.onValueChanged.AddListener(OnCaptionButtonClicked);\n    }\n\n    /// <summary>\n    /// On Caption Button Clicked\n    /// </summary>\n    private void OnCaptionButtonClicked(bool active)\n    {\n        if (active)\n            OpenMask();\n        else\n            CloseMask();\n    }\n\n    /// <summary>\n    /// Get Or Add Component on O\n    /// </summary>\n    /// <typeparam name=\"T\"></typeparam>\n    /// <param name=\"o\"></param>\n    /// <returns></returns>\n    T GetOrAddComponent<T>(GameObject o) where T : Component\n    {\n        T com = o.GetComponent<T>();\n        if (com == null)\n            com = o.AddComponent<T>();\n        return com;\n    }\n\n    /// <summary>\n    /// Release All\n    /// </summary>\n    public void OnDestroy()\n    {\n        //If Release on Drop State, Delete Mask\n        if(m_PointerMask != null)\n            m_PointerMask.SetParent(transform);\n    }\n\n    /// <summary>\n    /// Renderer Item in Endless List\n    /// </summary>\n    protected internal class GItem\n    {\n        GDropDown dropDown;\n        Transform item;\n        Button btn;\n\n        Text text;\n        Image image;\n        GameObject selected;\n        bool activeSelf;\n\n        public string m_Text { get { return text.text; } set { text.text = value; } }\n        public Sprite m_Image { get { return image.sprite; } set { image.sprite = value; } }\n\n        public GItem(GDropDown parent, Transform item)\n        {\n            this.dropDown = parent;\n            this.item = item;\n            activeSelf = false;\n\n            Transform t_trans = item.FindChild(\"text\");\n            if (t_trans)\n            {\n                text = t_trans.gameObject.GetComponent<Text>();\n            }\n            Transform t_image = item.FindChild(\"image\");\n            if (t_image)\n            {\n                image = t_image.gameObject.GetComponent<Image>();\n            }\n            Transform t_selected = item.FindChild(\"selected\");\n            if (t_selected)\n            {\n                selected = t_selected.gameObject;\n            }\n\n            btn = item.GetComponent<Button>();\n            if (btn == null)\n            {\n                Transform t_btn = item.FindChild(\"btn\");\n                if (t_btn != null)\n                    btn = dropDown.GetOrAddComponent<Button>(t_btn.gameObject);\n                else\n                    btn = dropDown.GetOrAddComponent<Button>(item.gameObject);\n            }\n\n            btn.onClick.AddListener(OnBtnItemClicked);\n        }\n\n        private void OnBtnItemClicked()\n        {\n            if (!activeSelf)\n            {\n                SetActive(true);\n                dropDown.SetSelectIndex(int.Parse(item.name));\n            }\n        }\n\n        internal void SetActive(bool active)\n        {\n            this.activeSelf = active;\n            if(selected != null)\n                selected.SetActive(active);\n        }\n\n\n        internal void Reset(string txt, Sprite sprite, bool active)\n        {\n            if (text != null)\n                m_Text = txt;\n            if (image != null)\n                m_Image = sprite;\n            SetActive(active);\n        }\n    }\n\n    /// <summary>\n    /// Cache Data\n    /// </summary>\n    [Serializable]\n    public class GItemData\n    {\n        [SerializeField]\n        private string m_Text;\n        [SerializeField]\n        private Sprite m_Image;\n        public string text  { get { return m_Text; }  set { m_Text = value; } }\n        public Sprite image { get { return m_Image; } set { m_Image = value; } }\n        public GItemData(){}\n\n        public GItemData(string text)\n        {\n            this.text = text;\n        }\n\n        public GItemData(Sprite image)\n        {\n            this.image = image;\n        }\n\n        public GItemData(string text, Sprite image)\n        {\n            this.text = text;\n            this.image = image;\n        }\n    }\n\n}\n```\n\n![我的csdn](http://img.blog.csdn.net/20170808122959444?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvQ2hlbmc2MjQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center)\n\n组件的点击由Toggle 来控制 与 系统UGUI的类似，支持 点击选中 图片和文字， 自己添加一个下拉列表。\n\n<font color=\"red\">注意： 下拉子选项中， 命名 “text”的“Text”组件、命名 “image”的“Image”组件为该选项的可填充值，看代码一眼便知。命名“selected”的表示下拉列表打开时该选项选中的表现，与toggle相同，我只是乐意改成了button表示而已</font>\n\nIndex 就是当前选中项,无限列表需要用到我以前文章中的一篇[【UGUI】无限列表 ScrollView List](https://garsonlab.github.io/2017/05/02/%E6%97%A0%E9%99%90%E5%88%97%E8%A1%A8%20ScrollView%20List/)\n\n\n","slug":"踩坑填坑——DropDown","published":1,"updated":"2017-10-26T11:13:03.486Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj9fm90uf001o2cobumru69gj","content":"<p>在使用UGUI的 DropDown 时， Canvas 的 Render Mode 选择了 Screen Space–Camera， 此时遇到一个小bug， 当我把这个下拉组件放到屏幕中间附近时， 下拉列表显示是正常的。当我把组件整体移到边缘，突然出现下拉列表的 Content 的坐标 不合法，由于 ugui 的点击关闭处理是在 Canvas 的子节点最下方又生成一个 全屏的 遮罩 来保证实现 “点击关闭”，所以此时整个界面卡死……….翻遍源码断点我也没找到问题..</p>\n<p><img src=\"http://img.blog.csdn.net/20170808122348361?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvQ2hlbmc2MjQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\" alt=\"我的csdn\">（中间：边缘）<img src=\"http://img.blog.csdn.net/20170808122416928?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvQ2hlbmc2MjQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\" alt=\"我的csdn\"></p>\n<p><img src=\"http://img.blog.csdn.net/20170808122431717?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvQ2hlbmc2MjQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\" alt=\"我的csdn\"></p>\n<p>另外，他的下拉列表实现， 不适合多个数据，假如有百十个就生成百十个下来的子菜单，这明显是不合理的，所以，把下拉改成 无限循环 列表是必须的。<br>于是，开始自己动手造轮子：</p>\n<pre class=\"line-numbers language-csharp\"><code class=\"language-csharp\">\n<span class=\"token keyword\">using</span> System<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> System<span class=\"token punctuation\">.</span>Collections<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> System<span class=\"token punctuation\">.</span>Collections<span class=\"token punctuation\">.</span>Generic<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> Assets<span class=\"token punctuation\">.</span>UI<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> UnityEngine<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> UnityEngine<span class=\"token punctuation\">.</span>UI<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/// &lt;summary></span>\n<span class=\"token comment\" spellcheck=\"true\">/// Introduction: GDropDown</span>\n<span class=\"token comment\" spellcheck=\"true\">/// Author:     Cheng</span>\n<span class=\"token comment\" spellcheck=\"true\">/// Time: </span>\n<span class=\"token comment\" spellcheck=\"true\">/// &lt;/summary></span>\n<span class=\"token punctuation\">[</span><span class=\"token function\">AddComponentMenu</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"UI/GDropdown\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">[</span><span class=\"token function\">RequireComponent</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span>RectTransform<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">GDropDown</span> <span class=\"token punctuation\">:</span> MonoBehaviour\n<span class=\"token punctuation\">{</span>\n\n    <span class=\"token punctuation\">[</span><span class=\"token function\">Tooltip</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Button of Whole Component\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">[</span>SerializeField<span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">private</span> Toggle m_CaptionToggle<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// &lt;summary></span>\n    <span class=\"token comment\" spellcheck=\"true\">/// Button of Whole Component</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// &lt;/summary></span>\n    <span class=\"token keyword\">public</span> Toggle CaptionToggle <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> m_CaptionToggle<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span> <span class=\"token keyword\">set</span> <span class=\"token punctuation\">{</span> <span class=\"token function\">SetCaptionButton</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">value</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span>\n\n    <span class=\"token punctuation\">[</span><span class=\"token function\">Tooltip</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Display Text of Selected Item\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">[</span>SerializeField<span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">private</span> Text m_CaptionText<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// &lt;summary></span>\n    <span class=\"token comment\" spellcheck=\"true\">/// Display Text of Selected Item</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// &lt;/summary></span>\n    <span class=\"token keyword\">public</span> Text CaptionText <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> m_CaptionText<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span> <span class=\"token keyword\">set</span> <span class=\"token punctuation\">{</span> m_CaptionText <span class=\"token operator\">=</span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span>\n\n    <span class=\"token punctuation\">[</span><span class=\"token function\">Tooltip</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Display Image of Selected Item\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">[</span>SerializeField<span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">private</span> Image m_CaptionImage<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// &lt;summary></span>\n    <span class=\"token comment\" spellcheck=\"true\">/// Display Image of Selected Item</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// &lt;/summary></span>\n    <span class=\"token keyword\">public</span> Image CaptionImage <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> m_CaptionImage<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span> <span class=\"token keyword\">set</span> <span class=\"token punctuation\">{</span> m_CaptionImage <span class=\"token operator\">=</span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span>\n\n    <span class=\"token punctuation\">[</span>Space<span class=\"token punctuation\">]</span>\n\n    <span class=\"token punctuation\">[</span><span class=\"token function\">Tooltip</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Drop List\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">[</span>SerializeField<span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">private</span> ScrollRect m_ScrollRect<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// &lt;summary></span>\n    <span class=\"token comment\" spellcheck=\"true\">/// Drop List </span>\n    <span class=\"token comment\" spellcheck=\"true\">/// &lt;/summary></span>\n    <span class=\"token keyword\">public</span> ScrollRect ScrollRect <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> m_ScrollRect<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span> <span class=\"token keyword\">set</span> <span class=\"token punctuation\">{</span> m_ScrollRect <span class=\"token operator\">=</span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span>\n\n    <span class=\"token punctuation\">[</span><span class=\"token function\">Tooltip</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Template of Drop List's Item\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>   \n    <span class=\"token punctuation\">[</span>SerializeField<span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">private</span> GameObject m_DropItem<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// &lt;summary></span>\n    <span class=\"token comment\" spellcheck=\"true\">/// Template of Drop List's Item</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// &lt;/summary></span>\n    <span class=\"token keyword\">public</span> GameObject DropItem <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> m_DropItem<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span> <span class=\"token keyword\">set</span> <span class=\"token punctuation\">{</span> <span class=\"token function\">SetDropItem</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">value</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span>\n\n    <span class=\"token punctuation\">[</span><span class=\"token function\">Tooltip</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Current Select Index\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">[</span>SerializeField<span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> m_Index<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// &lt;summary></span>\n    <span class=\"token comment\" spellcheck=\"true\">/// Current Select Index</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// &lt;/summary></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> Index <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> m_Index<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span> <span class=\"token keyword\">set</span> <span class=\"token punctuation\">{</span> <span class=\"token function\">SetSelectIndex</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">value</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">string</span> Text <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> m_DropData<span class=\"token punctuation\">.</span>Count <span class=\"token operator\">></span> Index <span class=\"token operator\">?</span> m_DropData<span class=\"token punctuation\">[</span>Index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>text <span class=\"token punctuation\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">/// &lt;summary></span>\n    <span class=\"token comment\" spellcheck=\"true\">/// Drop Down Value Changed</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// &lt;/summary></span>\n    <span class=\"token keyword\">public</span> Callback_1<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> OnValueChanged<span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">[</span><span class=\"token function\">Tooltip</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Drop Data\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">[</span>SerializeField<span class=\"token punctuation\">]</span>\n    List<span class=\"token operator\">&lt;</span>GItemData<span class=\"token operator\">></span> m_DropData <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">List</span><span class=\"token operator\">&lt;</span>GItemData<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> ScrollList m_ScrollList<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> Dictionary<span class=\"token operator\">&lt;</span>Transform<span class=\"token punctuation\">,</span> GItem<span class=\"token operator\">></span> m_Items <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Dictionary</span><span class=\"token operator\">&lt;</span>Transform<span class=\"token punctuation\">,</span> GItem<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> RectTransform m_PointerMask<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> Transform m_Canvas<span class=\"token punctuation\">;</span>\n\n\n    <span class=\"token keyword\">void</span> <span class=\"token function\">Awake</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        m_ScrollList <span class=\"token operator\">=</span> <span class=\"token generic-method function\">GetOrAddComponent<span class=\"token punctuation\">&lt;</span>ScrollList<span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>ScrollRect<span class=\"token punctuation\">.</span>gameObject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        m_ScrollList<span class=\"token punctuation\">.</span>onItemRender <span class=\"token operator\">=</span> OnItemRender<span class=\"token punctuation\">;</span>\n        <span class=\"token function\">SetSelectIndex</span><span class=\"token punctuation\">(</span>m_Index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">SetDropItem</span><span class=\"token punctuation\">(</span>m_DropItem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">RefreshShowValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">SetCaptionButton</span><span class=\"token punctuation\">(</span>m_CaptionToggle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        m_CaptionToggle<span class=\"token punctuation\">.</span>isOn <span class=\"token operator\">=</span> <span class=\"token keyword\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">CloseMask</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">AddOptions</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> options<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> options<span class=\"token punctuation\">.</span>Length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>m_DropData<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">GItemData</span><span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>m_CaptionToggle<span class=\"token punctuation\">.</span>isOn<span class=\"token punctuation\">)</span>\n            <span class=\"token function\">OpenMask</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">AddOptions</span><span class=\"token punctuation\">(</span>Sprite<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> options<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> options<span class=\"token punctuation\">.</span>Length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>m_DropData<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">GItemData</span><span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>m_CaptionToggle<span class=\"token punctuation\">.</span>isOn<span class=\"token punctuation\">)</span>\n            <span class=\"token function\">OpenMask</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">AddOptions</span><span class=\"token punctuation\">(</span>GItemData<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> options<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> options<span class=\"token punctuation\">.</span>Length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>m_DropData<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>m_CaptionToggle<span class=\"token punctuation\">.</span>isOn<span class=\"token punctuation\">)</span>\n            <span class=\"token function\">OpenMask</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">RemoveAt</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> index<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>m_DropData<span class=\"token punctuation\">.</span>Count <span class=\"token operator\">></span> index<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>m_DropData<span class=\"token punctuation\">.</span><span class=\"token function\">RemoveAt</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">==</span> Index<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token function\">SetSelectIndex</span><span class=\"token punctuation\">(</span>index<span class=\"token number\">-1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">ClearOptions</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>m_DropData<span class=\"token punctuation\">.</span><span class=\"token function\">Clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>m_CaptionToggle<span class=\"token punctuation\">.</span>isOn<span class=\"token punctuation\">)</span>\n            <span class=\"token function\">OpenMask</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n\n    <span class=\"token comment\" spellcheck=\"true\">/// &lt;summary></span>\n    <span class=\"token comment\" spellcheck=\"true\">/// Refresh Display View</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// &lt;/summary></span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">RefreshShowValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>m_DropData<span class=\"token punctuation\">.</span>Count <span class=\"token operator\">></span> Index<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            GItemData data <span class=\"token operator\">=</span> m_DropData<span class=\"token punctuation\">[</span>Index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>CaptionText <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n                CaptionText<span class=\"token punctuation\">.</span>text <span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>CaptionImage <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n                CaptionImage<span class=\"token punctuation\">.</span>sprite <span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span>image<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">else</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>CaptionText <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n                CaptionText<span class=\"token punctuation\">.</span>text <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>CaptionImage <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n                CaptionImage<span class=\"token punctuation\">.</span>sprite <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">/// &lt;summary></span>\n    <span class=\"token comment\" spellcheck=\"true\">/// Render Item in List</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// &lt;/summary></span>\n    <span class=\"token comment\" spellcheck=\"true\">/// &lt;param name=\"index\">&lt;/param></span>\n    <span class=\"token comment\" spellcheck=\"true\">/// &lt;param name=\"child\">&lt;/param></span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">OnItemRender</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> index<span class=\"token punctuation\">,</span> Transform child<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        GItem item<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>m_Items<span class=\"token punctuation\">.</span><span class=\"token function\">TryGetValue</span><span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">,</span> <span class=\"token keyword\">out</span> item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            item <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">GItem</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> child<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>m_DropData<span class=\"token punctuation\">.</span>Count <span class=\"token operator\">></span> index<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            item<span class=\"token punctuation\">.</span><span class=\"token function\">Reset</span><span class=\"token punctuation\">(</span>m_DropData<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">,</span> m_DropData<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>image<span class=\"token punctuation\">,</span> index <span class=\"token operator\">==</span> Index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">/// &lt;summary></span>\n    <span class=\"token comment\" spellcheck=\"true\">/// Set Cur Select Index When Click</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// &lt;/summary></span>\n    <span class=\"token comment\" spellcheck=\"true\">/// &lt;param name=\"p\">&lt;/param></span>\n    <span class=\"token keyword\">internal</span> <span class=\"token keyword\">void</span> <span class=\"token function\">SetSelectIndex</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> p<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>p <span class=\"token operator\">&lt;</span> m_DropData<span class=\"token punctuation\">.</span>Count<span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\">//if exist data</span>\n        <span class=\"token punctuation\">{</span>\n            m_Index <span class=\"token operator\">=</span> p<span class=\"token punctuation\">;</span>\n            <span class=\"token function\">RefreshShowValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>OnValueChanged <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token function\">OnValueChanged</span><span class=\"token punctuation\">(</span>m_Index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">else</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>m_DropData<span class=\"token punctuation\">.</span>Count <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token comment\" spellcheck=\"true\">//Back To First</span>\n            <span class=\"token punctuation\">{</span>\n                m_Index <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n                <span class=\"token function\">RefreshShowValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>OnValueChanged <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">{</span>\n                    <span class=\"token function\">OnValueChanged</span><span class=\"token punctuation\">(</span>m_Index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> <span class=\"token keyword\">value</span> <span class=\"token keyword\">in</span> m_Items<span class=\"token punctuation\">.</span>Values<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">value</span><span class=\"token punctuation\">.</span><span class=\"token function\">SetActive</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        m_CaptionToggle<span class=\"token punctuation\">.</span>isOn <span class=\"token operator\">=</span> <span class=\"token keyword\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">/// &lt;summary></span>\n    <span class=\"token comment\" spellcheck=\"true\">/// Open Mask to Poniters Out of List</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// &lt;/summary></span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">OpenMask</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>m_PointerMask <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token comment\" spellcheck=\"true\">//Create Mask</span>\n        <span class=\"token punctuation\">{</span>\n            GameObject o <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">GameObject</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Pointer Mask\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            o<span class=\"token punctuation\">.</span>transform<span class=\"token punctuation\">.</span><span class=\"token function\">SetParent</span><span class=\"token punctuation\">(</span>transform<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            Image mask <span class=\"token operator\">=</span> o<span class=\"token punctuation\">.</span><span class=\"token generic-method function\">AddComponent<span class=\"token punctuation\">&lt;</span>Image<span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            mask<span class=\"token punctuation\">.</span>color <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Color</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            m_PointerMask <span class=\"token operator\">=</span> o<span class=\"token punctuation\">.</span>transform <span class=\"token keyword\">as</span> RectTransform<span class=\"token punctuation\">;</span>\n            m_PointerMask<span class=\"token punctuation\">.</span>sizeDelta <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Vector2</span><span class=\"token punctuation\">(</span>Screen<span class=\"token punctuation\">.</span>width<span class=\"token punctuation\">,</span> Screen<span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            Button btnMask <span class=\"token operator\">=</span> o<span class=\"token punctuation\">.</span><span class=\"token generic-method function\">AddComponent<span class=\"token punctuation\">&lt;</span>Button<span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            btnMask<span class=\"token punctuation\">.</span>onClick<span class=\"token punctuation\">.</span><span class=\"token function\">AddListener</span><span class=\"token punctuation\">(</span>CloseMask<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>m_Canvas <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token comment\" spellcheck=\"true\">//Find Canvas</span>\n        <span class=\"token punctuation\">{</span>\n            Canvas canvas <span class=\"token operator\">=</span> GameObject<span class=\"token punctuation\">.</span><span class=\"token generic-method function\">FindObjectOfType<span class=\"token punctuation\">&lt;</span>Canvas<span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            m_Canvas <span class=\"token operator\">=</span> canvas<span class=\"token punctuation\">.</span>transform<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        m_PointerMask<span class=\"token punctuation\">.</span>gameObject<span class=\"token punctuation\">.</span><span class=\"token function\">SetActive</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        m_PointerMask<span class=\"token punctuation\">.</span><span class=\"token function\">SetParent</span><span class=\"token punctuation\">(</span>m_Canvas<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        m_PointerMask<span class=\"token punctuation\">.</span>localPosition <span class=\"token operator\">=</span> Vector3<span class=\"token punctuation\">.</span>zero<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>m_ScrollRect <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            m_ScrollRect<span class=\"token punctuation\">.</span>transform<span class=\"token punctuation\">.</span><span class=\"token function\">SetParent</span><span class=\"token punctuation\">(</span>m_Canvas<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            m_ScrollRect<span class=\"token punctuation\">.</span>gameObject<span class=\"token punctuation\">.</span><span class=\"token function\">SetActive</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            m_ScrollList<span class=\"token punctuation\">.</span>ChildCount <span class=\"token operator\">=</span> m_DropData<span class=\"token punctuation\">.</span>Count<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">/// &lt;summary></span>\n    <span class=\"token comment\" spellcheck=\"true\">/// Close Mask to Other Pointers</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// &lt;/summary></span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">CloseMask</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>m_PointerMask <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            m_PointerMask<span class=\"token punctuation\">.</span>transform<span class=\"token punctuation\">.</span><span class=\"token function\">SetParent</span><span class=\"token punctuation\">(</span>transform<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            m_PointerMask<span class=\"token punctuation\">.</span>gameObject<span class=\"token punctuation\">.</span><span class=\"token function\">SetActive</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>m_ScrollRect <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            m_ScrollRect<span class=\"token punctuation\">.</span>transform<span class=\"token punctuation\">.</span><span class=\"token function\">SetParent</span><span class=\"token punctuation\">(</span>transform<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            m_ScrollRect<span class=\"token punctuation\">.</span>gameObject<span class=\"token punctuation\">.</span><span class=\"token function\">SetActive</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">/// &lt;summary></span>\n    <span class=\"token comment\" spellcheck=\"true\">/// Set Drop Item, Set Anchor Left-Top</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// &lt;/summary></span>\n    <span class=\"token comment\" spellcheck=\"true\">/// &lt;param name=\"item\">&lt;/param></span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">SetDropItem</span><span class=\"token punctuation\">(</span>GameObject item<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        RectTransform rect <span class=\"token operator\">=</span> item<span class=\"token punctuation\">.</span>transform <span class=\"token keyword\">as</span> RectTransform<span class=\"token punctuation\">;</span>\n        rect<span class=\"token punctuation\">.</span>anchorMin <span class=\"token operator\">=</span> Vector2<span class=\"token punctuation\">.</span>up<span class=\"token punctuation\">;</span>\n        rect<span class=\"token punctuation\">.</span>anchorMax <span class=\"token operator\">=</span> Vector2<span class=\"token punctuation\">.</span>up<span class=\"token punctuation\">;</span>\n        m_DropItem <span class=\"token operator\">=</span> item<span class=\"token punctuation\">;</span>\n        m_ScrollList<span class=\"token punctuation\">.</span>Child <span class=\"token operator\">=</span> item<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">/// &lt;summary></span>\n    <span class=\"token comment\" spellcheck=\"true\">/// Set Outter Button of Whole Component</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// &lt;/summary></span>\n    <span class=\"token comment\" spellcheck=\"true\">/// &lt;param name=\"btn\">&lt;/param></span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">SetCaptionButton</span><span class=\"token punctuation\">(</span>Toggle btn<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>m_CaptionToggle <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n            m_CaptionToggle<span class=\"token punctuation\">.</span>onValueChanged<span class=\"token punctuation\">.</span><span class=\"token function\">RemoveListener</span><span class=\"token punctuation\">(</span>OnCaptionButtonClicked<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        m_CaptionToggle <span class=\"token operator\">=</span> btn<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>m_CaptionToggle <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n            m_CaptionToggle<span class=\"token punctuation\">.</span>onValueChanged<span class=\"token punctuation\">.</span><span class=\"token function\">AddListener</span><span class=\"token punctuation\">(</span>OnCaptionButtonClicked<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">/// &lt;summary></span>\n    <span class=\"token comment\" spellcheck=\"true\">/// On Caption Button Clicked</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// &lt;/summary></span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">OnCaptionButtonClicked</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">bool</span> active<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>active<span class=\"token punctuation\">)</span>\n            <span class=\"token function\">OpenMask</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">else</span>\n            <span class=\"token function\">CloseMask</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">/// &lt;summary></span>\n    <span class=\"token comment\" spellcheck=\"true\">/// Get Or Add Component on O</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// &lt;/summary></span>\n    <span class=\"token comment\" spellcheck=\"true\">/// &lt;typeparam name=\"T\">&lt;/typeparam></span>\n    <span class=\"token comment\" spellcheck=\"true\">/// &lt;param name=\"o\">&lt;/param></span>\n    <span class=\"token comment\" spellcheck=\"true\">/// &lt;returns>&lt;/returns></span>\n    T <span class=\"token generic-method function\">GetOrAddComponent<span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>GameObject o<span class=\"token punctuation\">)</span> <span class=\"token keyword\">where</span> T <span class=\"token punctuation\">:</span> Component\n    <span class=\"token punctuation\">{</span>\n        T com <span class=\"token operator\">=</span> o<span class=\"token punctuation\">.</span><span class=\"token generic-method function\">GetComponent<span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>com <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n            com <span class=\"token operator\">=</span> o<span class=\"token punctuation\">.</span><span class=\"token generic-method function\">AddComponent<span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> com<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">/// &lt;summary></span>\n    <span class=\"token comment\" spellcheck=\"true\">/// Release All</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// &lt;/summary></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">OnDestroy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\" spellcheck=\"true\">//If Release on Drop State, Delete Mask</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>m_PointerMask <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n            m_PointerMask<span class=\"token punctuation\">.</span><span class=\"token function\">SetParent</span><span class=\"token punctuation\">(</span>transform<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">/// &lt;summary></span>\n    <span class=\"token comment\" spellcheck=\"true\">/// Renderer Item in Endless List</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// &lt;/summary></span>\n    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">internal</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">GItem</span>\n    <span class=\"token punctuation\">{</span>\n        GDropDown dropDown<span class=\"token punctuation\">;</span>\n        Transform item<span class=\"token punctuation\">;</span>\n        Button btn<span class=\"token punctuation\">;</span>\n\n        Text text<span class=\"token punctuation\">;</span>\n        Image image<span class=\"token punctuation\">;</span>\n        GameObject selected<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">bool</span> activeSelf<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">string</span> m_Text <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> text<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span> <span class=\"token keyword\">set</span> <span class=\"token punctuation\">{</span> text<span class=\"token punctuation\">.</span>text <span class=\"token operator\">=</span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">public</span> Sprite m_Image <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> image<span class=\"token punctuation\">.</span>sprite<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span> <span class=\"token keyword\">set</span> <span class=\"token punctuation\">{</span> image<span class=\"token punctuation\">.</span>sprite <span class=\"token operator\">=</span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">public</span> <span class=\"token function\">GItem</span><span class=\"token punctuation\">(</span>GDropDown parent<span class=\"token punctuation\">,</span> Transform item<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>dropDown <span class=\"token operator\">=</span> parent<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>item <span class=\"token operator\">=</span> item<span class=\"token punctuation\">;</span>\n            activeSelf <span class=\"token operator\">=</span> <span class=\"token keyword\">false</span><span class=\"token punctuation\">;</span>\n\n            Transform t_trans <span class=\"token operator\">=</span> item<span class=\"token punctuation\">.</span><span class=\"token function\">FindChild</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"text\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>t_trans<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                text <span class=\"token operator\">=</span> t_trans<span class=\"token punctuation\">.</span>gameObject<span class=\"token punctuation\">.</span><span class=\"token generic-method function\">GetComponent<span class=\"token punctuation\">&lt;</span>Text<span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            Transform t_image <span class=\"token operator\">=</span> item<span class=\"token punctuation\">.</span><span class=\"token function\">FindChild</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"image\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>t_image<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                image <span class=\"token operator\">=</span> t_image<span class=\"token punctuation\">.</span>gameObject<span class=\"token punctuation\">.</span><span class=\"token generic-method function\">GetComponent<span class=\"token punctuation\">&lt;</span>Image<span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            Transform t_selected <span class=\"token operator\">=</span> item<span class=\"token punctuation\">.</span><span class=\"token function\">FindChild</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"selected\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>t_selected<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                selected <span class=\"token operator\">=</span> t_selected<span class=\"token punctuation\">.</span>gameObject<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            btn <span class=\"token operator\">=</span> item<span class=\"token punctuation\">.</span><span class=\"token generic-method function\">GetComponent<span class=\"token punctuation\">&lt;</span>Button<span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>btn <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                Transform t_btn <span class=\"token operator\">=</span> item<span class=\"token punctuation\">.</span><span class=\"token function\">FindChild</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"btn\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>t_btn <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n                    btn <span class=\"token operator\">=</span> dropDown<span class=\"token punctuation\">.</span><span class=\"token generic-method function\">GetOrAddComponent<span class=\"token punctuation\">&lt;</span>Button<span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>t_btn<span class=\"token punctuation\">.</span>gameObject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">else</span>\n                    btn <span class=\"token operator\">=</span> dropDown<span class=\"token punctuation\">.</span><span class=\"token generic-method function\">GetOrAddComponent<span class=\"token punctuation\">&lt;</span>Button<span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">.</span>gameObject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            btn<span class=\"token punctuation\">.</span>onClick<span class=\"token punctuation\">.</span><span class=\"token function\">AddListener</span><span class=\"token punctuation\">(</span>OnBtnItemClicked<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">OnBtnItemClicked</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>activeSelf<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token function\">SetActive</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                dropDown<span class=\"token punctuation\">.</span><span class=\"token function\">SetSelectIndex</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">.</span><span class=\"token function\">Parse</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">internal</span> <span class=\"token keyword\">void</span> <span class=\"token function\">SetActive</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">bool</span> active<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>activeSelf <span class=\"token operator\">=</span> active<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>selected <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n                selected<span class=\"token punctuation\">.</span><span class=\"token function\">SetActive</span><span class=\"token punctuation\">(</span>active<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n\n        <span class=\"token keyword\">internal</span> <span class=\"token keyword\">void</span> <span class=\"token function\">Reset</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">string</span> txt<span class=\"token punctuation\">,</span> Sprite sprite<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> active<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>text <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n                m_Text <span class=\"token operator\">=</span> txt<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>image <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n                m_Image <span class=\"token operator\">=</span> sprite<span class=\"token punctuation\">;</span>\n            <span class=\"token function\">SetActive</span><span class=\"token punctuation\">(</span>active<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">/// &lt;summary></span>\n    <span class=\"token comment\" spellcheck=\"true\">/// Cache Data</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// &lt;/summary></span>\n    <span class=\"token punctuation\">[</span>Serializable<span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">GItemData</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token punctuation\">[</span>SerializeField<span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">string</span> m_Text<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">[</span>SerializeField<span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">private</span> Sprite m_Image<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">string</span> text  <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> m_Text<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>  <span class=\"token keyword\">set</span> <span class=\"token punctuation\">{</span> m_Text <span class=\"token operator\">=</span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">public</span> Sprite image <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> m_Image<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span> <span class=\"token keyword\">set</span> <span class=\"token punctuation\">{</span> m_Image <span class=\"token operator\">=</span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">public</span> <span class=\"token function\">GItemData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">public</span> <span class=\"token function\">GItemData</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">string</span> text<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>text <span class=\"token operator\">=</span> text<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">public</span> <span class=\"token function\">GItemData</span><span class=\"token punctuation\">(</span>Sprite image<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>image <span class=\"token operator\">=</span> image<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">public</span> <span class=\"token function\">GItemData</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">string</span> text<span class=\"token punctuation\">,</span> Sprite image<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>text <span class=\"token operator\">=</span> text<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>image <span class=\"token operator\">=</span> image<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"http://img.blog.csdn.net/20170808122959444?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvQ2hlbmc2MjQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\" alt=\"我的csdn\"></p>\n<p>组件的点击由Toggle 来控制 与 系统UGUI的类似，支持 点击选中 图片和文字， 自己添加一个下拉列表。</p>\n<font color=\"red\">注意： 下拉子选项中， 命名 “text”的“Text”组件、命名 “image”的“Image”组件为该选项的可填充值，看代码一眼便知。命名“selected”的表示下拉列表打开时该选项选中的表现，与toggle相同，我只是乐意改成了button表示而已</font>\n\n<p>Index 就是当前选中项,无限列表需要用到我以前文章中的一篇<a href=\"https://garsonlab.github.io/2017/05/02/%E6%97%A0%E9%99%90%E5%88%97%E8%A1%A8%20ScrollView%20List/\" target=\"_blank\" rel=\"external\">【UGUI】无限列表 ScrollView List</a></p>\n","site":{"data":{"gallery":{"美女":{"full_link":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1508912200438&di=d5b3eacf86d8f94c149c6fc68fe4da67&imgtype=0&src=http%3A%2F%2Fpic01.taopic.com%2F151014%2F234732-15101410452229-lp.jpg","thumb_link":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1508912200438&di=d5b3eacf86d8f94c149c6fc68fe4da67&imgtype=0&src=http%3A%2F%2Fpic01.taopic.com%2F151014%2F234732-15101410452229-lp.jpg","descr":"美女插画"}},"links":{"Github":{"link":"https://github.com/garsonlab","avatar":"https://avatars3.githubusercontent.com/u/13958934?s=460&v=4","descr":"My Github","type":"Blog"},"OnLineTools":{"link":"http://tool.lu/","avatar":"http://qn11.tool.lu/201710/15/103320SbM84Ql4tETjg49a_28x28.png","descr":"在线工具","type":"Tools"},"CMDMarkdown":{"link":"https://www.zybuluo.com/","avatar":"https://www.zybuluo.com/static/img/logo.png","descr":"Markdown在线编辑","type":"Tools"},"Hexo文档":{"link":"https://hexo.io/zh-cn/docs/","avatar":"https://hexo.io/logo.svg","descr":"Hexo中文官方文档","type":"Community"},"游戏蛮牛":{"link":"http://www.manew.com/forum.php","avatar":"http://www.manew.com/template/manew2016/images/logo.png","descr":"unity交流社区","type":"Unity"},"FairyGUI":{"link":"http://www.fairygui.com/","avatar":"http://www.fairygui.com/images/20170728151207.png","descr":"FairyGUI官方网站","type":"Site"}},"linktypes":{"Blog":{"name":"关注的博客"},"Unity":{"name":"Unity3D"},"Community":{"name":"浏览的社区"},"Tools":{"name":"工具"},"Site":{"name":"收藏的网址"}}}},"excerpt":"","more":"<p>在使用UGUI的 DropDown 时， Canvas 的 Render Mode 选择了 Screen Space–Camera， 此时遇到一个小bug， 当我把这个下拉组件放到屏幕中间附近时， 下拉列表显示是正常的。当我把组件整体移到边缘，突然出现下拉列表的 Content 的坐标 不合法，由于 ugui 的点击关闭处理是在 Canvas 的子节点最下方又生成一个 全屏的 遮罩 来保证实现 “点击关闭”，所以此时整个界面卡死……….翻遍源码断点我也没找到问题..</p>\n<p><img src=\"http://img.blog.csdn.net/20170808122348361?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvQ2hlbmc2MjQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\" alt=\"我的csdn\">（中间：边缘）<img src=\"http://img.blog.csdn.net/20170808122416928?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvQ2hlbmc2MjQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\" alt=\"我的csdn\"></p>\n<p><img src=\"http://img.blog.csdn.net/20170808122431717?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvQ2hlbmc2MjQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\" alt=\"我的csdn\"></p>\n<p>另外，他的下拉列表实现， 不适合多个数据，假如有百十个就生成百十个下来的子菜单，这明显是不合理的，所以，把下拉改成 无限循环 列表是必须的。<br>于是，开始自己动手造轮子：</p>\n<pre><code class=\"csharp\">\nusing System;\nusing System.Collections;\nusing System.Collections.Generic;\nusing Assets.UI;\nusing UnityEngine;\nusing UnityEngine.UI;\n\n/// &lt;summary&gt;\n/// Introduction: GDropDown\n/// Author:     Cheng\n/// Time: \n/// &lt;/summary&gt;\n[AddComponentMenu(&quot;UI/GDropdown&quot;, 100)]\n[RequireComponent(typeof(RectTransform))]\npublic class GDropDown : MonoBehaviour\n{\n\n    [Tooltip(&quot;Button of Whole Component&quot;)]\n    [SerializeField]\n    private Toggle m_CaptionToggle;\n    /// &lt;summary&gt;\n    /// Button of Whole Component\n    /// &lt;/summary&gt;\n    public Toggle CaptionToggle { get { return m_CaptionToggle; } set { SetCaptionButton(value);} }\n\n    [Tooltip(&quot;Display Text of Selected Item&quot;)]\n    [SerializeField]\n    private Text m_CaptionText;\n    /// &lt;summary&gt;\n    /// Display Text of Selected Item\n    /// &lt;/summary&gt;\n    public Text CaptionText { get { return m_CaptionText; } set { m_CaptionText = value; } }\n\n    [Tooltip(&quot;Display Image of Selected Item&quot;)]\n    [SerializeField]\n    private Image m_CaptionImage;\n    /// &lt;summary&gt;\n    /// Display Image of Selected Item\n    /// &lt;/summary&gt;\n    public Image CaptionImage { get { return m_CaptionImage; } set { m_CaptionImage = value; } }\n\n    [Space]\n\n    [Tooltip(&quot;Drop List&quot;)]\n    [SerializeField]\n    private ScrollRect m_ScrollRect;\n    /// &lt;summary&gt;\n    /// Drop List \n    /// &lt;/summary&gt;\n    public ScrollRect ScrollRect { get { return m_ScrollRect; } set { m_ScrollRect = value; } }\n\n    [Tooltip(&quot;Template of Drop List&#39;s Item&quot;)]   \n    [SerializeField]\n    private GameObject m_DropItem;\n    /// &lt;summary&gt;\n    /// Template of Drop List&#39;s Item\n    /// &lt;/summary&gt;\n    public GameObject DropItem { get { return m_DropItem; } set { SetDropItem(value); } }\n\n    [Tooltip(&quot;Current Select Index&quot;)]\n    [SerializeField]\n    private int m_Index;\n    /// &lt;summary&gt;\n    /// Current Select Index\n    /// &lt;/summary&gt;\n    public int Index { get { return m_Index; } set { SetSelectIndex(value); }}\n    public string Text { get { return m_DropData.Count &gt; Index ? m_DropData[Index].text : &quot;&quot;; } }\n\n    /// &lt;summary&gt;\n    /// Drop Down Value Changed\n    /// &lt;/summary&gt;\n    public Callback_1&lt;int&gt; OnValueChanged;\n\n    [Tooltip(&quot;Drop Data&quot;)]\n    [SerializeField]\n    List&lt;GItemData&gt; m_DropData = new List&lt;GItemData&gt;();\n\n    private ScrollList m_ScrollList;\n    private Dictionary&lt;Transform, GItem&gt; m_Items = new Dictionary&lt;Transform, GItem&gt;();\n    private RectTransform m_PointerMask;\n    private Transform m_Canvas;\n\n\n    void Awake()\n    {\n        m_ScrollList = GetOrAddComponent&lt;ScrollList&gt;(ScrollRect.gameObject);\n        m_ScrollList.onItemRender = OnItemRender;\n        SetSelectIndex(m_Index);\n        SetDropItem(m_DropItem);\n        RefreshShowValue();\n        SetCaptionButton(m_CaptionToggle);\n\n        m_CaptionToggle.isOn = false;\n        CloseMask();\n    }\n\n    public void AddOptions(string[] options)\n    {\n        for (int i = 0; i &lt; options.Length; i++)\n            this.m_DropData.Add(new GItemData(options[i]));\n\n        if (m_CaptionToggle.isOn)\n            OpenMask();\n    }\n\n    public void AddOptions(Sprite[] options)\n    {\n        for (int i = 0; i &lt; options.Length; i++)\n            this.m_DropData.Add(new GItemData(options[i]));\n\n        if (m_CaptionToggle.isOn)\n            OpenMask();\n    }\n\n    public void AddOptions(GItemData[] options)\n    {\n        for (int i = 0; i &lt; options.Length; i++)\n            this.m_DropData.Add(options[i]);\n\n        if (m_CaptionToggle.isOn)\n            OpenMask();\n    }\n\n    public void RemoveAt(int index)\n    {\n        if (this.m_DropData.Count &gt; index)\n        {\n            this.m_DropData.RemoveAt(index);\n            if (index == Index)\n            {\n                SetSelectIndex(index-1);\n            }\n        }\n    }\n\n    public void ClearOptions()\n    {\n        this.m_DropData.Clear();\n        if (m_CaptionToggle.isOn)\n            OpenMask();\n    }\n\n\n    /// &lt;summary&gt;\n    /// Refresh Display View\n    /// &lt;/summary&gt;\n    private void RefreshShowValue()\n    {\n        if (m_DropData.Count &gt; Index)\n        {\n            GItemData data = m_DropData[Index];\n            if (CaptionText != null)\n                CaptionText.text = data.text;\n            if (CaptionImage != null)\n                CaptionImage.sprite = data.image;\n        }\n        else\n        {\n            if (CaptionText != null)\n                CaptionText.text = &quot;&quot;;\n            if (CaptionImage != null)\n                CaptionImage.sprite = null;\n        }\n    }\n\n    /// &lt;summary&gt;\n    /// Render Item in List\n    /// &lt;/summary&gt;\n    /// &lt;param name=&quot;index&quot;&gt;&lt;/param&gt;\n    /// &lt;param name=&quot;child&quot;&gt;&lt;/param&gt;\n    private void OnItemRender(int index, Transform child)\n    {\n        GItem item;\n        if (!m_Items.TryGetValue(child, out item))\n            item = new GItem(this, child);\n\n        if (m_DropData.Count &gt; index)\n        {\n            item.Reset(m_DropData[index].text, m_DropData[index].image, index == Index);\n        }\n    }\n\n    /// &lt;summary&gt;\n    /// Set Cur Select Index When Click\n    /// &lt;/summary&gt;\n    /// &lt;param name=&quot;p&quot;&gt;&lt;/param&gt;\n    internal void SetSelectIndex(int p)\n    {\n        if (p &lt; m_DropData.Count) //if exist data\n        {\n            m_Index = p;\n            RefreshShowValue();\n            if (OnValueChanged != null)\n            {\n                OnValueChanged(m_Index);\n            }\n        }\n        else\n        {\n            if (m_DropData.Count &gt; 0)//Back To First\n            {\n                m_Index = 0;\n                RefreshShowValue();\n                if (OnValueChanged != null)\n                {\n                    OnValueChanged(m_Index);\n                }\n            }\n        }\n\n        foreach (var value in m_Items.Values)\n        {\n            value.SetActive(false);\n        }\n        m_CaptionToggle.isOn = false;\n    }\n\n    /// &lt;summary&gt;\n    /// Open Mask to Poniters Out of List\n    /// &lt;/summary&gt;\n    private void OpenMask()\n    {\n        if (m_PointerMask == null)//Create Mask\n        {\n            GameObject o = new GameObject(&quot;Pointer Mask&quot;);\n            o.transform.SetParent(transform);\n            Image mask = o.AddComponent&lt;Image&gt;();\n            mask.color = new Color(1, 1, 1, 0);\n            m_PointerMask = o.transform as RectTransform;\n            m_PointerMask.sizeDelta = new Vector2(Screen.width, Screen.height);\n            Button btnMask = o.AddComponent&lt;Button&gt;();\n            btnMask.onClick.AddListener(CloseMask);\n        }\n\n        if (m_Canvas == null)//Find Canvas\n        {\n            Canvas canvas = GameObject.FindObjectOfType&lt;Canvas&gt;();\n            m_Canvas = canvas.transform;\n        }\n\n        m_PointerMask.gameObject.SetActive(true);\n        m_PointerMask.SetParent(m_Canvas);\n        m_PointerMask.localPosition = Vector3.zero;\n\n        if (m_ScrollRect != null)\n        {\n            m_ScrollRect.transform.SetParent(m_Canvas);\n            m_ScrollRect.gameObject.SetActive(true);\n            m_ScrollList.ChildCount = m_DropData.Count;\n        }\n    }\n\n    /// &lt;summary&gt;\n    /// Close Mask to Other Pointers\n    /// &lt;/summary&gt;\n    private void CloseMask()\n    {\n        if (m_PointerMask != null)\n        {\n            m_PointerMask.transform.SetParent(transform);\n            m_PointerMask.gameObject.SetActive(false);\n        }\n\n        if (m_ScrollRect != null)\n        {\n            m_ScrollRect.transform.SetParent(transform);\n            m_ScrollRect.gameObject.SetActive(false);\n        }\n    }\n\n    /// &lt;summary&gt;\n    /// Set Drop Item, Set Anchor Left-Top\n    /// &lt;/summary&gt;\n    /// &lt;param name=&quot;item&quot;&gt;&lt;/param&gt;\n    private void SetDropItem(GameObject item)\n    {\n        RectTransform rect = item.transform as RectTransform;\n        rect.anchorMin = Vector2.up;\n        rect.anchorMax = Vector2.up;\n        m_DropItem = item;\n        m_ScrollList.Child = item;\n    }\n\n    /// &lt;summary&gt;\n    /// Set Outter Button of Whole Component\n    /// &lt;/summary&gt;\n    /// &lt;param name=&quot;btn&quot;&gt;&lt;/param&gt;\n    private void SetCaptionButton(Toggle btn)\n    {\n        if (m_CaptionToggle != null)\n            m_CaptionToggle.onValueChanged.RemoveListener(OnCaptionButtonClicked);\n\n        m_CaptionToggle = btn;\n        if(m_CaptionToggle != null)\n            m_CaptionToggle.onValueChanged.AddListener(OnCaptionButtonClicked);\n    }\n\n    /// &lt;summary&gt;\n    /// On Caption Button Clicked\n    /// &lt;/summary&gt;\n    private void OnCaptionButtonClicked(bool active)\n    {\n        if (active)\n            OpenMask();\n        else\n            CloseMask();\n    }\n\n    /// &lt;summary&gt;\n    /// Get Or Add Component on O\n    /// &lt;/summary&gt;\n    /// &lt;typeparam name=&quot;T&quot;&gt;&lt;/typeparam&gt;\n    /// &lt;param name=&quot;o&quot;&gt;&lt;/param&gt;\n    /// &lt;returns&gt;&lt;/returns&gt;\n    T GetOrAddComponent&lt;T&gt;(GameObject o) where T : Component\n    {\n        T com = o.GetComponent&lt;T&gt;();\n        if (com == null)\n            com = o.AddComponent&lt;T&gt;();\n        return com;\n    }\n\n    /// &lt;summary&gt;\n    /// Release All\n    /// &lt;/summary&gt;\n    public void OnDestroy()\n    {\n        //If Release on Drop State, Delete Mask\n        if(m_PointerMask != null)\n            m_PointerMask.SetParent(transform);\n    }\n\n    /// &lt;summary&gt;\n    /// Renderer Item in Endless List\n    /// &lt;/summary&gt;\n    protected internal class GItem\n    {\n        GDropDown dropDown;\n        Transform item;\n        Button btn;\n\n        Text text;\n        Image image;\n        GameObject selected;\n        bool activeSelf;\n\n        public string m_Text { get { return text.text; } set { text.text = value; } }\n        public Sprite m_Image { get { return image.sprite; } set { image.sprite = value; } }\n\n        public GItem(GDropDown parent, Transform item)\n        {\n            this.dropDown = parent;\n            this.item = item;\n            activeSelf = false;\n\n            Transform t_trans = item.FindChild(&quot;text&quot;);\n            if (t_trans)\n            {\n                text = t_trans.gameObject.GetComponent&lt;Text&gt;();\n            }\n            Transform t_image = item.FindChild(&quot;image&quot;);\n            if (t_image)\n            {\n                image = t_image.gameObject.GetComponent&lt;Image&gt;();\n            }\n            Transform t_selected = item.FindChild(&quot;selected&quot;);\n            if (t_selected)\n            {\n                selected = t_selected.gameObject;\n            }\n\n            btn = item.GetComponent&lt;Button&gt;();\n            if (btn == null)\n            {\n                Transform t_btn = item.FindChild(&quot;btn&quot;);\n                if (t_btn != null)\n                    btn = dropDown.GetOrAddComponent&lt;Button&gt;(t_btn.gameObject);\n                else\n                    btn = dropDown.GetOrAddComponent&lt;Button&gt;(item.gameObject);\n            }\n\n            btn.onClick.AddListener(OnBtnItemClicked);\n        }\n\n        private void OnBtnItemClicked()\n        {\n            if (!activeSelf)\n            {\n                SetActive(true);\n                dropDown.SetSelectIndex(int.Parse(item.name));\n            }\n        }\n\n        internal void SetActive(bool active)\n        {\n            this.activeSelf = active;\n            if(selected != null)\n                selected.SetActive(active);\n        }\n\n\n        internal void Reset(string txt, Sprite sprite, bool active)\n        {\n            if (text != null)\n                m_Text = txt;\n            if (image != null)\n                m_Image = sprite;\n            SetActive(active);\n        }\n    }\n\n    /// &lt;summary&gt;\n    /// Cache Data\n    /// &lt;/summary&gt;\n    [Serializable]\n    public class GItemData\n    {\n        [SerializeField]\n        private string m_Text;\n        [SerializeField]\n        private Sprite m_Image;\n        public string text  { get { return m_Text; }  set { m_Text = value; } }\n        public Sprite image { get { return m_Image; } set { m_Image = value; } }\n        public GItemData(){}\n\n        public GItemData(string text)\n        {\n            this.text = text;\n        }\n\n        public GItemData(Sprite image)\n        {\n            this.image = image;\n        }\n\n        public GItemData(string text, Sprite image)\n        {\n            this.text = text;\n            this.image = image;\n        }\n    }\n\n}\n</code></pre>\n<p><img src=\"http://img.blog.csdn.net/20170808122959444?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvQ2hlbmc2MjQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\" alt=\"我的csdn\"></p>\n<p>组件的点击由Toggle 来控制 与 系统UGUI的类似，支持 点击选中 图片和文字， 自己添加一个下拉列表。</p>\n<font color=\"red\">注意： 下拉子选项中， 命名 “text”的“Text”组件、命名 “image”的“Image”组件为该选项的可填充值，看代码一眼便知。命名“selected”的表示下拉列表打开时该选项选中的表现，与toggle相同，我只是乐意改成了button表示而已</font>\n\n<p>Index 就是当前选中项,无限列表需要用到我以前文章中的一篇<a href=\"https://garsonlab.github.io/2017/05/02/%E6%97%A0%E9%99%90%E5%88%97%E8%A1%A8%20ScrollView%20List/\" target=\"_blank\" rel=\"external\">【UGUI】无限列表 ScrollView List</a></p>\n"},{"title":"简单Transparent shader的三种实现","date":"2016-11-23T16:00:00.000Z","_content":"\n第一个SubShader:固定管线\n第二个SubShader:unity shader\n第三个SubShader:顶点片段\n\n``` cpp\n\nShader \"Custom/Transparent\" {\n\tProperties {\n\t\t_Color (\"Main Color\", Color) = (1,1,1,0.6)\n\t\t_MainTex (\"Base (RGB)\", 2D) = \"white\" {}\n\t}\n\tSubShader {\n\t\tTags { \"Queue\"=\"Transparent\" }\n\t\tPass{\n\t\t\tBlend SrcAlpha OneMinusSrcAlpha\n\t\t\tColor[_Color]\n\t\t\tSetTexture[_MainTex]{\n\t\t\t\tcombine previous * texture\n\t\t\t}\n\n\t\t}\n\t}\n\tSubShader {\n\t\tTags { \"Queue\"=\"Transparent\" }\n\t\tCGPROGRAM\n\t\t#pragma surface surf Lambert alpha\n\n\t\tfixed4 _Color;\n\t\tsampler2D _MainTex;\n\n\t\tstruct Input {\n\t\t\tfloat2 uv_MainTex;\n\t\t};\n\t\tvoid surf (Input IN, inout SurfaceOutput o) {\n\t\t\tfixed4 c = tex2D(_MainTex, IN.uv_MainTex) * _Color;\n\t\t\to.Albedo = c.rgb;\n\t\t\to.Alpha = c.a;\n\t\t}\n\n\t\tENDCG\n\t}\n\tSubShader {\n\t\tTags { \"Queue\"=\"Transparent\" }\n\t\tBlend SrcAlpha OneMinusSrcAlpha\n\t\tPass{\n\t\t\tCGPROGRAM\n\t\t\t#pragma vertex vert\n\t\t\t#pragma fragment frag\n\t\t\t#include \"UnityCG.cginc\"\n\n\t\t\tfixed4 _Color;\n\t\t\tsampler2D _MainTex;\n\n\t\t\tstruct v2f{\n\t\t\t\tfloat4 vertex : POSITION;\n\t\t\t\tfloat2 texcoord : TEXCOORD0;\n\t\t\t};\n\n\t\t\tv2f vert(appdata_base v){\n\t\t\t\tv2f o;\n      \t\t\to.vertex = mul(UNITY_MATRIX_MVP,v.vertex);\n      \t\t\to.texcoord = v.texcoord;\n      \t\t\treturn o;\n\t\t\t}\n\n\t\t\tfixed4 frag(v2f i):COLOR{\n\t\t\t\treturn tex2D(_MainTex, i.texcoord) * _Color;\n\t\t\t}\n\n\t\t\tENDCG\n\t\t}\n\t}\n\tFallBack \"Transparent/Diffuse\"\n}\n\n\n```","source":"_posts/简单Transparent shader的三种实现.md","raw":"---\ntitle: 简单Transparent shader的三种实现\ndate: 2016-11-24\ntags:\n- Shader\n- Unity\ncategories: UnityShader\n---\n\n第一个SubShader:固定管线\n第二个SubShader:unity shader\n第三个SubShader:顶点片段\n\n``` cpp\n\nShader \"Custom/Transparent\" {\n\tProperties {\n\t\t_Color (\"Main Color\", Color) = (1,1,1,0.6)\n\t\t_MainTex (\"Base (RGB)\", 2D) = \"white\" {}\n\t}\n\tSubShader {\n\t\tTags { \"Queue\"=\"Transparent\" }\n\t\tPass{\n\t\t\tBlend SrcAlpha OneMinusSrcAlpha\n\t\t\tColor[_Color]\n\t\t\tSetTexture[_MainTex]{\n\t\t\t\tcombine previous * texture\n\t\t\t}\n\n\t\t}\n\t}\n\tSubShader {\n\t\tTags { \"Queue\"=\"Transparent\" }\n\t\tCGPROGRAM\n\t\t#pragma surface surf Lambert alpha\n\n\t\tfixed4 _Color;\n\t\tsampler2D _MainTex;\n\n\t\tstruct Input {\n\t\t\tfloat2 uv_MainTex;\n\t\t};\n\t\tvoid surf (Input IN, inout SurfaceOutput o) {\n\t\t\tfixed4 c = tex2D(_MainTex, IN.uv_MainTex) * _Color;\n\t\t\to.Albedo = c.rgb;\n\t\t\to.Alpha = c.a;\n\t\t}\n\n\t\tENDCG\n\t}\n\tSubShader {\n\t\tTags { \"Queue\"=\"Transparent\" }\n\t\tBlend SrcAlpha OneMinusSrcAlpha\n\t\tPass{\n\t\t\tCGPROGRAM\n\t\t\t#pragma vertex vert\n\t\t\t#pragma fragment frag\n\t\t\t#include \"UnityCG.cginc\"\n\n\t\t\tfixed4 _Color;\n\t\t\tsampler2D _MainTex;\n\n\t\t\tstruct v2f{\n\t\t\t\tfloat4 vertex : POSITION;\n\t\t\t\tfloat2 texcoord : TEXCOORD0;\n\t\t\t};\n\n\t\t\tv2f vert(appdata_base v){\n\t\t\t\tv2f o;\n      \t\t\to.vertex = mul(UNITY_MATRIX_MVP,v.vertex);\n      \t\t\to.texcoord = v.texcoord;\n      \t\t\treturn o;\n\t\t\t}\n\n\t\t\tfixed4 frag(v2f i):COLOR{\n\t\t\t\treturn tex2D(_MainTex, i.texcoord) * _Color;\n\t\t\t}\n\n\t\t\tENDCG\n\t\t}\n\t}\n\tFallBack \"Transparent/Diffuse\"\n}\n\n\n```","slug":"简单Transparent shader的三种实现","published":1,"updated":"2017-10-26T09:51:53.349Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj9fm90ug001s2cob3wefkixy","content":"<p>第一个SubShader:固定管线<br>第二个SubShader:unity shader<br>第三个SubShader:顶点片段</p>\n<pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\">\nShader <span class=\"token string\">\"Custom/Transparent\"</span> <span class=\"token punctuation\">{</span>\n    Properties <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">_Color</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"Main Color\"</span><span class=\"token punctuation\">,</span> Color<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0.6</span><span class=\"token punctuation\">)</span>\n        <span class=\"token function\">_MainTex</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"Base (RGB)\"</span><span class=\"token punctuation\">,</span> 2D<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"white\"</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    SubShader <span class=\"token punctuation\">{</span>\n        Tags <span class=\"token punctuation\">{</span> <span class=\"token string\">\"Queue\"</span><span class=\"token operator\">=</span><span class=\"token string\">\"Transparent\"</span> <span class=\"token punctuation\">}</span>\n        Pass<span class=\"token punctuation\">{</span>\n            Blend SrcAlpha OneMinusSrcAlpha\n            Color<span class=\"token punctuation\">[</span>_Color<span class=\"token punctuation\">]</span>\n            SetTexture<span class=\"token punctuation\">[</span>_MainTex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">{</span>\n                combine previous <span class=\"token operator\">*</span> texture\n            <span class=\"token punctuation\">}</span>\n\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    SubShader <span class=\"token punctuation\">{</span>\n        Tags <span class=\"token punctuation\">{</span> <span class=\"token string\">\"Queue\"</span><span class=\"token operator\">=</span><span class=\"token string\">\"Transparent\"</span> <span class=\"token punctuation\">}</span>\n        CGPROGRAM\n        <span class=\"token macro property\">#<span class=\"token directive keyword\">pragma</span> surface surf Lambert alpha</span>\n\n        fixed4 _Color<span class=\"token punctuation\">;</span>\n        sampler2D _MainTex<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">struct</span> Input <span class=\"token punctuation\">{</span>\n            float2 uv_MainTex<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">void</span> <span class=\"token function\">surf</span> <span class=\"token punctuation\">(</span>Input IN<span class=\"token punctuation\">,</span> inout SurfaceOutput o<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            fixed4 c <span class=\"token operator\">=</span> <span class=\"token function\">tex2D</span><span class=\"token punctuation\">(</span>_MainTex<span class=\"token punctuation\">,</span> IN<span class=\"token punctuation\">.</span>uv_MainTex<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> _Color<span class=\"token punctuation\">;</span>\n            o<span class=\"token punctuation\">.</span>Albedo <span class=\"token operator\">=</span> c<span class=\"token punctuation\">.</span>rgb<span class=\"token punctuation\">;</span>\n            o<span class=\"token punctuation\">.</span>Alpha <span class=\"token operator\">=</span> c<span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        ENDCG\n    <span class=\"token punctuation\">}</span>\n    SubShader <span class=\"token punctuation\">{</span>\n        Tags <span class=\"token punctuation\">{</span> <span class=\"token string\">\"Queue\"</span><span class=\"token operator\">=</span><span class=\"token string\">\"Transparent\"</span> <span class=\"token punctuation\">}</span>\n        Blend SrcAlpha OneMinusSrcAlpha\n        Pass<span class=\"token punctuation\">{</span>\n            CGPROGRAM\n            <span class=\"token macro property\">#<span class=\"token directive keyword\">pragma</span> vertex vert</span>\n            <span class=\"token macro property\">#<span class=\"token directive keyword\">pragma</span> fragment frag</span>\n            <span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"UnityCG.cginc\"</span></span>\n\n            fixed4 _Color<span class=\"token punctuation\">;</span>\n            sampler2D _MainTex<span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">struct</span> v2f<span class=\"token punctuation\">{</span>\n                float4 vertex <span class=\"token operator\">:</span> POSITION<span class=\"token punctuation\">;</span>\n                float2 texcoord <span class=\"token operator\">:</span> TEXCOORD0<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n            v2f <span class=\"token function\">vert</span><span class=\"token punctuation\">(</span>appdata_base v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                v2f o<span class=\"token punctuation\">;</span>\n                  o<span class=\"token punctuation\">.</span>vertex <span class=\"token operator\">=</span> <span class=\"token function\">mul</span><span class=\"token punctuation\">(</span>UNITY_MATRIX_MVP<span class=\"token punctuation\">,</span>v<span class=\"token punctuation\">.</span>vertex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                  o<span class=\"token punctuation\">.</span>texcoord <span class=\"token operator\">=</span> v<span class=\"token punctuation\">.</span>texcoord<span class=\"token punctuation\">;</span>\n                  <span class=\"token keyword\">return</span> o<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            fixed4 <span class=\"token function\">frag</span><span class=\"token punctuation\">(</span>v2f i<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>COLOR<span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span> <span class=\"token function\">tex2D</span><span class=\"token punctuation\">(</span>_MainTex<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">.</span>texcoord<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> _Color<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            ENDCG\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    FallBack <span class=\"token string\">\"Transparent/Diffuse\"</span>\n<span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{"gallery":{"美女":{"full_link":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1508912200438&di=d5b3eacf86d8f94c149c6fc68fe4da67&imgtype=0&src=http%3A%2F%2Fpic01.taopic.com%2F151014%2F234732-15101410452229-lp.jpg","thumb_link":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1508912200438&di=d5b3eacf86d8f94c149c6fc68fe4da67&imgtype=0&src=http%3A%2F%2Fpic01.taopic.com%2F151014%2F234732-15101410452229-lp.jpg","descr":"美女插画"}},"links":{"Github":{"link":"https://github.com/garsonlab","avatar":"https://avatars3.githubusercontent.com/u/13958934?s=460&v=4","descr":"My Github","type":"Blog"},"OnLineTools":{"link":"http://tool.lu/","avatar":"http://qn11.tool.lu/201710/15/103320SbM84Ql4tETjg49a_28x28.png","descr":"在线工具","type":"Tools"},"CMDMarkdown":{"link":"https://www.zybuluo.com/","avatar":"https://www.zybuluo.com/static/img/logo.png","descr":"Markdown在线编辑","type":"Tools"},"Hexo文档":{"link":"https://hexo.io/zh-cn/docs/","avatar":"https://hexo.io/logo.svg","descr":"Hexo中文官方文档","type":"Community"},"游戏蛮牛":{"link":"http://www.manew.com/forum.php","avatar":"http://www.manew.com/template/manew2016/images/logo.png","descr":"unity交流社区","type":"Unity"},"FairyGUI":{"link":"http://www.fairygui.com/","avatar":"http://www.fairygui.com/images/20170728151207.png","descr":"FairyGUI官方网站","type":"Site"}},"linktypes":{"Blog":{"name":"关注的博客"},"Unity":{"name":"Unity3D"},"Community":{"name":"浏览的社区"},"Tools":{"name":"工具"},"Site":{"name":"收藏的网址"}}}},"excerpt":"","more":"<p>第一个SubShader:固定管线<br>第二个SubShader:unity shader<br>第三个SubShader:顶点片段</p>\n<pre><code class=\"cpp\">\nShader &quot;Custom/Transparent&quot; {\n    Properties {\n        _Color (&quot;Main Color&quot;, Color) = (1,1,1,0.6)\n        _MainTex (&quot;Base (RGB)&quot;, 2D) = &quot;white&quot; {}\n    }\n    SubShader {\n        Tags { &quot;Queue&quot;=&quot;Transparent&quot; }\n        Pass{\n            Blend SrcAlpha OneMinusSrcAlpha\n            Color[_Color]\n            SetTexture[_MainTex]{\n                combine previous * texture\n            }\n\n        }\n    }\n    SubShader {\n        Tags { &quot;Queue&quot;=&quot;Transparent&quot; }\n        CGPROGRAM\n        #pragma surface surf Lambert alpha\n\n        fixed4 _Color;\n        sampler2D _MainTex;\n\n        struct Input {\n            float2 uv_MainTex;\n        };\n        void surf (Input IN, inout SurfaceOutput o) {\n            fixed4 c = tex2D(_MainTex, IN.uv_MainTex) * _Color;\n            o.Albedo = c.rgb;\n            o.Alpha = c.a;\n        }\n\n        ENDCG\n    }\n    SubShader {\n        Tags { &quot;Queue&quot;=&quot;Transparent&quot; }\n        Blend SrcAlpha OneMinusSrcAlpha\n        Pass{\n            CGPROGRAM\n            #pragma vertex vert\n            #pragma fragment frag\n            #include &quot;UnityCG.cginc&quot;\n\n            fixed4 _Color;\n            sampler2D _MainTex;\n\n            struct v2f{\n                float4 vertex : POSITION;\n                float2 texcoord : TEXCOORD0;\n            };\n\n            v2f vert(appdata_base v){\n                v2f o;\n                  o.vertex = mul(UNITY_MATRIX_MVP,v.vertex);\n                  o.texcoord = v.texcoord;\n                  return o;\n            }\n\n            fixed4 frag(v2f i):COLOR{\n                return tex2D(_MainTex, i.texcoord) * _Color;\n            }\n\n            ENDCG\n        }\n    }\n    FallBack &quot;Transparent/Diffuse&quot;\n}\n</code></pre>\n"},{"title":"UI自动布局","date":"2017-11-03T16:00:00.000Z","_content":"\n\nUGUI自动布局一直适应 *GridLayoutGroup*，但是，使用grid时有一个很严重的问题就是：<font color=\"red\">当打开**Profiler**中的*Deep Profile*时，整个Unity都会崩溃.</font><font color=\"green\" size=\"1\">(目前使用版本v5.6.0)</font>此外，还有一个问题，但是我给忘了...\n所以，还是自己动手造轮子吧，代码如下：\n\n``` csharp\nusing UnityEngine;\n\n/// <summary>\n/// Introduction: UILayout, UI自动布局，替代GridLayoutGroup, 子节点改变时需要自行调用 Rebuild\n/// Author: \tGarson\n/// Time: \n/// </summary>\n[RequireComponent(typeof(RectTransform))]\npublic class UILayout : MonoBehaviour\n{\n    [SerializeField]//边距\n    private RectOffset m_Padding = new RectOffset();\n    public RectOffset padding { get { return m_Padding; } set { SetProperty(ref m_Padding, value); } }\n    [SerializeField]//单元格大小\n    private Vector2 m_CellSize = new Vector2(100, 100);\n    public Vector2 cellSize { get { return m_CellSize; } set { SetProperty(ref m_CellSize, value);} }\n    [SerializeField]//开始排布位置\n    private StartCorner m_StartCorner;\n    public StartCorner startCorner { get { return m_StartCorner; } set { SetProperty(ref m_StartCorner, value);} }\n    [SerializeField]//排列方式\n    private Arrangement m_Arrangement;\n    public Arrangement arrangement { get { return m_Arrangement; } set { SetProperty(ref m_Arrangement, value);} }\n    [Tooltip(\"<=0自动计算\")]\n    [SerializeField]//每行数目，<=0自动计算\n    private int m_FixedCount;\n    public int fixedCount { get { return m_FixedCount; } set { SetProperty(ref m_FixedCount, value); } }\n    [SerializeField]\n    private Vector2 m_Space;//行列间距\n    public Vector2 space { get { return m_Space; } set { SetProperty(ref m_Space, value); } }\n    private Vector2 m_WrapSize;//排布后该组件应该大小\n    public Vector2 wrapSize { get { return m_WrapSize; } }\n\n    private RectTransform m_rectTransform;\n    private RectTransform rectTransform { get { if(m_rectTransform==null)m_rectTransform=transform as RectTransform;return m_rectTransform;} }\n\n    public void Rebuild()\n    {\n        RectTransform.Edge edgeX = RectTransform.Edge.Left, edgeY= RectTransform.Edge.Top;\n        float paddingX = 0, paddingY = 0, sizeX = 0, sizeY = 0;\n        switch (m_StartCorner)\n        {\n            case StartCorner.TopLeft:\n                edgeY = RectTransform.Edge.Top;\n                edgeX = RectTransform.Edge.Left;\n                paddingX = m_Padding.left;\n                paddingY = m_Padding.top;\n                sizeX = m_Padding.right;\n                sizeY = m_Padding.bottom;\n                break;\n            case StartCorner.TopRight:\n                edgeY = RectTransform.Edge.Top;\n                edgeX = RectTransform.Edge.Right;                  \n                paddingX = m_Padding.right;\n                paddingY = m_Padding.top;\n                sizeX = m_Padding.left;\n                sizeY = m_Padding.bottom;\n                break;\n            case StartCorner.BottomLeft:\n                edgeY = RectTransform.Edge.Bottom;\n                edgeX = RectTransform.Edge.Left;\n                paddingX = m_Padding.left;\n                paddingY = m_Padding.bottom;\n                sizeX = m_Padding.right;\n                sizeY = m_Padding.top;\n                break;\n            case StartCorner.BottomRight:\n                edgeY = RectTransform.Edge.Bottom;\n                edgeX = RectTransform.Edge.Right;\n                paddingX = m_Padding.right;\n                paddingY = m_Padding.bottom;\n                sizeX = m_Padding.left;\n                sizeY = m_Padding.top;\n                break;\n        }\n\n        int axis = 0;\n        int preferCount = m_FixedCount;\n        float tem = 0;\n        m_WrapSize = Vector2.zero;\n        switch (m_Arrangement)\n        {\n            case Arrangement.HorizontalFlow:\n                axis = 0;\n                tem = paddingX;\n                if (m_FixedCount <= 0)\n                {\n                    preferCount = Mathf.FloorToInt(rectTransform.rect.size.x / m_CellSize.x);\n                    preferCount = preferCount > 0 ? preferCount : 1;\n                }\n                break;\n            case Arrangement.VerticalFlow:\n                axis = 1;\n                tem = paddingY;\n                if (m_FixedCount <= 0)\n                {\n                    preferCount = Mathf.FloorToInt(rectTransform.rect.size.y / m_CellSize.y);\n                    preferCount = preferCount > 0 ? preferCount : 1;\n                }\n                break;\n            case Arrangement.Horizontal:\n                axis = 0;\n                preferCount = int.MaxValue;\n                tem = paddingX;\n                break;\n            case Arrangement.Vertical:\n                axis = 1;\n                preferCount = int.MaxValue;\n                tem = paddingY;\n                break;\n        }\n\n        int flag = 0;\n        for (int i = 0; i < transform.childCount; i++)\n        {\n            if (flag >= preferCount)\n            {\n                if (axis == 0)\n                {\n                    tem = paddingX;\n                    paddingY += m_Space.y + m_CellSize.y;\n                }\n                else\n                {\n                    tem = paddingY;\n                    paddingX += m_Space.x + m_CellSize.x;\n                }\n                flag = 0;\n            }\n            var child = transform.GetChild(i) as RectTransform;\n            if (child != null && child.gameObject.activeSelf)\n            {\n                if (axis == 0)\n                {\n                    child.SetInsetAndSizeFromParentEdge(edgeX, tem, m_CellSize.x);\n                    child.SetInsetAndSizeFromParentEdge(edgeY, paddingY, m_CellSize.y);\n                    tem += m_Space.x + m_CellSize.x;\n                    if (tem - m_Space.x > m_WrapSize.x)\n                        m_WrapSize.x = tem - m_Space.x;\n                    m_WrapSize.y = paddingY + m_CellSize.y;\n                }\n                else\n                {\n                    child.SetInsetAndSizeFromParentEdge(edgeX, paddingX, m_CellSize.x);\n                    child.SetInsetAndSizeFromParentEdge(edgeY, tem, m_CellSize.y);\n                    tem += m_Space.y + m_CellSize.y;\n\n                    if (tem - m_Space.y > m_WrapSize.y)\n                        m_WrapSize.y = tem - m_Space.y;\n                    m_WrapSize.x = paddingX + m_CellSize.x;\n                }\n                flag++;\n            }\n        }\n        m_WrapSize.x += sizeX;\n        m_WrapSize.y += sizeY;\n    }\n\n    public void SetPadding(int left, int right, int top, int bottom)\n    {\n        padding = new RectOffset(left, right, top, bottom);\n    }\n\n    public void SetStartCorner(int start)\n    {\n        startCorner = (StartCorner) start;\n    }\n\n    public void SetArrangement(int arrange)\n    {\n        arrangement = (Arrangement) arrange;\n    }\n\n\n    private void SetProperty<T>(ref T currentValue, T newValue)\n    {\n        if ((currentValue == null && newValue == null) || (currentValue != null && currentValue.Equals(newValue)))\n            return;\n        currentValue = newValue;\n        Rebuild();\n    }\n\n    [LuaInterface.NoToLua]\n    public enum StartCorner\n    {\n        TopLeft = 0,\n        TopRight = 1,\n        BottomLeft = 2,\n        BottomRight = 3\n    }\n\n    [LuaInterface.NoToLua]\n    public enum Arrangement\n    {\n        //横向流动，第一排、第二排...\n        HorizontalFlow = 0,\n        //纵向流动，第一列、第二列...\n        VerticalFlow = 1,\n        //横排，相当于fixedCount=1效果\n        Horizontal = 2,\n        //纵排，相当于fixedCount=1效果\n        Vertical = 3,\n    }\n\n}\n\n\n\n\n#if UNITY_EDITOR\n\n[UnityEditor.CustomEditor(typeof(UILayout))]\npublic class LayoutEditor : UnityEditor.Editor\n{\n    public override void OnInspectorGUI()\n    {\n        base.OnInspectorGUI();\n        GUILayout.Space(10);\n        if (GUILayout.Button(\"Rebuild\"))\n        {\n            UILayout layout = target as UILayout;\n            layout.Rebuild();\n        }\n    }\n}\n#endif\n```\n\n\n其中 *SetInsetAndSizeFromParentEdge* 是调用的系统方法，作用是 **设置组件相对于父节点的位置Edge距离（参数1）且在该轴上的长度（参数2）**\n\n<font color=\"red\">注：任何子节点的改变都不会像gridlayoutgroup一样刷新，需要手动调用Rebuild，因为觉得没有必要继承*UIBehaviour*而是继承了*MonoBehaviour*。   设置属性会自动刷新.</font>\n\n``` bash\nwrapSize 是rebuild后整个包裹区域应该的大小，可用于重新设置尺寸\n```","source":"_posts/UI自动布局.md","raw":"---\ntitle: UI自动布局\ndate: 2017-11-4\ntags:\n- UGUI\n- Layout\ncategories: UGUI\n---\n\n\nUGUI自动布局一直适应 *GridLayoutGroup*，但是，使用grid时有一个很严重的问题就是：<font color=\"red\">当打开**Profiler**中的*Deep Profile*时，整个Unity都会崩溃.</font><font color=\"green\" size=\"1\">(目前使用版本v5.6.0)</font>此外，还有一个问题，但是我给忘了...\n所以，还是自己动手造轮子吧，代码如下：\n\n``` csharp\nusing UnityEngine;\n\n/// <summary>\n/// Introduction: UILayout, UI自动布局，替代GridLayoutGroup, 子节点改变时需要自行调用 Rebuild\n/// Author: \tGarson\n/// Time: \n/// </summary>\n[RequireComponent(typeof(RectTransform))]\npublic class UILayout : MonoBehaviour\n{\n    [SerializeField]//边距\n    private RectOffset m_Padding = new RectOffset();\n    public RectOffset padding { get { return m_Padding; } set { SetProperty(ref m_Padding, value); } }\n    [SerializeField]//单元格大小\n    private Vector2 m_CellSize = new Vector2(100, 100);\n    public Vector2 cellSize { get { return m_CellSize; } set { SetProperty(ref m_CellSize, value);} }\n    [SerializeField]//开始排布位置\n    private StartCorner m_StartCorner;\n    public StartCorner startCorner { get { return m_StartCorner; } set { SetProperty(ref m_StartCorner, value);} }\n    [SerializeField]//排列方式\n    private Arrangement m_Arrangement;\n    public Arrangement arrangement { get { return m_Arrangement; } set { SetProperty(ref m_Arrangement, value);} }\n    [Tooltip(\"<=0自动计算\")]\n    [SerializeField]//每行数目，<=0自动计算\n    private int m_FixedCount;\n    public int fixedCount { get { return m_FixedCount; } set { SetProperty(ref m_FixedCount, value); } }\n    [SerializeField]\n    private Vector2 m_Space;//行列间距\n    public Vector2 space { get { return m_Space; } set { SetProperty(ref m_Space, value); } }\n    private Vector2 m_WrapSize;//排布后该组件应该大小\n    public Vector2 wrapSize { get { return m_WrapSize; } }\n\n    private RectTransform m_rectTransform;\n    private RectTransform rectTransform { get { if(m_rectTransform==null)m_rectTransform=transform as RectTransform;return m_rectTransform;} }\n\n    public void Rebuild()\n    {\n        RectTransform.Edge edgeX = RectTransform.Edge.Left, edgeY= RectTransform.Edge.Top;\n        float paddingX = 0, paddingY = 0, sizeX = 0, sizeY = 0;\n        switch (m_StartCorner)\n        {\n            case StartCorner.TopLeft:\n                edgeY = RectTransform.Edge.Top;\n                edgeX = RectTransform.Edge.Left;\n                paddingX = m_Padding.left;\n                paddingY = m_Padding.top;\n                sizeX = m_Padding.right;\n                sizeY = m_Padding.bottom;\n                break;\n            case StartCorner.TopRight:\n                edgeY = RectTransform.Edge.Top;\n                edgeX = RectTransform.Edge.Right;                  \n                paddingX = m_Padding.right;\n                paddingY = m_Padding.top;\n                sizeX = m_Padding.left;\n                sizeY = m_Padding.bottom;\n                break;\n            case StartCorner.BottomLeft:\n                edgeY = RectTransform.Edge.Bottom;\n                edgeX = RectTransform.Edge.Left;\n                paddingX = m_Padding.left;\n                paddingY = m_Padding.bottom;\n                sizeX = m_Padding.right;\n                sizeY = m_Padding.top;\n                break;\n            case StartCorner.BottomRight:\n                edgeY = RectTransform.Edge.Bottom;\n                edgeX = RectTransform.Edge.Right;\n                paddingX = m_Padding.right;\n                paddingY = m_Padding.bottom;\n                sizeX = m_Padding.left;\n                sizeY = m_Padding.top;\n                break;\n        }\n\n        int axis = 0;\n        int preferCount = m_FixedCount;\n        float tem = 0;\n        m_WrapSize = Vector2.zero;\n        switch (m_Arrangement)\n        {\n            case Arrangement.HorizontalFlow:\n                axis = 0;\n                tem = paddingX;\n                if (m_FixedCount <= 0)\n                {\n                    preferCount = Mathf.FloorToInt(rectTransform.rect.size.x / m_CellSize.x);\n                    preferCount = preferCount > 0 ? preferCount : 1;\n                }\n                break;\n            case Arrangement.VerticalFlow:\n                axis = 1;\n                tem = paddingY;\n                if (m_FixedCount <= 0)\n                {\n                    preferCount = Mathf.FloorToInt(rectTransform.rect.size.y / m_CellSize.y);\n                    preferCount = preferCount > 0 ? preferCount : 1;\n                }\n                break;\n            case Arrangement.Horizontal:\n                axis = 0;\n                preferCount = int.MaxValue;\n                tem = paddingX;\n                break;\n            case Arrangement.Vertical:\n                axis = 1;\n                preferCount = int.MaxValue;\n                tem = paddingY;\n                break;\n        }\n\n        int flag = 0;\n        for (int i = 0; i < transform.childCount; i++)\n        {\n            if (flag >= preferCount)\n            {\n                if (axis == 0)\n                {\n                    tem = paddingX;\n                    paddingY += m_Space.y + m_CellSize.y;\n                }\n                else\n                {\n                    tem = paddingY;\n                    paddingX += m_Space.x + m_CellSize.x;\n                }\n                flag = 0;\n            }\n            var child = transform.GetChild(i) as RectTransform;\n            if (child != null && child.gameObject.activeSelf)\n            {\n                if (axis == 0)\n                {\n                    child.SetInsetAndSizeFromParentEdge(edgeX, tem, m_CellSize.x);\n                    child.SetInsetAndSizeFromParentEdge(edgeY, paddingY, m_CellSize.y);\n                    tem += m_Space.x + m_CellSize.x;\n                    if (tem - m_Space.x > m_WrapSize.x)\n                        m_WrapSize.x = tem - m_Space.x;\n                    m_WrapSize.y = paddingY + m_CellSize.y;\n                }\n                else\n                {\n                    child.SetInsetAndSizeFromParentEdge(edgeX, paddingX, m_CellSize.x);\n                    child.SetInsetAndSizeFromParentEdge(edgeY, tem, m_CellSize.y);\n                    tem += m_Space.y + m_CellSize.y;\n\n                    if (tem - m_Space.y > m_WrapSize.y)\n                        m_WrapSize.y = tem - m_Space.y;\n                    m_WrapSize.x = paddingX + m_CellSize.x;\n                }\n                flag++;\n            }\n        }\n        m_WrapSize.x += sizeX;\n        m_WrapSize.y += sizeY;\n    }\n\n    public void SetPadding(int left, int right, int top, int bottom)\n    {\n        padding = new RectOffset(left, right, top, bottom);\n    }\n\n    public void SetStartCorner(int start)\n    {\n        startCorner = (StartCorner) start;\n    }\n\n    public void SetArrangement(int arrange)\n    {\n        arrangement = (Arrangement) arrange;\n    }\n\n\n    private void SetProperty<T>(ref T currentValue, T newValue)\n    {\n        if ((currentValue == null && newValue == null) || (currentValue != null && currentValue.Equals(newValue)))\n            return;\n        currentValue = newValue;\n        Rebuild();\n    }\n\n    [LuaInterface.NoToLua]\n    public enum StartCorner\n    {\n        TopLeft = 0,\n        TopRight = 1,\n        BottomLeft = 2,\n        BottomRight = 3\n    }\n\n    [LuaInterface.NoToLua]\n    public enum Arrangement\n    {\n        //横向流动，第一排、第二排...\n        HorizontalFlow = 0,\n        //纵向流动，第一列、第二列...\n        VerticalFlow = 1,\n        //横排，相当于fixedCount=1效果\n        Horizontal = 2,\n        //纵排，相当于fixedCount=1效果\n        Vertical = 3,\n    }\n\n}\n\n\n\n\n#if UNITY_EDITOR\n\n[UnityEditor.CustomEditor(typeof(UILayout))]\npublic class LayoutEditor : UnityEditor.Editor\n{\n    public override void OnInspectorGUI()\n    {\n        base.OnInspectorGUI();\n        GUILayout.Space(10);\n        if (GUILayout.Button(\"Rebuild\"))\n        {\n            UILayout layout = target as UILayout;\n            layout.Rebuild();\n        }\n    }\n}\n#endif\n```\n\n\n其中 *SetInsetAndSizeFromParentEdge* 是调用的系统方法，作用是 **设置组件相对于父节点的位置Edge距离（参数1）且在该轴上的长度（参数2）**\n\n<font color=\"red\">注：任何子节点的改变都不会像gridlayoutgroup一样刷新，需要手动调用Rebuild，因为觉得没有必要继承*UIBehaviour*而是继承了*MonoBehaviour*。   设置属性会自动刷新.</font>\n\n``` bash\nwrapSize 是rebuild后整个包裹区域应该的大小，可用于重新设置尺寸\n```","slug":"UI自动布局","published":1,"updated":"2017-11-04T02:53:30.819Z","_id":"cj9kqg4nn000080obs2li7y88","comments":1,"layout":"post","photos":[],"link":"","content":"<p>UGUI自动布局一直适应 <em>GridLayoutGroup</em>，但是，使用grid时有一个很严重的问题就是：<font color=\"red\">当打开<strong>Profiler</strong>中的<em>Deep Profile</em>时，整个Unity都会崩溃.</font><font color=\"green\" size=\"1\">(目前使用版本v5.6.0)</font>此外，还有一个问题，但是我给忘了…<br>所以，还是自己动手造轮子吧，代码如下：</p>\n<pre class=\"line-numbers language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">using</span> UnityEngine<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/// &lt;summary></span>\n<span class=\"token comment\" spellcheck=\"true\">/// Introduction: UILayout, UI自动布局，替代GridLayoutGroup, 子节点改变时需要自行调用 Rebuild</span>\n<span class=\"token comment\" spellcheck=\"true\">/// Author:     Garson</span>\n<span class=\"token comment\" spellcheck=\"true\">/// Time: </span>\n<span class=\"token comment\" spellcheck=\"true\">/// &lt;/summary></span>\n<span class=\"token punctuation\">[</span><span class=\"token function\">RequireComponent</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span>RectTransform<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UILayout</span> <span class=\"token punctuation\">:</span> MonoBehaviour\n<span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">[</span>SerializeField<span class=\"token punctuation\">]</span><span class=\"token comment\" spellcheck=\"true\">//边距</span>\n    <span class=\"token keyword\">private</span> RectOffset m_Padding <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RectOffset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> RectOffset padding <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> m_Padding<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span> <span class=\"token keyword\">set</span> <span class=\"token punctuation\">{</span> <span class=\"token function\">SetProperty</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">ref</span> m_Padding<span class=\"token punctuation\">,</span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">[</span>SerializeField<span class=\"token punctuation\">]</span><span class=\"token comment\" spellcheck=\"true\">//单元格大小</span>\n    <span class=\"token keyword\">private</span> Vector2 m_CellSize <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Vector2</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> Vector2 cellSize <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> m_CellSize<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span> <span class=\"token keyword\">set</span> <span class=\"token punctuation\">{</span> <span class=\"token function\">SetProperty</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">ref</span> m_CellSize<span class=\"token punctuation\">,</span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">[</span>SerializeField<span class=\"token punctuation\">]</span><span class=\"token comment\" spellcheck=\"true\">//开始排布位置</span>\n    <span class=\"token keyword\">private</span> StartCorner m_StartCorner<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> StartCorner startCorner <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> m_StartCorner<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span> <span class=\"token keyword\">set</span> <span class=\"token punctuation\">{</span> <span class=\"token function\">SetProperty</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">ref</span> m_StartCorner<span class=\"token punctuation\">,</span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">[</span>SerializeField<span class=\"token punctuation\">]</span><span class=\"token comment\" spellcheck=\"true\">//排列方式</span>\n    <span class=\"token keyword\">private</span> Arrangement m_Arrangement<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> Arrangement arrangement <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> m_Arrangement<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span> <span class=\"token keyword\">set</span> <span class=\"token punctuation\">{</span> <span class=\"token function\">SetProperty</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">ref</span> m_Arrangement<span class=\"token punctuation\">,</span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">[</span><span class=\"token function\">Tooltip</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&lt;=0自动计算\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">[</span>SerializeField<span class=\"token punctuation\">]</span><span class=\"token comment\" spellcheck=\"true\">//每行数目，&lt;=0自动计算</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> m_FixedCount<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> fixedCount <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> m_FixedCount<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span> <span class=\"token keyword\">set</span> <span class=\"token punctuation\">{</span> <span class=\"token function\">SetProperty</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">ref</span> m_FixedCount<span class=\"token punctuation\">,</span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">[</span>SerializeField<span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">private</span> Vector2 m_Space<span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//行列间距</span>\n    <span class=\"token keyword\">public</span> Vector2 space <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> m_Space<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span> <span class=\"token keyword\">set</span> <span class=\"token punctuation\">{</span> <span class=\"token function\">SetProperty</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">ref</span> m_Space<span class=\"token punctuation\">,</span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">private</span> Vector2 m_WrapSize<span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//排布后该组件应该大小</span>\n    <span class=\"token keyword\">public</span> Vector2 wrapSize <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> m_WrapSize<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> RectTransform m_rectTransform<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> RectTransform rectTransform <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>m_rectTransform<span class=\"token operator\">==</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>m_rectTransform<span class=\"token operator\">=</span>transform <span class=\"token keyword\">as</span> RectTransform<span class=\"token punctuation\">;</span><span class=\"token keyword\">return</span> m_rectTransform<span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">Rebuild</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        RectTransform<span class=\"token punctuation\">.</span>Edge edgeX <span class=\"token operator\">=</span> RectTransform<span class=\"token punctuation\">.</span>Edge<span class=\"token punctuation\">.</span>Left<span class=\"token punctuation\">,</span> edgeY<span class=\"token operator\">=</span> RectTransform<span class=\"token punctuation\">.</span>Edge<span class=\"token punctuation\">.</span>Top<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">float</span> paddingX <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> paddingY <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> sizeX <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> sizeY <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>m_StartCorner<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">case</span> StartCorner<span class=\"token punctuation\">.</span>TopLeft<span class=\"token punctuation\">:</span>\n                edgeY <span class=\"token operator\">=</span> RectTransform<span class=\"token punctuation\">.</span>Edge<span class=\"token punctuation\">.</span>Top<span class=\"token punctuation\">;</span>\n                edgeX <span class=\"token operator\">=</span> RectTransform<span class=\"token punctuation\">.</span>Edge<span class=\"token punctuation\">.</span>Left<span class=\"token punctuation\">;</span>\n                paddingX <span class=\"token operator\">=</span> m_Padding<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">;</span>\n                paddingY <span class=\"token operator\">=</span> m_Padding<span class=\"token punctuation\">.</span>top<span class=\"token punctuation\">;</span>\n                sizeX <span class=\"token operator\">=</span> m_Padding<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">;</span>\n                sizeY <span class=\"token operator\">=</span> m_Padding<span class=\"token punctuation\">.</span>bottom<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">case</span> StartCorner<span class=\"token punctuation\">.</span>TopRight<span class=\"token punctuation\">:</span>\n                edgeY <span class=\"token operator\">=</span> RectTransform<span class=\"token punctuation\">.</span>Edge<span class=\"token punctuation\">.</span>Top<span class=\"token punctuation\">;</span>\n                edgeX <span class=\"token operator\">=</span> RectTransform<span class=\"token punctuation\">.</span>Edge<span class=\"token punctuation\">.</span>Right<span class=\"token punctuation\">;</span>                  \n                paddingX <span class=\"token operator\">=</span> m_Padding<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">;</span>\n                paddingY <span class=\"token operator\">=</span> m_Padding<span class=\"token punctuation\">.</span>top<span class=\"token punctuation\">;</span>\n                sizeX <span class=\"token operator\">=</span> m_Padding<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">;</span>\n                sizeY <span class=\"token operator\">=</span> m_Padding<span class=\"token punctuation\">.</span>bottom<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">case</span> StartCorner<span class=\"token punctuation\">.</span>BottomLeft<span class=\"token punctuation\">:</span>\n                edgeY <span class=\"token operator\">=</span> RectTransform<span class=\"token punctuation\">.</span>Edge<span class=\"token punctuation\">.</span>Bottom<span class=\"token punctuation\">;</span>\n                edgeX <span class=\"token operator\">=</span> RectTransform<span class=\"token punctuation\">.</span>Edge<span class=\"token punctuation\">.</span>Left<span class=\"token punctuation\">;</span>\n                paddingX <span class=\"token operator\">=</span> m_Padding<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">;</span>\n                paddingY <span class=\"token operator\">=</span> m_Padding<span class=\"token punctuation\">.</span>bottom<span class=\"token punctuation\">;</span>\n                sizeX <span class=\"token operator\">=</span> m_Padding<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">;</span>\n                sizeY <span class=\"token operator\">=</span> m_Padding<span class=\"token punctuation\">.</span>top<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">case</span> StartCorner<span class=\"token punctuation\">.</span>BottomRight<span class=\"token punctuation\">:</span>\n                edgeY <span class=\"token operator\">=</span> RectTransform<span class=\"token punctuation\">.</span>Edge<span class=\"token punctuation\">.</span>Bottom<span class=\"token punctuation\">;</span>\n                edgeX <span class=\"token operator\">=</span> RectTransform<span class=\"token punctuation\">.</span>Edge<span class=\"token punctuation\">.</span>Right<span class=\"token punctuation\">;</span>\n                paddingX <span class=\"token operator\">=</span> m_Padding<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">;</span>\n                paddingY <span class=\"token operator\">=</span> m_Padding<span class=\"token punctuation\">.</span>bottom<span class=\"token punctuation\">;</span>\n                sizeX <span class=\"token operator\">=</span> m_Padding<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">;</span>\n                sizeY <span class=\"token operator\">=</span> m_Padding<span class=\"token punctuation\">.</span>top<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">int</span> axis <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> preferCount <span class=\"token operator\">=</span> m_FixedCount<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">float</span> tem <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        m_WrapSize <span class=\"token operator\">=</span> Vector2<span class=\"token punctuation\">.</span>zero<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>m_Arrangement<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">case</span> Arrangement<span class=\"token punctuation\">.</span>HorizontalFlow<span class=\"token punctuation\">:</span>\n                axis <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n                tem <span class=\"token operator\">=</span> paddingX<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>m_FixedCount <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">{</span>\n                    preferCount <span class=\"token operator\">=</span> Mathf<span class=\"token punctuation\">.</span><span class=\"token function\">FloorToInt</span><span class=\"token punctuation\">(</span>rectTransform<span class=\"token punctuation\">.</span>rect<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">.</span>x <span class=\"token operator\">/</span> m_CellSize<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    preferCount <span class=\"token operator\">=</span> preferCount <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> preferCount <span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">case</span> Arrangement<span class=\"token punctuation\">.</span>VerticalFlow<span class=\"token punctuation\">:</span>\n                axis <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n                tem <span class=\"token operator\">=</span> paddingY<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>m_FixedCount <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">{</span>\n                    preferCount <span class=\"token operator\">=</span> Mathf<span class=\"token punctuation\">.</span><span class=\"token function\">FloorToInt</span><span class=\"token punctuation\">(</span>rectTransform<span class=\"token punctuation\">.</span>rect<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">.</span>y <span class=\"token operator\">/</span> m_CellSize<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    preferCount <span class=\"token operator\">=</span> preferCount <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> preferCount <span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">case</span> Arrangement<span class=\"token punctuation\">.</span>Horizontal<span class=\"token punctuation\">:</span>\n                axis <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n                preferCount <span class=\"token operator\">=</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">.</span>MaxValue<span class=\"token punctuation\">;</span>\n                tem <span class=\"token operator\">=</span> paddingX<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">case</span> Arrangement<span class=\"token punctuation\">.</span>Vertical<span class=\"token punctuation\">:</span>\n                axis <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n                preferCount <span class=\"token operator\">=</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">.</span>MaxValue<span class=\"token punctuation\">;</span>\n                tem <span class=\"token operator\">=</span> paddingY<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">int</span> flag <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> transform<span class=\"token punctuation\">.</span>childCount<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>flag <span class=\"token operator\">>=</span> preferCount<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>axis <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">{</span>\n                    tem <span class=\"token operator\">=</span> paddingX<span class=\"token punctuation\">;</span>\n                    paddingY <span class=\"token operator\">+</span><span class=\"token operator\">=</span> m_Space<span class=\"token punctuation\">.</span>y <span class=\"token operator\">+</span> m_CellSize<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword\">else</span>\n                <span class=\"token punctuation\">{</span>\n                    tem <span class=\"token operator\">=</span> paddingY<span class=\"token punctuation\">;</span>\n                    paddingX <span class=\"token operator\">+</span><span class=\"token operator\">=</span> m_Space<span class=\"token punctuation\">.</span>x <span class=\"token operator\">+</span> m_CellSize<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                flag <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">var</span> child <span class=\"token operator\">=</span> transform<span class=\"token punctuation\">.</span><span class=\"token function\">GetChild</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> RectTransform<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>child <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> child<span class=\"token punctuation\">.</span>gameObject<span class=\"token punctuation\">.</span>activeSelf<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>axis <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">{</span>\n                    child<span class=\"token punctuation\">.</span><span class=\"token function\">SetInsetAndSizeFromParentEdge</span><span class=\"token punctuation\">(</span>edgeX<span class=\"token punctuation\">,</span> tem<span class=\"token punctuation\">,</span> m_CellSize<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    child<span class=\"token punctuation\">.</span><span class=\"token function\">SetInsetAndSizeFromParentEdge</span><span class=\"token punctuation\">(</span>edgeY<span class=\"token punctuation\">,</span> paddingY<span class=\"token punctuation\">,</span> m_CellSize<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    tem <span class=\"token operator\">+</span><span class=\"token operator\">=</span> m_Space<span class=\"token punctuation\">.</span>x <span class=\"token operator\">+</span> m_CellSize<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>tem <span class=\"token operator\">-</span> m_Space<span class=\"token punctuation\">.</span>x <span class=\"token operator\">></span> m_WrapSize<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">)</span>\n                        m_WrapSize<span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> tem <span class=\"token operator\">-</span> m_Space<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">;</span>\n                    m_WrapSize<span class=\"token punctuation\">.</span>y <span class=\"token operator\">=</span> paddingY <span class=\"token operator\">+</span> m_CellSize<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword\">else</span>\n                <span class=\"token punctuation\">{</span>\n                    child<span class=\"token punctuation\">.</span><span class=\"token function\">SetInsetAndSizeFromParentEdge</span><span class=\"token punctuation\">(</span>edgeX<span class=\"token punctuation\">,</span> paddingX<span class=\"token punctuation\">,</span> m_CellSize<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    child<span class=\"token punctuation\">.</span><span class=\"token function\">SetInsetAndSizeFromParentEdge</span><span class=\"token punctuation\">(</span>edgeY<span class=\"token punctuation\">,</span> tem<span class=\"token punctuation\">,</span> m_CellSize<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    tem <span class=\"token operator\">+</span><span class=\"token operator\">=</span> m_Space<span class=\"token punctuation\">.</span>y <span class=\"token operator\">+</span> m_CellSize<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">;</span>\n\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>tem <span class=\"token operator\">-</span> m_Space<span class=\"token punctuation\">.</span>y <span class=\"token operator\">></span> m_WrapSize<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">)</span>\n                        m_WrapSize<span class=\"token punctuation\">.</span>y <span class=\"token operator\">=</span> tem <span class=\"token operator\">-</span> m_Space<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">;</span>\n                    m_WrapSize<span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> paddingX <span class=\"token operator\">+</span> m_CellSize<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                flag<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        m_WrapSize<span class=\"token punctuation\">.</span>x <span class=\"token operator\">+</span><span class=\"token operator\">=</span> sizeX<span class=\"token punctuation\">;</span>\n        m_WrapSize<span class=\"token punctuation\">.</span>y <span class=\"token operator\">+</span><span class=\"token operator\">=</span> sizeY<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">SetPadding</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> left<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> right<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> top<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> bottom<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        padding <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RectOffset</span><span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">,</span> right<span class=\"token punctuation\">,</span> top<span class=\"token punctuation\">,</span> bottom<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">SetStartCorner</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> start<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        startCorner <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>StartCorner<span class=\"token punctuation\">)</span> start<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">SetArrangement</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> arrange<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        arrangement <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>Arrangement<span class=\"token punctuation\">)</span> arrange<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token generic-method function\">SetProperty<span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">ref</span> T currentValue<span class=\"token punctuation\">,</span> T newValue<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>currentValue <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> newValue <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>currentValue <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> currentValue<span class=\"token punctuation\">.</span><span class=\"token function\">Equals</span><span class=\"token punctuation\">(</span>newValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        currentValue <span class=\"token operator\">=</span> newValue<span class=\"token punctuation\">;</span>\n        <span class=\"token function\">Rebuild</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token punctuation\">[</span>LuaInterface<span class=\"token punctuation\">.</span>NoToLua<span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">enum</span> StartCorner\n    <span class=\"token punctuation\">{</span>\n        TopLeft <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n        TopRight <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n        BottomLeft <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n        BottomRight <span class=\"token operator\">=</span> <span class=\"token number\">3</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token punctuation\">[</span>LuaInterface<span class=\"token punctuation\">.</span>NoToLua<span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">enum</span> Arrangement\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\" spellcheck=\"true\">//横向流动，第一排、第二排...</span>\n        HorizontalFlow <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n        <span class=\"token comment\" spellcheck=\"true\">//纵向流动，第一列、第二列...</span>\n        VerticalFlow <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n        <span class=\"token comment\" spellcheck=\"true\">//横排，相当于fixedCount=1效果</span>\n        Horizontal <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n        <span class=\"token comment\" spellcheck=\"true\">//纵排，相当于fixedCount=1效果</span>\n        Vertical <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span>\n\n\n\n\n<span class=\"token preprocessor property\">#<span class=\"token directive keyword\">if</span> UNITY_EDITOR</span>\n\n<span class=\"token punctuation\">[</span>UnityEditor<span class=\"token punctuation\">.</span><span class=\"token function\">CustomEditor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span>UILayout<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">LayoutEditor</span> <span class=\"token punctuation\">:</span> UnityEditor<span class=\"token punctuation\">.</span>Editor\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">override</span> <span class=\"token keyword\">void</span> <span class=\"token function\">OnInspectorGUI</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">base</span><span class=\"token punctuation\">.</span><span class=\"token function\">OnInspectorGUI</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        GUILayout<span class=\"token punctuation\">.</span><span class=\"token function\">Space</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>GUILayout<span class=\"token punctuation\">.</span><span class=\"token function\">Button</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Rebuild\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            UILayout layout <span class=\"token operator\">=</span> target <span class=\"token keyword\">as</span> UILayout<span class=\"token punctuation\">;</span>\n            layout<span class=\"token punctuation\">.</span><span class=\"token function\">Rebuild</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token preprocessor property\">#<span class=\"token directive keyword\">endif</span></span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>其中 <em>SetInsetAndSizeFromParentEdge</em> 是调用的系统方法，作用是 <strong>设置组件相对于父节点的位置Edge距离（参数1）且在该轴上的长度（参数2）</strong></p>\n<font color=\"red\">注：任何子节点的改变都不会像gridlayoutgroup一样刷新，需要手动调用Rebuild，因为觉得没有必要继承<em>UIBehaviour</em>而是继承了<em>MonoBehaviour</em>。   设置属性会自动刷新.</font>\n\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\">wrapSize 是rebuild后整个包裹区域应该的大小，可用于重新设置尺寸\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n","site":{"data":{"gallery":{"美女":{"full_link":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1508912200438&di=d5b3eacf86d8f94c149c6fc68fe4da67&imgtype=0&src=http%3A%2F%2Fpic01.taopic.com%2F151014%2F234732-15101410452229-lp.jpg","thumb_link":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1508912200438&di=d5b3eacf86d8f94c149c6fc68fe4da67&imgtype=0&src=http%3A%2F%2Fpic01.taopic.com%2F151014%2F234732-15101410452229-lp.jpg","descr":"美女插画"}},"links":{"Github":{"link":"https://github.com/garsonlab","avatar":"https://avatars3.githubusercontent.com/u/13958934?s=460&v=4","descr":"My Github","type":"Blog"},"OnLineTools":{"link":"http://tool.lu/","avatar":"http://qn11.tool.lu/201710/15/103320SbM84Ql4tETjg49a_28x28.png","descr":"在线工具","type":"Tools"},"CMDMarkdown":{"link":"https://www.zybuluo.com/","avatar":"https://www.zybuluo.com/static/img/logo.png","descr":"Markdown在线编辑","type":"Tools"},"Hexo文档":{"link":"https://hexo.io/zh-cn/docs/","avatar":"https://hexo.io/logo.svg","descr":"Hexo中文官方文档","type":"Community"},"游戏蛮牛":{"link":"http://www.manew.com/forum.php","avatar":"http://www.manew.com/template/manew2016/images/logo.png","descr":"unity交流社区","type":"Unity"},"FairyGUI":{"link":"http://www.fairygui.com/","avatar":"http://www.fairygui.com/images/20170728151207.png","descr":"FairyGUI官方网站","type":"Site"}},"linktypes":{"Blog":{"name":"关注的博客"},"Unity":{"name":"Unity3D"},"Community":{"name":"浏览的社区"},"Tools":{"name":"工具"},"Site":{"name":"收藏的网址"}}}},"excerpt":"","more":"<p>UGUI自动布局一直适应 <em>GridLayoutGroup</em>，但是，使用grid时有一个很严重的问题就是：<font color=\"red\">当打开<strong>Profiler</strong>中的<em>Deep Profile</em>时，整个Unity都会崩溃.</font><font color=\"green\" size=\"1\">(目前使用版本v5.6.0)</font>此外，还有一个问题，但是我给忘了…<br>所以，还是自己动手造轮子吧，代码如下：</p>\n<pre><code class=\"csharp\">using UnityEngine;\n\n/// &lt;summary&gt;\n/// Introduction: UILayout, UI自动布局，替代GridLayoutGroup, 子节点改变时需要自行调用 Rebuild\n/// Author:     Garson\n/// Time: \n/// &lt;/summary&gt;\n[RequireComponent(typeof(RectTransform))]\npublic class UILayout : MonoBehaviour\n{\n    [SerializeField]//边距\n    private RectOffset m_Padding = new RectOffset();\n    public RectOffset padding { get { return m_Padding; } set { SetProperty(ref m_Padding, value); } }\n    [SerializeField]//单元格大小\n    private Vector2 m_CellSize = new Vector2(100, 100);\n    public Vector2 cellSize { get { return m_CellSize; } set { SetProperty(ref m_CellSize, value);} }\n    [SerializeField]//开始排布位置\n    private StartCorner m_StartCorner;\n    public StartCorner startCorner { get { return m_StartCorner; } set { SetProperty(ref m_StartCorner, value);} }\n    [SerializeField]//排列方式\n    private Arrangement m_Arrangement;\n    public Arrangement arrangement { get { return m_Arrangement; } set { SetProperty(ref m_Arrangement, value);} }\n    [Tooltip(&quot;&lt;=0自动计算&quot;)]\n    [SerializeField]//每行数目，&lt;=0自动计算\n    private int m_FixedCount;\n    public int fixedCount { get { return m_FixedCount; } set { SetProperty(ref m_FixedCount, value); } }\n    [SerializeField]\n    private Vector2 m_Space;//行列间距\n    public Vector2 space { get { return m_Space; } set { SetProperty(ref m_Space, value); } }\n    private Vector2 m_WrapSize;//排布后该组件应该大小\n    public Vector2 wrapSize { get { return m_WrapSize; } }\n\n    private RectTransform m_rectTransform;\n    private RectTransform rectTransform { get { if(m_rectTransform==null)m_rectTransform=transform as RectTransform;return m_rectTransform;} }\n\n    public void Rebuild()\n    {\n        RectTransform.Edge edgeX = RectTransform.Edge.Left, edgeY= RectTransform.Edge.Top;\n        float paddingX = 0, paddingY = 0, sizeX = 0, sizeY = 0;\n        switch (m_StartCorner)\n        {\n            case StartCorner.TopLeft:\n                edgeY = RectTransform.Edge.Top;\n                edgeX = RectTransform.Edge.Left;\n                paddingX = m_Padding.left;\n                paddingY = m_Padding.top;\n                sizeX = m_Padding.right;\n                sizeY = m_Padding.bottom;\n                break;\n            case StartCorner.TopRight:\n                edgeY = RectTransform.Edge.Top;\n                edgeX = RectTransform.Edge.Right;                  \n                paddingX = m_Padding.right;\n                paddingY = m_Padding.top;\n                sizeX = m_Padding.left;\n                sizeY = m_Padding.bottom;\n                break;\n            case StartCorner.BottomLeft:\n                edgeY = RectTransform.Edge.Bottom;\n                edgeX = RectTransform.Edge.Left;\n                paddingX = m_Padding.left;\n                paddingY = m_Padding.bottom;\n                sizeX = m_Padding.right;\n                sizeY = m_Padding.top;\n                break;\n            case StartCorner.BottomRight:\n                edgeY = RectTransform.Edge.Bottom;\n                edgeX = RectTransform.Edge.Right;\n                paddingX = m_Padding.right;\n                paddingY = m_Padding.bottom;\n                sizeX = m_Padding.left;\n                sizeY = m_Padding.top;\n                break;\n        }\n\n        int axis = 0;\n        int preferCount = m_FixedCount;\n        float tem = 0;\n        m_WrapSize = Vector2.zero;\n        switch (m_Arrangement)\n        {\n            case Arrangement.HorizontalFlow:\n                axis = 0;\n                tem = paddingX;\n                if (m_FixedCount &lt;= 0)\n                {\n                    preferCount = Mathf.FloorToInt(rectTransform.rect.size.x / m_CellSize.x);\n                    preferCount = preferCount &gt; 0 ? preferCount : 1;\n                }\n                break;\n            case Arrangement.VerticalFlow:\n                axis = 1;\n                tem = paddingY;\n                if (m_FixedCount &lt;= 0)\n                {\n                    preferCount = Mathf.FloorToInt(rectTransform.rect.size.y / m_CellSize.y);\n                    preferCount = preferCount &gt; 0 ? preferCount : 1;\n                }\n                break;\n            case Arrangement.Horizontal:\n                axis = 0;\n                preferCount = int.MaxValue;\n                tem = paddingX;\n                break;\n            case Arrangement.Vertical:\n                axis = 1;\n                preferCount = int.MaxValue;\n                tem = paddingY;\n                break;\n        }\n\n        int flag = 0;\n        for (int i = 0; i &lt; transform.childCount; i++)\n        {\n            if (flag &gt;= preferCount)\n            {\n                if (axis == 0)\n                {\n                    tem = paddingX;\n                    paddingY += m_Space.y + m_CellSize.y;\n                }\n                else\n                {\n                    tem = paddingY;\n                    paddingX += m_Space.x + m_CellSize.x;\n                }\n                flag = 0;\n            }\n            var child = transform.GetChild(i) as RectTransform;\n            if (child != null &amp;&amp; child.gameObject.activeSelf)\n            {\n                if (axis == 0)\n                {\n                    child.SetInsetAndSizeFromParentEdge(edgeX, tem, m_CellSize.x);\n                    child.SetInsetAndSizeFromParentEdge(edgeY, paddingY, m_CellSize.y);\n                    tem += m_Space.x + m_CellSize.x;\n                    if (tem - m_Space.x &gt; m_WrapSize.x)\n                        m_WrapSize.x = tem - m_Space.x;\n                    m_WrapSize.y = paddingY + m_CellSize.y;\n                }\n                else\n                {\n                    child.SetInsetAndSizeFromParentEdge(edgeX, paddingX, m_CellSize.x);\n                    child.SetInsetAndSizeFromParentEdge(edgeY, tem, m_CellSize.y);\n                    tem += m_Space.y + m_CellSize.y;\n\n                    if (tem - m_Space.y &gt; m_WrapSize.y)\n                        m_WrapSize.y = tem - m_Space.y;\n                    m_WrapSize.x = paddingX + m_CellSize.x;\n                }\n                flag++;\n            }\n        }\n        m_WrapSize.x += sizeX;\n        m_WrapSize.y += sizeY;\n    }\n\n    public void SetPadding(int left, int right, int top, int bottom)\n    {\n        padding = new RectOffset(left, right, top, bottom);\n    }\n\n    public void SetStartCorner(int start)\n    {\n        startCorner = (StartCorner) start;\n    }\n\n    public void SetArrangement(int arrange)\n    {\n        arrangement = (Arrangement) arrange;\n    }\n\n\n    private void SetProperty&lt;T&gt;(ref T currentValue, T newValue)\n    {\n        if ((currentValue == null &amp;&amp; newValue == null) || (currentValue != null &amp;&amp; currentValue.Equals(newValue)))\n            return;\n        currentValue = newValue;\n        Rebuild();\n    }\n\n    [LuaInterface.NoToLua]\n    public enum StartCorner\n    {\n        TopLeft = 0,\n        TopRight = 1,\n        BottomLeft = 2,\n        BottomRight = 3\n    }\n\n    [LuaInterface.NoToLua]\n    public enum Arrangement\n    {\n        //横向流动，第一排、第二排...\n        HorizontalFlow = 0,\n        //纵向流动，第一列、第二列...\n        VerticalFlow = 1,\n        //横排，相当于fixedCount=1效果\n        Horizontal = 2,\n        //纵排，相当于fixedCount=1效果\n        Vertical = 3,\n    }\n\n}\n\n\n\n\n#if UNITY_EDITOR\n\n[UnityEditor.CustomEditor(typeof(UILayout))]\npublic class LayoutEditor : UnityEditor.Editor\n{\n    public override void OnInspectorGUI()\n    {\n        base.OnInspectorGUI();\n        GUILayout.Space(10);\n        if (GUILayout.Button(&quot;Rebuild&quot;))\n        {\n            UILayout layout = target as UILayout;\n            layout.Rebuild();\n        }\n    }\n}\n#endif\n</code></pre>\n<p>其中 <em>SetInsetAndSizeFromParentEdge</em> 是调用的系统方法，作用是 <strong>设置组件相对于父节点的位置Edge距离（参数1）且在该轴上的长度（参数2）</strong></p>\n<font color=\"red\">注：任何子节点的改变都不会像gridlayoutgroup一样刷新，需要手动调用Rebuild，因为觉得没有必要继承<em>UIBehaviour</em>而是继承了<em>MonoBehaviour</em>。   设置属性会自动刷新.</font>\n\n<pre><code class=\"bash\">wrapSize 是rebuild后整个包裹区域应该的大小，可用于重新设置尺寸\n</code></pre>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cj9fm90sh00002cob2yoia0xy","category_id":"cj9fm90sp00022cobfyleyupy","_id":"cj9fm90t6000c2cobemmqgmnz"},{"post_id":"cj9fm90sn00012cobbyt1lmtu","category_id":"cj9fm90sp00022cobfyleyupy","_id":"cj9fm90td000h2cobgpnuj4ud"},{"post_id":"cj9fm90ss00042cobvk7pgz0n","category_id":"cj9fm90sp00022cobfyleyupy","_id":"cj9fm90tj000m2cobau9oqv80"},{"post_id":"cj9fm90sw00052cobc6a3m4n8","category_id":"cj9fm90td000g2cobtvm5jce6","_id":"cj9fm90tp000u2cobfva228dn"},{"post_id":"cj9fm90sy00062cob7ccl1ucl","category_id":"cj9fm90td000g2cobtvm5jce6","_id":"cj9fm90tv000z2cobwgkxodeb"},{"post_id":"cj9fm90t200092cobmtspscj4","category_id":"cj9fm90td000g2cobtvm5jce6","_id":"cj9fm90u600152cob0xd6rc5g"},{"post_id":"cj9fm90tt000x2cobim8qk389","category_id":"cj9fm90td000g2cobtvm5jce6","_id":"cj9fm90u800192cobyb21wikg"},{"post_id":"cj9fm90u300112cobsx668ydr","category_id":"cj9fm90td000g2cobtvm5jce6","_id":"cj9fm90ua001c2cobcqxupvhi"},{"post_id":"cj9fm90t4000a2cobpmdk3pto","category_id":"cj9fm90td000g2cobtvm5jce6","_id":"cj9fm90uc001g2cobwxua3746"},{"post_id":"cj9fm90u600172cobo5xsx1wy","category_id":"cj9fm90td000g2cobtvm5jce6","_id":"cj9fm90ud001j2cobt09g0717"},{"post_id":"cj9fm90t8000e2cobqz3z7c54","category_id":"cj9fm90u600142cob797we2dj","_id":"cj9fm90ue001m2cobrqi86p7x"},{"post_id":"cj9fm90ua001f2cobayrj1e75","category_id":"cj9fm90ua001d2cobv8hxxoo8","_id":"cj9fm90ug001p2cobailb25q2"},{"post_id":"cj9fm90tb000f2cob503x9w9s","category_id":"cj9fm90ua001d2cobv8hxxoo8","_id":"cj9fm90uh001t2cobhvw9grdk"},{"post_id":"cj9fm90ud001l2cobemazc1oh","category_id":"cj9fm90td000g2cobtvm5jce6","_id":"cj9fm90ui001w2cobbiaylpm1"},{"post_id":"cj9fm90tk000q2cob2arza37u","category_id":"cj9fm90u600142cob797we2dj","_id":"cj9fm90uj001y2cobupdb4pi2"},{"post_id":"cj9fm90ug001s2cob3wefkixy","category_id":"cj9fm90ua001d2cobv8hxxoo8","_id":"cj9fm90uk00202cobkmhd79t9"},{"post_id":"cj9fm90tn000s2cobyu902d9e","category_id":"cj9fm90ua001d2cobv8hxxoo8","_id":"cj9fm90uk00232cobze36n72k"},{"post_id":"cj9fm90tr000w2cobnv24cebn","category_id":"cj9fm90ui001x2coblc1yomx3","_id":"cj9fm90ul00272cobl49128c4"},{"post_id":"cj9fm90u500132cobbjhhj79h","category_id":"cj9fm90ui001x2coblc1yomx3","_id":"cj9fm90um002b2cobqj2nrg64"},{"post_id":"cj9fm90u9001b2cob40wnwbik","category_id":"cj9fm90ua001d2cobv8hxxoo8","_id":"cj9fm90um002f2cobdj2i4xdu"},{"post_id":"cj9fm90uc001i2cobfbnmuvuo","category_id":"cj9fm90ui001x2coblc1yomx3","_id":"cj9fm90un002i2cobmjoa24it"},{"post_id":"cj9fm90uf001o2cobumru69gj","category_id":"cj9fm90ui001x2coblc1yomx3","_id":"cj9fm90uo002k2cob56njrpln"},{"post_id":"cj9kqg4nn000080obs2li7y88","category_id":"cj9fm90ui001x2coblc1yomx3","_id":"cj9kqg4oa000280obj3j4nm9q"}],"PostTag":[{"post_id":"cj9fm90sh00002cob2yoia0xy","tag_id":"cj9fm90ss00032cobmb55an3q","_id":"cj9fm90tg000k2cobofp6vi5c"},{"post_id":"cj9fm90sh00002cob2yoia0xy","tag_id":"cj9fm90t100082cobz6p0ov16","_id":"cj9fm90tj000o2cobj25rtu5m"},{"post_id":"cj9fm90sh00002cob2yoia0xy","tag_id":"cj9fm90t6000d2cobcrutfo5z","_id":"cj9fm90tm000r2cobmnehbeo6"},{"post_id":"cj9fm90sn00012cobbyt1lmtu","tag_id":"cj9fm90te000i2cob5kwtvowr","_id":"cj9fm90u500122cob2eetanrk"},{"post_id":"cj9fm90sn00012cobbyt1lmtu","tag_id":"cj9fm90t100082cobz6p0ov16","_id":"cj9fm90u600162cobs8mjug25"},{"post_id":"cj9fm90sn00012cobbyt1lmtu","tag_id":"cj9fm90t6000d2cobcrutfo5z","_id":"cj9fm90u8001a2cobuwwmpuzf"},{"post_id":"cj9fm90ss00042cobvk7pgz0n","tag_id":"cj9fm90tw00102cobcluemzc1","_id":"cj9fm90ua001e2cobugg1zazr"},{"post_id":"cj9fm90sw00052cobc6a3m4n8","tag_id":"cj9fm90u700182cobabiwop6w","_id":"cj9fm90ug001q2cob9awt0m61"},{"post_id":"cj9fm90sw00052cobc6a3m4n8","tag_id":"cj9fm90uc001h2cobhb2m5p76","_id":"cj9fm90uh001u2cobmjvwrmu9"},{"post_id":"cj9fm90sy00062cob7ccl1ucl","tag_id":"cj9fm90ue001n2cobplqqx79v","_id":"cj9fm90uk00212cobjspeql3r"},{"post_id":"cj9fm90sy00062cob7ccl1ucl","tag_id":"cj9fm90u700182cobabiwop6w","_id":"cj9fm90uk00242cobdzppn02c"},{"post_id":"cj9fm90t200092cobmtspscj4","tag_id":"cj9fm90u700182cobabiwop6w","_id":"cj9fm90ul00292cobenv9jhmu"},{"post_id":"cj9fm90t200092cobmtspscj4","tag_id":"cj9fm90uk00252cob8ycx78yy","_id":"cj9fm90um002c2cobu9a64irw"},{"post_id":"cj9fm90t4000a2cobpmdk3pto","tag_id":"cj9fm90ul00282cobktl0y3bh","_id":"cj9fm90um002g2cobvqq1kgti"},{"post_id":"cj9fm90t8000e2cobqz3z7c54","tag_id":"cj9fm90um002d2cob6uyneqoy","_id":"cj9fm90uo002m2cobswq4ys48"},{"post_id":"cj9fm90t8000e2cobqz3z7c54","tag_id":"cj9fm90un002h2coberpstw7m","_id":"cj9fm90uo002n2cobsign8pxt"},{"post_id":"cj9fm90t8000e2cobqz3z7c54","tag_id":"cj9fm90un002j2cobwhqd08za","_id":"cj9fm90up002p2cob4kt6o9ct"},{"post_id":"cj9fm90tb000f2cob503x9w9s","tag_id":"cj9fm90uo002l2cobbrgavsqd","_id":"cj9fm90up002r2cob5b46botk"},{"post_id":"cj9fm90tb000f2cob503x9w9s","tag_id":"cj9fm90u700182cobabiwop6w","_id":"cj9fm90up002s2cobiyrican2"},{"post_id":"cj9fm90tk000q2cob2arza37u","tag_id":"cj9fm90u700182cobabiwop6w","_id":"cj9fm90uq002v2cobznb02zmz"},{"post_id":"cj9fm90tk000q2cob2arza37u","tag_id":"cj9fm90up002t2cobd16vawds","_id":"cj9fm90uq002w2cob9evy4wk7"},{"post_id":"cj9fm90tn000s2cobyu902d9e","tag_id":"cj9fm90uo002l2cobbrgavsqd","_id":"cj9fm90ur002z2cobn0foix9b"},{"post_id":"cj9fm90tn000s2cobyu902d9e","tag_id":"cj9fm90u700182cobabiwop6w","_id":"cj9fm90ur00302cobq6r327j6"},{"post_id":"cj9fm90tr000w2cobnv24cebn","tag_id":"cj9fm90uq002y2cobc9kfjxr4","_id":"cj9fm90ur00332coby1e7bsl9"},{"post_id":"cj9fm90tr000w2cobnv24cebn","tag_id":"cj9fm90ur00312cobdscqcuc3","_id":"cj9fm90ur00342cobx6saidrr"},{"post_id":"cj9fm90tt000x2cobim8qk389","tag_id":"cj9fm90ur00322cobu9bqykuc","_id":"cj9fm90us00372cobcteha2h6"},{"post_id":"cj9fm90tt000x2cobim8qk389","tag_id":"cj9fm90ur00352cobqet4faem","_id":"cj9fm90ut00382cobq29gx34a"},{"post_id":"cj9fm90u300112cobsx668ydr","tag_id":"cj9fm90us00362cob720a6an1","_id":"cj9fm90uu003b2cobqvgn8k2m"},{"post_id":"cj9fm90u300112cobsx668ydr","tag_id":"cj9fm90u700182cobabiwop6w","_id":"cj9fm90uv003c2cobc6yc6kax"},{"post_id":"cj9fm90u500132cobbjhhj79h","tag_id":"cj9fm90uq002y2cobc9kfjxr4","_id":"cj9fm90uw003f2cobu4bnlh4m"},{"post_id":"cj9fm90u500132cobbjhhj79h","tag_id":"cj9fm90ur00312cobdscqcuc3","_id":"cj9fm90uw003g2cob6es45u9f"},{"post_id":"cj9fm90u600172cobo5xsx1wy","tag_id":"cj9fm90uv003e2cob2nfdq8b2","_id":"cj9fm90uw003j2cob1pclwb7t"},{"post_id":"cj9fm90u600172cobo5xsx1wy","tag_id":"cj9fm90u700182cobabiwop6w","_id":"cj9fm90uw003k2cob5yeuknr6"},{"post_id":"cj9fm90u9001b2cob40wnwbik","tag_id":"cj9fm90uo002l2cobbrgavsqd","_id":"cj9fm90ux003m2cobap7e2369"},{"post_id":"cj9fm90u9001b2cob40wnwbik","tag_id":"cj9fm90u700182cobabiwop6w","_id":"cj9fm90ux003n2cobrf8z3ess"},{"post_id":"cj9fm90ua001f2cobayrj1e75","tag_id":"cj9fm90uo002l2cobbrgavsqd","_id":"cj9fm90uy003p2cobpfwe9c2m"},{"post_id":"cj9fm90ua001f2cobayrj1e75","tag_id":"cj9fm90u700182cobabiwop6w","_id":"cj9fm90uy003q2cobuwiy7j9k"},{"post_id":"cj9fm90uc001i2cobfbnmuvuo","tag_id":"cj9fm90uq002y2cobc9kfjxr4","_id":"cj9fm90uz003t2cobprg4buwj"},{"post_id":"cj9fm90uc001i2cobfbnmuvuo","tag_id":"cj9fm90uz003r2cobxfo0247i","_id":"cj9fm90uz003u2cobhsshigwt"},{"post_id":"cj9fm90ud001l2cobemazc1oh","tag_id":"cj9fm90uz003s2cobzwov73pf","_id":"cj9fm90uz003w2cob8p9d1l8y"},{"post_id":"cj9fm90ud001l2cobemazc1oh","tag_id":"cj9fm90u700182cobabiwop6w","_id":"cj9fm90v0003x2cobnbm85or3"},{"post_id":"cj9fm90uf001o2cobumru69gj","tag_id":"cj9fm90uq002y2cobc9kfjxr4","_id":"cj9fm90v000402cobklsdxcik"},{"post_id":"cj9fm90uf001o2cobumru69gj","tag_id":"cj9fm90v0003y2cob861ezmit","_id":"cj9fm90v000412cobsblfehqc"},{"post_id":"cj9fm90ug001s2cob3wefkixy","tag_id":"cj9fm90uo002l2cobbrgavsqd","_id":"cj9fm90v000422cobf4f2k7mr"},{"post_id":"cj9fm90ug001s2cob3wefkixy","tag_id":"cj9fm90u700182cobabiwop6w","_id":"cj9fm90v100432cobo6s2eq54"},{"post_id":"cj9kqg4nn000080obs2li7y88","tag_id":"cj9fm90uq002y2cobc9kfjxr4","_id":"cj9kqg4oc000380obw35w63v4"},{"post_id":"cj9kqg4nn000080obs2li7y88","tag_id":"cj9kqg4ny000180obq8uzzsta","_id":"cj9kqg4oc000480obc3678jvc"}],"Tag":[{"name":"hexo","_id":"cj9fm90ss00032cobmb55an3q"},{"name":"git","_id":"cj9fm90t100082cobz6p0ov16"},{"name":"github","_id":"cj9fm90t6000d2cobcrutfo5z"},{"name":"svn","_id":"cj9fm90te000i2cob5kwtvowr"},{"name":"Android","_id":"cj9fm90tw00102cobcluemzc1"},{"name":"Unity","_id":"cj9fm90u700182cobabiwop6w"},{"name":"坐标轴","_id":"cj9fm90uc001h2cobhb2m5p76"},{"name":"画线","_id":"cj9fm90ue001n2cobplqqx79v"},{"name":"c++","_id":"cj9fm90uk00252cob8ycx78yy"},{"name":"xml解析","_id":"cj9fm90ul00282cobktl0y3bh"},{"name":"敏感词","_id":"cj9fm90um002d2cob6uyneqoy"},{"name":"字典树","_id":"cj9fm90un002h2coberpstw7m"},{"name":"Lua","_id":"cj9fm90un002j2cobwhqd08za"},{"name":"Shader","_id":"cj9fm90uo002l2cobbrgavsqd"},{"name":"Mesh","_id":"cj9fm90up002t2cobd16vawds"},{"name":"UGUI","_id":"cj9fm90uq002y2cobc9kfjxr4"},{"name":"对齐","_id":"cj9fm90ur00312cobdscqcuc3"},{"name":"A*","_id":"cj9fm90ur00322cobu9bqykuc"},{"name":"优化","_id":"cj9fm90ur00352cobqet4faem"},{"name":"区域检测","_id":"cj9fm90us00362cob720a6an1"},{"name":"扫雷","_id":"cj9fm90uv003e2cob2nfdq8b2"},{"name":"无限列表","_id":"cj9fm90uz003r2cobxfo0247i"},{"name":"cd管理","_id":"cj9fm90uz003s2cobzwov73pf"},{"name":"Dropdown","_id":"cj9fm90v0003y2cob861ezmit"},{"name":"Layout","_id":"cj9kqg4ny000180obq8uzzsta"}]}}